
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800783c  0800783c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007844  08007844  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800784c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  20000060  080078ac  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  080078ac  00020820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018cde  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd2  00000000  00000000  00038db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ba  00000000  00000000  0003d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029a4  00000000  00000000  0003e2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fa5  00000000  00000000  00040c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ded19  00000000  00000000  00059c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006880  00000000  00000000  0013895c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0013f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007778 	.word	0x08007778

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007778 	.word	0x08007778

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 fa47 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f8b0 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80005c8:	f000 fcfe 	bl	8000fc8 <MX_DMA_Init>
  MX_GPIO_Init();
 80005cc:	f000 fd26 	bl	800101c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d0:	f000 f8ea 	bl	80007a8 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80005d4:	f000 f9ca 	bl	800096c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80005d8:	f000 fa0e 	bl	80009f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005dc:	f000 faba 	bl	8000b54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e0:	f000 fb2c 	bl	8000c3c <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e4:	f000 fb9e 	bl	8000d24 <MX_TIM4_Init>
  MX_TIM6_Init();
 80005e8:	f000 fc10 	bl	8000e0c <MX_TIM6_Init>
  MX_TIM7_Init();
 80005ec:	f000 fc44 	bl	8000e78 <MX_TIM7_Init>
  MX_TIM16_Init();
 80005f0:	f000 fc78 	bl	8000ee4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fc9c 	bl	8000f30 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80005f8:	f000 f950 	bl	800089c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); //PWM
 80005fc:	4832      	ldr	r0, [pc, #200]	; (80006c8 <main+0x10c>)
 80005fe:	f004 fd8f 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //PWM
 8000602:	4832      	ldr	r0, [pc, #200]	; (80006cc <main+0x110>)
 8000604:	f004 fd8c 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //PWM
 8000608:	4831      	ldr	r0, [pc, #196]	; (80006d0 <main+0x114>)
 800060a:	f004 fd89 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); //PWM
 800060e:	4831      	ldr	r0, [pc, #196]	; (80006d4 <main+0x118>)
 8000610:	f004 fd86 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000614:	4830      	ldr	r0, [pc, #192]	; (80006d8 <main+0x11c>)
 8000616:	f004 fd83 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800061a:	4830      	ldr	r0, [pc, #192]	; (80006dc <main+0x120>)
 800061c:	f004 fd80 	bl	8005120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000620:	482f      	ldr	r0, [pc, #188]	; (80006e0 <main+0x124>)
 8000622:	f004 fd7d 	bl	8005120 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CS_read();
 8000626:	f000 fdc7 	bl	80011b8 <CS_read>
	  CS_process();
 800062a:	f000 fe83 	bl	8001334 <CS_process>
	  print_out(IN1_1_PROC,"1_1",data_output_switch);
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <main+0x128>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <main+0x12c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	492c      	ldr	r1, [pc, #176]	; (80006ec <main+0x130>)
 800063c:	f000 fd68 	bl	8001110 <print_out>
	  print_out(IN2_1_PROC,"2_1",data_output_switch);
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <main+0x134>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <main+0x12c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4929      	ldr	r1, [pc, #164]	; (80006f4 <main+0x138>)
 800064e:	f000 fd5f 	bl	8001110 <print_out>
	  print_out(IN3_1_PROC,"3_1",data_output_switch);
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <main+0x13c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0x12c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4927      	ldr	r1, [pc, #156]	; (80006fc <main+0x140>)
 8000660:	f000 fd56 	bl	8001110 <print_out>
	  print_out(IN4_1_PROC,"4_1",data_output_switch);
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <main+0x144>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <main+0x12c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	4924      	ldr	r1, [pc, #144]	; (8000704 <main+0x148>)
 8000672:	f000 fd4d 	bl	8001110 <print_out>
	  print_out(IN1_2_PROC,"1_2",data_output_switch);
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <main+0x14c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <main+0x12c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4922      	ldr	r1, [pc, #136]	; (800070c <main+0x150>)
 8000684:	f000 fd44 	bl	8001110 <print_out>
	  print_out(IN2_2_PROC,"2_2",data_output_switch);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <main+0x154>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <main+0x12c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	491f      	ldr	r1, [pc, #124]	; (8000714 <main+0x158>)
 8000696:	f000 fd3b 	bl	8001110 <print_out>
	  print_out(IN3_2_PROC,"3_2",data_output_switch);
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <main+0x15c>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <main+0x12c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	491d      	ldr	r1, [pc, #116]	; (800071c <main+0x160>)
 80006a8:	f000 fd32 	bl	8001110 <print_out>
	  print_out(IN4_2_PROC,"4_2",data_output_switch);
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <main+0x164>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <main+0x12c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	491a      	ldr	r1, [pc, #104]	; (8000724 <main+0x168>)
 80006ba:	f000 fd29 	bl	8001110 <print_out>

	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f001 fa37 	bl	8001b34 <HAL_Delay>
	  CS_read();
 80006c6:	e7ae      	b.n	8000626 <main+0x6a>
 80006c8:	20000218 	.word	0x20000218
 80006cc:	20000264 	.word	0x20000264
 80006d0:	200002b0 	.word	0x200002b0
 80006d4:	200002fc 	.word	0x200002fc
 80006d8:	20000348 	.word	0x20000348
 80006dc:	20000394 	.word	0x20000394
 80006e0:	200003e0 	.word	0x200003e0
 80006e4:	200006bc 	.word	0x200006bc
 80006e8:	20000000 	.word	0x20000000
 80006ec:	08007790 	.word	0x08007790
 80006f0:	200006be 	.word	0x200006be
 80006f4:	08007794 	.word	0x08007794
 80006f8:	200006c0 	.word	0x200006c0
 80006fc:	08007798 	.word	0x08007798
 8000700:	200006c2 	.word	0x200006c2
 8000704:	0800779c 	.word	0x0800779c
 8000708:	200006c4 	.word	0x200006c4
 800070c:	080077a0 	.word	0x080077a0
 8000710:	200006c6 	.word	0x200006c6
 8000714:	080077a4 	.word	0x080077a4
 8000718:	200006c8 	.word	0x200006c8
 800071c:	080077a8 	.word	0x080077a8
 8000720:	200006ca 	.word	0x200006ca
 8000724:	080077ac 	.word	0x080077ac

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2238      	movs	r2, #56	; 0x38
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fb9a 	bl	8006e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074e:	f003 fcb7 	bl	80040c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2340      	movs	r3, #64	; 0x40
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fd5d 	bl	8004228 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000774:	f000 fe82 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	2301      	movs	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f861 	bl	8004858 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800079c:	f000 fe6e 	bl	800147c <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f006 fb55 	bl	8006e70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000802:	2201      	movs	r2, #1
 8000804:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000832:	f001 fc1f 	bl	8002074 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800083c:	f000 fe1e 	bl	800147c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_ADC1_Init+0xe8>)
 800084c:	f002 fd80 	bl	8003350 <HAL_ADCEx_MultiModeConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 fe11 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_ADC1_Init+0xec>)
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2306      	movs	r3, #6
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_ADC1_Init+0xf0>)
 8000868:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000878:	f001 ffd6 	bl	8002828 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000882:	f000 fdfb 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000007c 	.word	0x2000007c
 8000894:	04300002 	.word	0x04300002
 8000898:	407f0000 	.word	0x407f0000

0800089c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2220      	movs	r2, #32
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fae1 	bl	8006e70 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_ADC2_Init+0xc0>)
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <MX_ADC2_Init+0xc4>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_ADC2_Init+0xc0>)
 80008b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_ADC2_Init+0xc0>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ADC2_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ADC2_Init+0xc0>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ADC2_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC2_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_ADC2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_ADC2_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ADC2_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ADC2_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_ADC2_Init+0xc0>)
 8000918:	f001 fbac 	bl	8002074 <HAL_ADC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000922:	f000 fdab 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_ADC2_Init+0xc8>)
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092a:	2306      	movs	r3, #6
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_ADC2_Init+0xcc>)
 8000934:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000936:	2304      	movs	r3, #4
 8000938:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_ADC2_Init+0xc0>)
 8000944:	f001 ff70 	bl	8002828 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800094e:	f000 fd95 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000e8 	.word	0x200000e8
 8000960:	50000100 	.word	0x50000100
 8000964:	0c900008 	.word	0x0c900008
 8000968:	407f0000 	.word	0x407f0000

0800096c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 8000972:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <MX_FDCAN1_Init+0x88>)
 8000974:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 800098a:	2200      	movs	r2, #0
 800098c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 8000990:	2200      	movs	r2, #0
 8000992:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 8000996:	2200      	movs	r2, #0
 8000998:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 800099c:	2210      	movs	r2, #16
 800099e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_FDCAN1_Init+0x84>)
 80009de:	f003 f825 	bl	8003a2c <HAL_FDCAN_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80009e8:	f000 fd48 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001b4 	.word	0x200001b4
 80009f4:	40006400 	.word	0x40006400

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09c      	sub	sp, #112	; 0x70
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 fa1c 	bl	8006e70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a38:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a3a:	4a45      	ldr	r2, [pc, #276]	; (8000b50 <MX_TIM1_Init+0x158>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a3e:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a64:	4839      	ldr	r0, [pc, #228]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a66:	f004 fb03 	bl	8005070 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 fd04 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4832      	ldr	r0, [pc, #200]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a82:	f004 fd2d 	bl	80054e0 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 fcf6 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a90:	482e      	ldr	r0, [pc, #184]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000a92:	f004 fbaf 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a9c:	f000 fcee 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000ab4:	f005 fa30 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000abe:	f000 fcdd 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000ae8:	f004 fbe6 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000af2:	f000 fcc3 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_TIM1_Init+0x154>)
 8000b34:	f005 fa72 	bl	800601c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000b3e:	f000 fc9d 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3770      	adds	r7, #112	; 0x70
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000218 	.word	0x20000218
 8000b50:	40012c00 	.word	0x40012c00

08000b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000bb0:	f004 fa5e 	bl	8005070 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 fc5f 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481b      	ldr	r0, [pc, #108]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000bcc:	f004 fc88 	bl	80054e0 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bd6:	f000 fc51 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bda:	4817      	ldr	r0, [pc, #92]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000bdc:	f004 fb0a 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000be6:	f000 fc49 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000bfa:	f005 f98d 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c04:	f000 fc3a 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM2_Init+0xe4>)
 8000c20:	f004 fb4a 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c2a:	f000 fc27 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3738      	adds	r7, #56	; 0x38
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000264 	.word	0x20000264

08000c3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c70:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <MX_TIM3_Init+0xe4>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c94:	4821      	ldr	r0, [pc, #132]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000c96:	f004 f9eb 	bl	8005070 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ca0:	f000 fbec 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481a      	ldr	r0, [pc, #104]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000cb2:	f004 fc15 	bl	80054e0 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cbc:	f000 fbde 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000cc2:	f004 fa97 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ccc:	f000 fbd6 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000ce0:	f005 f91a 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000cea:	f000 fbc7 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cee:	2360      	movs	r3, #96	; 0x60
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM3_Init+0xe0>)
 8000d06:	f004 fad7 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d10:	f000 fbb4 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200002b0 	.word	0x200002b0
 8000d20:	40000400 	.word	0x40000400

08000d24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d58:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <MX_TIM4_Init+0xe4>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d7c:	4821      	ldr	r0, [pc, #132]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d7e:	f004 f977 	bl	8005070 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d88:	f000 fb78 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	4619      	mov	r1, r3
 8000d98:	481a      	ldr	r0, [pc, #104]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000d9a:	f004 fba1 	bl	80054e0 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000da4:	f000 fb6a 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000da8:	4816      	ldr	r0, [pc, #88]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000daa:	f004 fa23 	bl	80051f4 <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000db4:	f000 fb62 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000dc8:	f005 f8a6 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f000 fb53 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_TIM4_Init+0xe0>)
 8000dee:	f004 fa63 	bl	80052b8 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000df8:	f000 fb40 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3738      	adds	r7, #56	; 0x38
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200002fc 	.word	0x200002fc
 8000e08:	40000800 	.word	0x40000800

08000e0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_TIM6_Init+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e3e:	f004 f917 	bl	8005070 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e48:	f000 fb18 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e5a:	f005 f85d 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f000 fb0a 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000348 	.word	0x20000348
 8000e74:	40001000 	.word	0x40001000

08000e78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_TIM7_Init+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_TIM7_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM7_Init+0x64>)
 8000eaa:	f004 f8e1 	bl	8005070 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000eb4:	f000 fae2 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM7_Init+0x64>)
 8000ec6:	f005 f827 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 fad4 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000394 	.word	0x20000394
 8000ee0:	40001400 	.word	0x40001400

08000ee4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <MX_TIM16_Init+0x48>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_TIM16_Init+0x44>)
 8000f16:	f004 f8ab 	bl	8005070 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000f20:	f000 faac 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003e0 	.word	0x200003e0
 8000f2c:	40014400 	.word	0x40014400

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <MX_USART2_UART_Init+0x94>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f7a:	f005 f8ef 	bl	800615c <HAL_UART_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f84:	f000 fa7a 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f8c:	f005 fe86 	bl	8006c9c <HAL_UARTEx_SetTxFifoThreshold>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f96:	f000 fa71 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000f9e:	f005 febb 	bl	8006d18 <HAL_UARTEx_SetRxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fa8:	f000 fa68 	bl	800147c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_USART2_UART_Init+0x90>)
 8000fae:	f005 fe3c 	bl	8006c2a <HAL_UARTEx_DisableFifoMode>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fa60 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000042c 	.word	0x2000042c
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_DMA_Init+0x50>)
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <MX_DMA_Init+0x50>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_DMA_Init+0x50>)
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_DMA_Init+0x50>)
 8000fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <MX_DMA_Init+0x50>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_DMA_Init+0x50>)
 8000ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	200c      	movs	r0, #12
 8001004:	f002 fb23 	bl	800364e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001008:	200c      	movs	r0, #12
 800100a:	f002 fb3a 	bl	8003682 <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a33      	ldr	r2, [pc, #204]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_GPIO_Init+0xe8>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a27      	ldr	r2, [pc, #156]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_GPIO_Init+0xe8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4821      	ldr	r0, [pc, #132]	; (8001108 <MX_GPIO_Init+0xec>)
 8001082:	f003 f805 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|SEL1_2_Pin|IN3_Pin|IN2_Pin
 8001086:	2200      	movs	r2, #0
 8001088:	f248 6130 	movw	r1, #34352	; 0x8630
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f002 fffe 	bl	8004090 <HAL_GPIO_WritePin>
                          |IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEL0_2_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001094:	2200      	movs	r2, #0
 8001096:	f240 11b9 	movw	r1, #441	; 0x1b9
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <MX_GPIO_Init+0xf0>)
 800109c:	f002 fff8 	bl	8004090 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 80010a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_GPIO_Init+0xec>)
 80010ba:	f002 fe67 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin SEL1_2_Pin IN3_Pin IN2_Pin
                           IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|SEL1_2_Pin|IN3_Pin|IN2_Pin
 80010be:	f248 6330 	movw	r3, #34352	; 0x8630
 80010c2:	60fb      	str	r3, [r7, #12]
                          |IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f002 fe57 	bl	8003d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL0_2_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = SEL0_2_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 80010de:	f240 13b9 	movw	r3, #441	; 0x1b9
 80010e2:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_GPIO_Init+0xf0>)
 80010f8:	f002 fe48 	bl	8003d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	48001800 	.word	0x48001800
 800110c:	48000400 	.word	0x48000400

08001110 <print_out>:

/* USER CODE BEGIN 4 */
void print_out(uint32_t data, const char *text, uint8_t out_mode){
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)+sizeof(data_buffer)+4+2+4] = "";
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	821a      	strh	r2, [r3, #16]
	if(data == -1){
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d107      	bne.n	8001156 <print_out+0x46>
		sprintf(msg, "\r\n%s \r\n", buffer);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	4916      	ldr	r1, [pc, #88]	; (80011a8 <print_out+0x98>)
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fe6e 	bl	8006e30 <siprintf>
 8001154:	e006      	b.n	8001164 <print_out+0x54>
	}else{
		sprintf(msg, "\r\n%s %lu\r\n", buffer, data_buffer);
 8001156:	f107 0010 	add.w	r0, r7, #16
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115e:	4913      	ldr	r1, [pc, #76]	; (80011ac <print_out+0x9c>)
 8001160:	f005 fe66 	bl	8006e30 <siprintf>
	}

	switch(out_mode){
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d00f      	beq.n	800118a <print_out+0x7a>
 800116a:	2b03      	cmp	r3, #3
 800116c:	dc17      	bgt.n	800119e <print_out+0x8e>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d001      	beq.n	8001176 <print_out+0x66>
 8001172:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
			  text = "";
			  break;
		  case 0b10: //output only through CAN
			  //TODO implement CAN
			  break;
 8001174:	e013      	b.n	800119e <print_out+0x8e>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8001176:	f107 0110 	add.w	r1, r7, #16
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	2216      	movs	r2, #22
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <print_out+0xa0>)
 8001180:	f005 f83c 	bl	80061fc <HAL_UART_Transmit>
			  text = "";
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <print_out+0xa4>)
 8001186:	60bb      	str	r3, [r7, #8]
			  break;
 8001188:	e009      	b.n	800119e <print_out+0x8e>
		  case 0b11://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 800118a:	f107 0110 	add.w	r1, r7, #16
 800118e:	23ff      	movs	r3, #255	; 0xff
 8001190:	2216      	movs	r2, #22
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <print_out+0xa0>)
 8001194:	f005 f832 	bl	80061fc <HAL_UART_Transmit>
			  text = "";
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <print_out+0xa4>)
 800119a:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 800119c:	bf00      	nop
		  }
}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	080077b0 	.word	0x080077b0
 80011ac:	080077b8 	.word	0x080077b8
 80011b0:	2000042c 	.word	0x2000042c
 80011b4:	080077c4 	.word	0x080077c4

080011b8 <CS_read>:

void CS_read(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e099      	b.n	80012f8 <CS_read+0x140>
		for(int i = 0; i < I_AVERAGE; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	e08f      	b.n	80012ea <CS_read+0x132>
			if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80011ca:	4850      	ldr	r0, [pc, #320]	; (800130c <CS_read+0x154>)
 80011cc:	f001 f9b4 	bl	8002538 <HAL_ADC_Start_IT>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <CS_read+0x22>
 80011d6:	f000 f951 	bl	800147c <Error_Handler>
			if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80011da:	484d      	ldr	r0, [pc, #308]	; (8001310 <CS_read+0x158>)
 80011dc:	f001 f9ac 	bl	8002538 <HAL_ADC_Start_IT>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <CS_read+0x32>
 80011e6:	f000 f949 	bl	800147c <Error_Handler>
			if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80011ea:	210a      	movs	r1, #10
 80011ec:	4847      	ldr	r0, [pc, #284]	; (800130c <CS_read+0x154>)
 80011ee:	f001 f8cb 	bl	8002388 <HAL_ADC_PollForConversion>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <CS_read+0x44>
 80011f8:	f000 f940 	bl	800147c <Error_Handler>
			if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80011fc:	210a      	movs	r1, #10
 80011fe:	4844      	ldr	r0, [pc, #272]	; (8001310 <CS_read+0x158>)
 8001200:	f001 f8c2 	bl	8002388 <HAL_ADC_PollForConversion>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <CS_read+0x56>
 800120a:	f000 f937 	bl	800147c <Error_Handler>
				switch(x){
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d857      	bhi.n	80012c4 <CS_read+0x10c>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <CS_read+0x64>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	08001253 	.word	0x08001253
 8001224:	08001279 	.word	0x08001279
 8001228:	0800129f 	.word	0x0800129f
				case 0:
					IN1_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 800122c:	4837      	ldr	r0, [pc, #220]	; (800130c <CS_read+0x154>)
 800122e:	f001 faee 	bl	800280e <HAL_ADC_GetValue>
 8001232:	4603      	mov	r3, r0
 8001234:	b299      	uxth	r1, r3
 8001236:	4a37      	ldr	r2, [pc, #220]	; (8001314 <CS_read+0x15c>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					IN1_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 800123e:	4834      	ldr	r0, [pc, #208]	; (8001310 <CS_read+0x158>)
 8001240:	f001 fae5 	bl	800280e <HAL_ADC_GetValue>
 8001244:	4603      	mov	r3, r0
 8001246:	b299      	uxth	r1, r3
 8001248:	4a33      	ldr	r2, [pc, #204]	; (8001318 <CS_read+0x160>)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 8001250:	e038      	b.n	80012c4 <CS_read+0x10c>
				case 1:
					IN2_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8001252:	482e      	ldr	r0, [pc, #184]	; (800130c <CS_read+0x154>)
 8001254:	f001 fadb 	bl	800280e <HAL_ADC_GetValue>
 8001258:	4603      	mov	r3, r0
 800125a:	b299      	uxth	r1, r3
 800125c:	4a2f      	ldr	r2, [pc, #188]	; (800131c <CS_read+0x164>)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					IN2_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8001264:	482a      	ldr	r0, [pc, #168]	; (8001310 <CS_read+0x158>)
 8001266:	f001 fad2 	bl	800280e <HAL_ADC_GetValue>
 800126a:	4603      	mov	r3, r0
 800126c:	b299      	uxth	r1, r3
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <CS_read+0x168>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 8001276:	e025      	b.n	80012c4 <CS_read+0x10c>
				case 2:
					IN3_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <CS_read+0x154>)
 800127a:	f001 fac8 	bl	800280e <HAL_ADC_GetValue>
 800127e:	4603      	mov	r3, r0
 8001280:	b299      	uxth	r1, r3
 8001282:	4a28      	ldr	r2, [pc, #160]	; (8001324 <CS_read+0x16c>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					IN3_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <CS_read+0x158>)
 800128c:	f001 fabf 	bl	800280e <HAL_ADC_GetValue>
 8001290:	4603      	mov	r3, r0
 8001292:	b299      	uxth	r1, r3
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <CS_read+0x170>)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 800129c:	e012      	b.n	80012c4 <CS_read+0x10c>
				case 3:
					IN4_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <CS_read+0x154>)
 80012a0:	f001 fab5 	bl	800280e <HAL_ADC_GetValue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b299      	uxth	r1, r3
 80012a8:	4a20      	ldr	r2, [pc, #128]	; (800132c <CS_read+0x174>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					IN4_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <CS_read+0x158>)
 80012b2:	f001 faac 	bl	800280e <HAL_ADC_GetValue>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b299      	uxth	r1, r3
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <CS_read+0x178>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					break;
 80012c2:	bf00      	nop
				}
			if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80012c4:	4811      	ldr	r0, [pc, #68]	; (800130c <CS_read+0x154>)
 80012c6:	f001 fa67 	bl	8002798 <HAL_ADC_Stop_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <CS_read+0x11c>
 80012d0:	f000 f8d4 	bl	800147c <Error_Handler>
			if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80012d4:	480e      	ldr	r0, [pc, #56]	; (8001310 <CS_read+0x158>)
 80012d6:	f001 fa5f 	bl	8002798 <HAL_ADC_Stop_IT>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <CS_read+0x12c>
 80012e0:	f000 f8cc 	bl	800147c <Error_Handler>
		for(int i = 0; i < I_AVERAGE; i++){
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	f77f af6c 	ble.w	80011ca <CS_read+0x12>
	for(int x = 0; x < 4; x++){
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	f77f af62 	ble.w	80011c4 <CS_read+0xc>
		}
	}
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000007c 	.word	0x2000007c
 8001310:	200000e8 	.word	0x200000e8
 8001314:	200004bc 	.word	0x200004bc
 8001318:	200005bc 	.word	0x200005bc
 800131c:	200004fc 	.word	0x200004fc
 8001320:	200005fc 	.word	0x200005fc
 8001324:	2000053c 	.word	0x2000053c
 8001328:	2000063c 	.word	0x2000063c
 800132c:	2000057c 	.word	0x2000057c
 8001330:	2000067c 	.word	0x2000067c

08001334 <CS_process>:

void CS_process(){
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
	for(int i = 0; i < I_AVERAGE; i++){
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	e072      	b.n	8001426 <CS_process+0xf2>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <CS_process+0x108>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <CS_process+0x10c>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	440b      	add	r3, r1
 8001350:	0fda      	lsrs	r2, r3, #31
 8001352:	4413      	add	r3, r2
 8001354:	105b      	asrs	r3, r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b38      	ldr	r3, [pc, #224]	; (800143c <CS_process+0x108>)
 800135a:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <CS_process+0x110>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4a39      	ldr	r2, [pc, #228]	; (8001448 <CS_process+0x114>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	440b      	add	r3, r1
 800136c:	0fda      	lsrs	r2, r3, #31
 800136e:	4413      	add	r3, r2
 8001370:	105b      	asrs	r3, r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <CS_process+0x110>)
 8001376:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <CS_process+0x118>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <CS_process+0x11c>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001386:	440b      	add	r3, r1
 8001388:	0fda      	lsrs	r2, r3, #31
 800138a:	4413      	add	r3, r2
 800138c:	105b      	asrs	r3, r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <CS_process+0x118>)
 8001392:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 8001394:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <CS_process+0x120>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <CS_process+0x124>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a2:	440b      	add	r3, r1
 80013a4:	0fda      	lsrs	r2, r3, #31
 80013a6:	4413      	add	r3, r2
 80013a8:	105b      	asrs	r3, r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <CS_process+0x120>)
 80013ae:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <CS_process+0x128>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <CS_process+0x12c>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013be:	440b      	add	r3, r1
 80013c0:	0fda      	lsrs	r2, r3, #31
 80013c2:	4413      	add	r3, r2
 80013c4:	105b      	asrs	r3, r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <CS_process+0x128>)
 80013ca:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <CS_process+0x130>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4a25      	ldr	r2, [pc, #148]	; (8001468 <CS_process+0x134>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013da:	440b      	add	r3, r1
 80013dc:	0fda      	lsrs	r2, r3, #31
 80013de:	4413      	add	r3, r2
 80013e0:	105b      	asrs	r3, r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <CS_process+0x130>)
 80013e6:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <CS_process+0x138>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <CS_process+0x13c>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f6:	440b      	add	r3, r1
 80013f8:	0fda      	lsrs	r2, r3, #31
 80013fa:	4413      	add	r3, r2
 80013fc:	105b      	asrs	r3, r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <CS_process+0x138>)
 8001402:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <CS_process+0x140>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <CS_process+0x144>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001412:	440b      	add	r3, r1
 8001414:	0fda      	lsrs	r2, r3, #31
 8001416:	4413      	add	r3, r2
 8001418:	105b      	asrs	r3, r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <CS_process+0x140>)
 800141e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < I_AVERAGE; i++){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b1f      	cmp	r3, #31
 800142a:	dd89      	ble.n	8001340 <CS_process+0xc>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200006bc 	.word	0x200006bc
 8001440:	200004bc 	.word	0x200004bc
 8001444:	200006be 	.word	0x200006be
 8001448:	200004fc 	.word	0x200004fc
 800144c:	200006c0 	.word	0x200006c0
 8001450:	2000053c 	.word	0x2000053c
 8001454:	200006c2 	.word	0x200006c2
 8001458:	2000057c 	.word	0x2000057c
 800145c:	200006c4 	.word	0x200006c4
 8001460:	200005bc 	.word	0x200005bc
 8001464:	200006c6 	.word	0x200006c6
 8001468:	200005fc 	.word	0x200005fc
 800146c:	200006c8 	.word	0x200006c8
 8001470:	2000063c 	.word	0x2000063c
 8001474:	200006ca 	.word	0x200006ca
 8001478:	2000067c 	.word	0x2000067c

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x44>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	; 0x60
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x44>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014be:	f002 fea3 	bl	8004208 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b09c      	sub	sp, #112	; 0x70
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2244      	movs	r2, #68	; 0x44
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 fcbd 	bl	8006e70 <memset>
  if(hadc->Instance==ADC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fe:	d169      	bne.n	80015d4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001504:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001506:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800150a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fbbd 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800151c:	f7ff ffae 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_ADC_MspInit+0x194>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <HAL_ADC_MspInit+0x194>)
 8001528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800152a:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <HAL_ADC_MspInit+0x194>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10b      	bne.n	800154a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_ADC_MspInit+0x198>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001562:	2303      	movs	r3, #3
 8001564:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f002 fc08 	bl	8003d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_ADC_MspInit+0x19c>)
 800157e:	4a3c      	ldr	r2, [pc, #240]	; (8001670 <HAL_ADC_MspInit+0x1a0>)
 8001580:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_ADC_MspInit+0x19c>)
 8001584:	2205      	movs	r2, #5
 8001586:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_ADC_MspInit+0x19c>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_ADC_MspInit+0x19c>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_ADC_MspInit+0x19c>)
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_ADC_MspInit+0x19c>)
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015b6:	482d      	ldr	r0, [pc, #180]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015b8:	f002 f87e 	bl	80036b8 <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80015c2:	f7ff ff5b 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_ADC_MspInit+0x19c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015d2:	e042      	b.n	800165a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_ADC_MspInit+0x1a4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d13d      	bne.n	800165a <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015e8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fb4e 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80015fa:	f7ff ff3f 	bl	800147c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_ADC_MspInit+0x194>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_ADC_MspInit+0x194>)
 8001606:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_ADC_MspInit+0x194>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10b      	bne.n	8001628 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_ADC_MspInit+0x198>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_ADC_MspInit+0x198>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_ADC_MspInit+0x198>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_ADC_MspInit+0x198>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001640:	23c0      	movs	r3, #192	; 0xc0
 8001642:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f002 fb99 	bl	8003d8c <HAL_GPIO_Init>
}
 800165a:	bf00      	nop
 800165c:	3770      	adds	r7, #112	; 0x70
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200006cc 	.word	0x200006cc
 8001668:	40021000 	.word	0x40021000
 800166c:	20000154 	.word	0x20000154
 8001670:	4002001c 	.word	0x4002001c
 8001674:	50000100 	.word	0x50000100

08001678 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09a      	sub	sp, #104	; 0x68
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2244      	movs	r2, #68	; 0x44
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fbe9 	bl	8006e70 <memset>
  if(hfdcan->Instance==FDCAN1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_FDCAN_MspInit+0xac>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d139      	bne.n	800171c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80016ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fae9 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80016c4:	f7ff feda 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a16      	ldr	r2, [pc, #88]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_FDCAN_MspInit+0xb0>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800170a:	2309      	movs	r3, #9
 800170c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f002 fb38 	bl	8003d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3768      	adds	r7, #104	; 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40006400 	.word	0x40006400
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a40      	ldr	r2, [pc, #256]	; (800183c <HAL_TIM_Base_MspInit+0x110>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10c      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001756:	e06a      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d10c      	bne.n	800177c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	4a36      	ldr	r2, [pc, #216]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
}
 800177a:	e058      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a30      	ldr	r2, [pc, #192]	; (8001844 <HAL_TIM_Base_MspInit+0x118>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10c      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
}
 800179e:	e046      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <HAL_TIM_Base_MspInit+0x11c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10c      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]
}
 80017c2:	e034      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_TIM_Base_MspInit+0x120>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10c      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
}
 80017e6:	e022      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_TIM_Base_MspInit+0x124>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10c      	bne.n	800180c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
}
 800180a:	e010      	b.n	800182e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM16)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_TIM_Base_MspInit+0x128>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10b      	bne.n	800182e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	6613      	str	r3, [r2, #96]	; 0x60
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x114>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	bf00      	nop
 8001830:	372c      	adds	r7, #44	; 0x2c
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40012c00 	.word	0x40012c00
 8001840:	40021000 	.word	0x40021000
 8001844:	40000400 	.word	0x40000400
 8001848:	40000800 	.word	0x40000800
 800184c:	40001000 	.word	0x40001000
 8001850:	40001400 	.word	0x40001400
 8001854:	40014400 	.word	0x40014400

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09a      	sub	sp, #104	; 0x68
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2244      	movs	r2, #68	; 0x44
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f005 faf9 	bl	8006e70 <memset>
  if(huart->Instance==USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_UART_MspInit+0xa8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d136      	bne.n	80018f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f003 f9fb 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a0:	f7ff fdec 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_UART_MspInit+0xac>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d4:	230c      	movs	r3, #12
 80018d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e4:	2307      	movs	r3, #7
 80018e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f002 fa4b 	bl	8003d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3768      	adds	r7, #104	; 0x68
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 f8d0 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA1_Channel2_IRQHandler+0x10>)
 8001962:	f001 ff51 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000154 	.word	0x20000154

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f005 fa6e 	bl	8006e80 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20008000 	.word	0x20008000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	200006d0 	.word	0x200006d0
 80019d8:	20000820 	.word	0x20000820

080019dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490e      	ldr	r1, [pc, #56]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2a:	f7ff ffd7 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 fa2d 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7fe fdc3 	bl	80005bc <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   r0, =_estack
 8001a38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a44:	0800784c 	.word	0x0800784c
  ldr r2, =_sbss
 8001a48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a4c:	20000820 	.word	0x20000820

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f001 fdeb 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fd08 	bl	8001488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]

}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_InitTick+0x68>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d022      	beq.n	8001ade <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_InitTick+0x68>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fdf6 	bl	800369e <HAL_SYSTICK_Config>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d809      	bhi.n	8001ad2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac6:	f001 fdc2 	bl	800364e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_InitTick+0x70>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e004      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e001      	b.n	8001ae2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	20000004 	.word	0x20000004
 8001af4:	20000008 	.word	0x20000008

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x20>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_IncTick+0x1c>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	200006d4 	.word	0x200006d4
 8001b18:	2000000c 	.word	0x2000000c

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200006d4 	.word	0x200006d4

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d004      	beq.n	8001b58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_Delay+0x40>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b58:	bf00      	nop
 8001b5a:	f7ff ffdf 	bl	8001b1c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d8f7      	bhi.n	8001b5a <HAL_Delay+0x26>
  {
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3360      	adds	r3, #96	; 0x60
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LL_ADC_SetOffset+0x44>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	03fff000 	.word	0x03fff000

08001c28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3360      	adds	r3, #96	; 0x60
 8001c36:	461a      	mov	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3360      	adds	r3, #96	; 0x60
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3360      	adds	r3, #96	; 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3360      	adds	r3, #96	; 0x60
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	615a      	str	r2, [r3, #20]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3330      	adds	r3, #48	; 0x30
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	211f      	movs	r1, #31
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 011f 	and.w	r1, r3, #31
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3314      	adds	r3, #20
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0e5b      	lsrs	r3, r3, #25
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2107      	movs	r1, #7
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	0d1b      	lsrs	r3, r3, #20
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	431a      	orrs	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10a      	bne.n	8001e1a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001e18:	e00a      	b.n	8001e30 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	407f0000 	.word	0x407f0000

08001e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6093      	str	r3, [r2, #8]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb0:	d101      	bne.n	8001eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f50:	f043 0202 	orr.w	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsDisableOngoing+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsDisableOngoing+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fec:	f043 0210 	orr.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d101      	bne.n	8002018 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002036:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d101      	bne.n	8002066 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e177      	b.n	800237e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fa17 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fef1 	bl	8001e9c <LL_ADC_IsDeepPowerDownEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fed7 	bl	8001e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff0c 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fef0 	bl	8001ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e4:	4b9c      	ldr	r3, [pc, #624]	; (8002358 <HAL_ADC_Init+0x2e4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	4a9c      	ldr	r2, [pc, #624]	; (800235c <HAL_ADC_Init+0x2e8>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff feee 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff62 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 800213c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 8110 	bne.w	800236c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 810c 	bne.w	800236c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fefb 	bl	8001f64 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002174:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002178:	f7ff fef4 	bl	8001f64 <LL_ADC_IsEnabled>
 800217c:	4604      	mov	r4, r0
 800217e:	4878      	ldr	r0, [pc, #480]	; (8002360 <HAL_ADC_Init+0x2ec>)
 8002180:	f7ff fef0 	bl	8001f64 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	4323      	orrs	r3, r4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4619      	mov	r1, r3
 8002192:	4874      	ldr	r0, [pc, #464]	; (8002364 <HAL_ADC_Init+0x2f0>)
 8002194:	f7ff fcf0 	bl	8001b78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7f5b      	ldrb	r3, [r3, #29]
 800219c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	045b      	lsls	r3, r3, #17
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_ADC_Init+0x2f4>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff feee 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002224:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff0f 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8002230:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d16d      	bne.n	8002314 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d16a      	bne.n	8002314 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002242:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800227e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6911      	ldr	r1, [r2, #16]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800229e:	e013      	b.n	80022c8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d118      	bne.n	8002304 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e8:	4311      	orrs	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022f4:	430a      	orrs	r2, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	e007      	b.n	8002314 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10c      	bne.n	8002336 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f023 010f 	bic.w	r1, r3, #15
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
 8002334:	e007      	b.n	8002346 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 020f 	bic.w	r2, r2, #15
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c
 8002356:	e011      	b.n	800237c <HAL_ADC_Init+0x308>
 8002358:	20000004 	.word	0x20000004
 800235c:	053e2d63 	.word	0x053e2d63
 8002360:	50000100 	.word	0x50000100
 8002364:	50000300 	.word	0x50000300
 8002368:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	f043 0210 	orr.w	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800237c:	7ffb      	ldrb	r3, [r7, #31]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}
 8002386:	bf00      	nop

08002388 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002392:	4867      	ldr	r0, [pc, #412]	; (8002530 <HAL_ADC_PollForConversion+0x1a8>)
 8002394:	f7ff fd54 	bl	8001e40 <LL_ADC_GetMultimode>
 8002398:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d102      	bne.n	80023a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023a2:	2308      	movs	r3, #8
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e02a      	b.n	80023fe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	d111      	bne.n	80023de <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0a6      	b.n	8002526 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023d8:	2304      	movs	r3, #4
 80023da:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023dc:	e00f      	b.n	80023fe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023de:	4854      	ldr	r0, [pc, #336]	; (8002530 <HAL_ADC_PollForConversion+0x1a8>)
 80023e0:	f7ff fd3c 	bl	8001e5c <LL_ADC_GetMultiDMATransfer>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e095      	b.n	8002526 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023fa:	2304      	movs	r3, #4
 80023fc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023fe:	f7ff fb8d 	bl	8001b1c <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002404:	e021      	b.n	800244a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d01d      	beq.n	800244a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800240e:	f7ff fb85 	bl	8001b1c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <HAL_ADC_PollForConversion+0x9c>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d112      	bne.n	800244a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e06d      	b.n	8002526 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0d6      	beq.n	8002406 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fc57 	bl	8001d1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f5b      	ldrb	r3, [r3, #29]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d111      	bne.n	80024ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_ADC_PollForConversion+0x1ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d002      	beq.n	80024be <HAL_ADC_PollForConversion+0x136>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e001      	b.n	80024c2 <HAL_ADC_PollForConversion+0x13a>
 80024be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d008      	beq.n	80024dc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d002      	beq.n	80024dc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d104      	bne.n	80024e6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e00d      	b.n	8002502 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_ADC_PollForConversion+0x1ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d002      	beq.n	80024f6 <HAL_ADC_PollForConversion+0x16e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e001      	b.n	80024fa <HAL_ADC_PollForConversion+0x172>
 80024f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d104      	bne.n	8002512 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2208      	movs	r2, #8
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e008      	b.n	8002524 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	220c      	movs	r2, #12
 8002522:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	50000300 	.word	0x50000300
 8002534:	50000100 	.word	0x50000100

08002538 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002540:	4893      	ldr	r0, [pc, #588]	; (8002790 <HAL_ADC_Start_IT+0x258>)
 8002542:	f7ff fc7d 	bl	8001e40 <LL_ADC_GetMultimode>
 8002546:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fd57 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8113 	bne.w	8002780 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_ADC_Start_IT+0x30>
 8002564:	2302      	movs	r3, #2
 8002566:	e10e      	b.n	8002786 <HAL_ADC_Start_IT+0x24e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fe05 	bl	8003180 <ADC_Enable>
 8002576:	4603      	mov	r3, r0
 8002578:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 80fa 	bne.w	8002776 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7e      	ldr	r2, [pc, #504]	; (8002794 <HAL_ADC_Start_IT+0x25c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d002      	beq.n	80025a6 <HAL_ADC_Start_IT+0x6e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e001      	b.n	80025aa <HAL_ADC_Start_IT+0x72>
 80025a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d002      	beq.n	80025b8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	f023 0206 	bic.w	r2, r3, #6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	661a      	str	r2, [r3, #96]	; 0x60
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	221c      	movs	r2, #28
 80025ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 021c 	bic.w	r2, r2, #28
 8002602:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d108      	bne.n	800261e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0208 	orr.w	r2, r2, #8
 800261a:	605a      	str	r2, [r3, #4]
          break;
 800261c:	e008      	b.n	8002630 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0204 	orr.w	r2, r2, #4
 800262c:	605a      	str	r2, [r3, #4]
          break;
 800262e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0210 	orr.w	r2, r2, #16
 8002646:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_ADC_Start_IT+0x25c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d002      	beq.n	8002658 <HAL_ADC_Start_IT+0x120>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e001      	b.n	800265c <HAL_ADC_Start_IT+0x124>
 8002658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	4293      	cmp	r3, r2
 8002662:	d008      	beq.n	8002676 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d002      	beq.n	8002676 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b09      	cmp	r3, #9
 8002674:	d13a      	bne.n	80026ec <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02d      	beq.n	80026e0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800268c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d110      	bne.n	80026be <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0220 	bic.w	r2, r2, #32
 80026aa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ba:	605a      	str	r2, [r3, #4]
              break;
 80026bc:	e010      	b.n	80026e0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	605a      	str	r2, [r3, #4]
              break;
 80026de:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fc63 	bl	8001fb0 <LL_ADC_REG_StartConversion>
 80026ea:	e04b      	b.n	8002784 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <HAL_ADC_Start_IT+0x25c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d002      	beq.n	8002708 <HAL_ADC_Start_IT+0x1d0>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	e001      	b.n	800270c <HAL_ADC_Start_IT+0x1d4>
 8002708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800270c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d034      	beq.n	8002784 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d110      	bne.n	8002754 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0220 	bic.w	r2, r2, #32
 8002740:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	605a      	str	r2, [r3, #4]
              break;
 8002752:	e017      	b.n	8002784 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002762:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	605a      	str	r2, [r3, #4]
              break;
 8002774:	e006      	b.n	8002784 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800277e:	e001      	b.n	8002784 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002780:	2302      	movs	r3, #2
 8002782:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002784:	7dfb      	ldrb	r3, [r7, #23]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	50000300 	.word	0x50000300
 8002794:	50000100 	.word	0x50000100

08002798 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Stop_IT+0x16>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e02b      	b.n	8002806 <HAL_ADC_Stop_IT+0x6e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027b6:	2103      	movs	r1, #3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fc25 	bl	8003008 <ADC_ConversionStop>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d119      	bne.n	80027fc <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 021c 	bic.w	r2, r2, #28
 80027d6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fd33 	bl	8003244 <ADC_Disable>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0b6      	sub	sp, #216	; 0xd8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x22>
 8002846:	2302      	movs	r3, #2
 8002848:	e3c8      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x7b4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fbd2 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 83ad 	bne.w	8002fbe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	f7ff fa66 	bl	8001d42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbc0 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002880:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbe0 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 800288e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002892:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 81d9 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800289c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 81d4 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ae:	d10f      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7ff fa6d 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fa14 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>
 80028ce:	e00e      	b.n	80028ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	461a      	mov	r2, r3
 80028de:	f7ff fa5c 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fa04 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d022      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6919      	ldr	r1, [r3, #16]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002920:	f7ff f95e 	bl	8001be0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6919      	ldr	r1, [r3, #16]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	461a      	mov	r2, r3
 8002932:	f7ff f9aa 	bl	8001c8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6919      	ldr	r1, [r3, #16]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7f1b      	ldrb	r3, [r3, #28]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_ADC_ConfigChannel+0x124>
 8002946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294a:	e000      	b.n	800294e <HAL_ADC_ConfigChannel+0x126>
 800294c:	2300      	movs	r3, #0
 800294e:	461a      	mov	r2, r3
 8002950:	f7ff f9b6 	bl	8001cc0 <LL_ADC_SetOffsetSaturation>
 8002954:	e17b      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f963 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x15a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f958 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x198>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f94d 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80029b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1b0>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1e2>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f91c 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f900 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x220>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8f5 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	e01e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x25e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f8ea 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x276>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e018      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2a8>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f8b9 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f89d 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x2e6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f892 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	e01e      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x324>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f887 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e004      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x33c>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	e016      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x36a>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f858 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff f83c 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x3a8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f831 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e017      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x3d8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f826 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x3f0>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	e011      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x414>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f803 	bl	8001c54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f986 	bl	8001f64 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8140 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff f8bf 	bl	8001df0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a8f      	ldr	r2, [pc, #572]	; (8002eb4 <HAL_ADC_ConfigChannel+0x68c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	f040 8131 	bne.w	8002ee0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x47e>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b09      	cmp	r3, #9
 8002c9c:	bf94      	ite	ls
 8002c9e:	2301      	movls	r3, #1
 8002ca0:	2300      	movhi	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e019      	b.n	8002cda <HAL_ADC_ConfigChannel+0x4b2>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e003      	b.n	8002cca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d079      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4d2>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf8:	e015      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x4fe>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x51e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	e017      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x54e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	ea42 0103 	orr.w	r1, r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x574>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	e018      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5a6>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	e081      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x5c6>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	3301      	adds	r3, #1
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dec:	e015      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x5f2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	069b      	lsls	r3, r3, #26
 8002e16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x612>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	e017      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x642>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
  return result;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x66e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 021f 	and.w	r2, r3, #31
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	051b      	lsls	r3, r3, #20
 8002e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e94:	e01e      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x6ac>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	613b      	str	r3, [r7, #16]
  return result;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e006      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x698>
 8002eb2:	bf00      	nop
 8002eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b1e      	subs	r3, #30
 8002ece:	051b      	lsls	r3, r3, #20
 8002ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fe ff5d 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d071      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eec:	483e      	ldr	r0, [pc, #248]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002eee:	f7fe fe69 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 8002ef2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <HAL_ADC_ConfigChannel+0x7c4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x6e2>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d127      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1e:	d157      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f28:	4619      	mov	r1, r3
 8002f2a:	482f      	ldr	r0, [pc, #188]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f2c:	f7fe fe37 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f58:	e03a      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_ADC_ConfigChannel+0x7d4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d113      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x764>
 8002f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02a      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	4619      	mov	r1, r3
 8002f84:	4818      	ldr	r0, [pc, #96]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f86:	f7fe fe0a 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8a:	e021      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d11c      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d011      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fb8:	f7fe fdf1 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
 8002fbc:	e008      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fd8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	37d8      	adds	r7, #216	; 0xd8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	80080000 	.word	0x80080000
 8002fe8:	50000300 	.word	0x50000300
 8002fec:	c3210000 	.word	0xc3210000
 8002ff0:	90c00010 	.word	0x90c00010
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	053e2d63 	.word	0x053e2d63
 8002ffc:	c7520000 	.word	0xc7520000
 8003000:	50000100 	.word	0x50000100
 8003004:	cb840000 	.word	0xcb840000

08003008 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe ffee 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8003024:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f80f 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8003030:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8098 	beq.w	8003170 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02a      	beq.n	80030a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7f5b      	ldrb	r3, [r3, #29]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d126      	bne.n	80030a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7f1b      	ldrb	r3, [r3, #28]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d122      	bne.n	80030a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003062:	e014      	b.n	800308e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4a45      	ldr	r2, [pc, #276]	; (800317c <ADC_ConversionStop+0x174>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d90d      	bls.n	8003088 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e074      	b.n	8003172 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d1e3      	bne.n	8003064 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d014      	beq.n	80030d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe ffa6 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe ff63 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe ff82 	bl	8001fd8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d014      	beq.n	8003104 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe ffb5 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff4b 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff91 	bl	8002026 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d005      	beq.n	8003116 <ADC_ConversionStop+0x10e>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d105      	bne.n	800311c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003110:	230c      	movs	r3, #12
 8003112:	617b      	str	r3, [r7, #20]
        break;
 8003114:	e005      	b.n	8003122 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003116:	2308      	movs	r3, #8
 8003118:	617b      	str	r3, [r7, #20]
        break;
 800311a:	e002      	b.n	8003122 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800311c:	2304      	movs	r3, #4
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003122:	f7fe fcfb 	bl	8001b1c <HAL_GetTick>
 8003126:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003128:	e01b      	b.n	8003162 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800312a:	f7fe fcf7 	bl	8001b1c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b05      	cmp	r3, #5
 8003136:	d914      	bls.n	8003162 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	f043 0210 	orr.w	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1dc      	bne.n	800312a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	a33fffff 	.word	0xa33fffff

08003180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fee9 	bl	8001f64 <LL_ADC_IsEnabled>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d14d      	bne.n	8003234 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	4b28      	ldr	r3, [pc, #160]	; (8003240 <ADC_Enable+0xc0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e039      	b.n	8003236 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fea4 	bl	8001f14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031cc:	f7fe fca6 	bl	8001b1c <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d2:	e028      	b.n	8003226 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fec3 	bl	8001f64 <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fe93 	bl	8001f14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ee:	f7fe fc95 	bl	8001b1c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d914      	bls.n	8003226 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d00d      	beq.n	8003226 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d1cf      	bne.n	80031d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	8000003f 	.word	0x8000003f

08003244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fe9a 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 8003256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fe81 	bl	8001f64 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d047      	beq.n	80032f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d144      	bne.n	80032f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030d 	and.w	r3, r3, #13
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fe5b 	bl	8001f3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7fe fc45 	bl	8001b1c <HAL_GetTick>
 8003292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003294:	e029      	b.n	80032ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e023      	b.n	80032fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b2:	f7fe fc33 	bl	8001b1c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d914      	bls.n	80032ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1dc      	bne.n	80032b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <LL_ADC_IsEnabled>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <LL_ADC_IsEnabled+0x18>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_ADC_IsEnabled+0x1a>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_REG_IsConversionOngoing>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d101      	bne.n	8003340 <LL_ADC_REG_IsConversionOngoing+0x18>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b0a1      	sub	sp, #132	; 0x84
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e08b      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003376:	2300      	movs	r3, #0
 8003378:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800337a:	2300      	movs	r3, #0
 800337c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d102      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003388:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e001      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e06a      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffb8 	bl	8003328 <LL_ADC_REG_IsConversionOngoing>
 80033b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffb2 	bl	8003328 <LL_ADC_REG_IsConversionOngoing>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d14c      	bne.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d149      	bne.n	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80033d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d028      	beq.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ee:	035b      	lsls	r3, r3, #13
 80033f0:	430b      	orrs	r3, r1
 80033f2:	431a      	orrs	r2, r3
 80033f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033fc:	f7ff ff81 	bl	8003302 <LL_ADC_IsEnabled>
 8003400:	4604      	mov	r4, r0
 8003402:	4823      	ldr	r0, [pc, #140]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003404:	f7ff ff7d 	bl	8003302 <LL_ADC_IsEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	4323      	orrs	r3, r4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d133      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003418:	f023 030f 	bic.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	6811      	ldr	r1, [r2, #0]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	6892      	ldr	r2, [r2, #8]
 8003424:	430a      	orrs	r2, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342c:	e024      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800343e:	f7ff ff60 	bl	8003302 <LL_ADC_IsEnabled>
 8003442:	4604      	mov	r4, r0
 8003444:	4812      	ldr	r0, [pc, #72]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003446:	f7ff ff5c 	bl	8003302 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	4323      	orrs	r3, r4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d112      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800345a:	f023 030f 	bic.w	r3, r3, #15
 800345e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003460:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003462:	e009      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003476:	e000      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003478:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003482:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003486:	4618      	mov	r0, r3
 8003488:	3784      	adds	r7, #132	; 0x84
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}
 800348e:	bf00      	nop
 8003490:	50000100 	.word	0x50000100
 8003494:	50000300 	.word	0x50000300

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <__NVIC_EnableIRQ+0x38>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000e100 	.word	0xe000e100

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	; (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	; (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff29 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff40 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff90 	bl	800358c <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5f 	bl	8003538 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff33 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa4 	bl	80035f4 <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e08d      	b.n	80037e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_DMA_Init+0x138>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d80f      	bhi.n	80036f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_DMA_Init+0x13c>)
 80036de:	4413      	add	r3, r2
 80036e0:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <HAL_DMA_Init+0x140>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a42      	ldr	r2, [pc, #264]	; (80037fc <HAL_DMA_Init+0x144>)
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
 80036f4:	e00e      	b.n	8003714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_DMA_Init+0x148>)
 80036fe:	4413      	add	r3, r2
 8003700:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <HAL_DMA_Init+0x140>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_DMA_Init+0x14c>)
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8fe 	bl	8003968 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d102      	bne.n	800377c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003790:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_DMA_Init+0x104>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d80c      	bhi.n	80037bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f91e 	bl	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e008      	b.n	80037ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40020407 	.word	0x40020407
 80037f4:	bffdfff8 	.word	0xbffdfff8
 80037f8:	cccccccd 	.word	0xcccccccd
 80037fc:	40020000 	.word	0x40020000
 8003800:	bffdfbf8 	.word	0xbffdfbf8
 8003804:	40020400 	.word	0x40020400

08003808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2204      	movs	r2, #4
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d026      	beq.n	8003882 <HAL_DMA_IRQHandler+0x7a>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d021      	beq.n	8003882 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2104      	movs	r1, #4
 800386a:	fa01 f202 	lsl.w	r2, r1, r2
 800386e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b00      	cmp	r3, #0
 8003876:	d071      	beq.n	800395c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003880:	e06c      	b.n	800395c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2202      	movs	r2, #2
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d029      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020a 	bic.w	r2, r2, #10
 80038bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2102      	movs	r1, #2
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d038      	beq.n	800395c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038f2:	e033      	b.n	800395c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2208      	movs	r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02a      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d025      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800395c:	bf00      	nop
 800395e:	bf00      	nop
}
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d802      	bhi.n	8003982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e001      	b.n	8003986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003984:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3b08      	subs	r3, #8
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40020407 	.word	0x40020407
 80039d4:	40020800 	.word	0x40020800
 80039d8:	40020820 	.word	0x40020820
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	40020880 	.word	0x40020880

080039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	1000823f 	.word	0x1000823f
 8003a28:	40020940 	.word	0x40020940

08003a2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e147      	b.n	8003cce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fe10 	bl	8001678 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0210 	bic.w	r2, r2, #16
 8003a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a68:	f7fe f858 	bl	8001b1c <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a6e:	e012      	b.n	8003a96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a70:	f7fe f854 	bl	8001b1c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d90b      	bls.n	8003a96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e11b      	b.n	8003cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d0e5      	beq.n	8003a70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab4:	f7fe f832 	bl	8001b1c <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003aba:	e012      	b.n	8003ae2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003abc:	f7fe f82e 	bl	8001b1c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b0a      	cmp	r3, #10
 8003ac8:	d90b      	bls.n	8003ae2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0f5      	b.n	8003cce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0e5      	beq.n	8003abc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0202 	orr.w	r2, r2, #2
 8003afe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a74      	ldr	r2, [pc, #464]	; (8003cd8 <HAL_FDCAN_Init+0x2ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d103      	bne.n	8003b12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b0a:	4a74      	ldr	r2, [pc, #464]	; (8003cdc <HAL_FDCAN_Init+0x2b0>)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7c1b      	ldrb	r3, [r3, #16]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	e007      	b.n	8003b3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7c5b      	ldrb	r3, [r3, #17]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	619a      	str	r2, [r3, #24]
 8003b54:	e007      	b.n	8003b66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7c9b      	ldrb	r3, [r3, #18]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b7c:	619a      	str	r2, [r3, #24]
 8003b7e:	e007      	b.n	8003b90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003bb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0204 	orr.w	r2, r2, #4
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	e02c      	b.n	8003c3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d028      	beq.n	8003c3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d01c      	beq.n	8003c2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bfe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0210 	orr.w	r2, r2, #16
 8003c0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d110      	bne.n	8003c3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0220 	orr.w	r2, r2, #32
 8003c26:	619a      	str	r2, [r3, #24]
 8003c28:	e007      	b.n	8003c3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0220 	orr.w	r2, r2, #32
 8003c38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6e:	d115      	bne.n	8003c9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	3b01      	subs	r3, #1
 8003c86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f814 	bl	8003ce0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40006400 	.word	0x40006400
 8003cdc:	40006500 	.word	0x40006500

08003ce0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003cea:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cfa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	041a      	lsls	r2, r3, #16
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d20:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	061a      	lsls	r2, r3, #24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e005      	b.n	8003d6e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3f3      	bcc.n	8003d62 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	4000a400 	.word	0x4000a400

08003d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d9a:	e15a      	b.n	8004052 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 814c 	beq.w	800404c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d005      	beq.n	8003dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d130      	bne.n	8003e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e02:	2201      	movs	r2, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0201 	and.w	r2, r3, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d017      	beq.n	8003e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d123      	bne.n	8003ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	08da      	lsrs	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3208      	adds	r2, #8
 8003eb8:	6939      	ldr	r1, [r7, #16]
 8003eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a6 	beq.w	800404c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f00:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_GPIO_Init+0x2e4>)
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	4a5a      	ldr	r2, [pc, #360]	; (8004070 <HAL_GPIO_Init+0x2e4>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f0c:	4b58      	ldr	r3, [pc, #352]	; (8004070 <HAL_GPIO_Init+0x2e4>)
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f18:	4a56      	ldr	r2, [pc, #344]	; (8004074 <HAL_GPIO_Init+0x2e8>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f42:	d01f      	beq.n	8003f84 <HAL_GPIO_Init+0x1f8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_GPIO_Init+0x2ec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d019      	beq.n	8003f80 <HAL_GPIO_Init+0x1f4>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4b      	ldr	r2, [pc, #300]	; (800407c <HAL_GPIO_Init+0x2f0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_GPIO_Init+0x1f0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4a      	ldr	r2, [pc, #296]	; (8004080 <HAL_GPIO_Init+0x2f4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00d      	beq.n	8003f78 <HAL_GPIO_Init+0x1ec>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a49      	ldr	r2, [pc, #292]	; (8004084 <HAL_GPIO_Init+0x2f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <HAL_GPIO_Init+0x1e8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a48      	ldr	r2, [pc, #288]	; (8004088 <HAL_GPIO_Init+0x2fc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_GPIO_Init+0x1e4>
 8003f6c:	2305      	movs	r3, #5
 8003f6e:	e00a      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f70:	2306      	movs	r3, #6
 8003f72:	e008      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e006      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e004      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e002      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_GPIO_Init+0x1fa>
 8003f84:	2300      	movs	r3, #0
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	f002 0203 	and.w	r2, r2, #3
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	4093      	lsls	r3, r2
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f96:	4937      	ldr	r1, [pc, #220]	; (8004074 <HAL_GPIO_Init+0x2e8>)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_GPIO_Init+0x300>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fc8:	4a30      	ldr	r2, [pc, #192]	; (800408c <HAL_GPIO_Init+0x300>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fce:	4b2f      	ldr	r3, [pc, #188]	; (800408c <HAL_GPIO_Init+0x300>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <HAL_GPIO_Init+0x300>)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ff8:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_GPIO_Init+0x300>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_GPIO_Init+0x300>)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_GPIO_Init+0x300>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004046:	4a11      	ldr	r2, [pc, #68]	; (800408c <HAL_GPIO_Init+0x300>)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f ae9d 	bne.w	8003d9c <HAL_GPIO_Init+0x10>
  }
}
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40021000 	.word	0x40021000
 8004074:	40010000 	.word	0x40010000
 8004078:	48000400 	.word	0x48000400
 800407c:	48000800 	.word	0x48000800
 8004080:	48000c00 	.word	0x48000c00
 8004084:	48001000 	.word	0x48001000
 8004088:	48001400 	.word	0x48001400
 800408c:	40010400 	.word	0x40010400

08004090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
 800409c:	4613      	mov	r3, r2
 800409e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d141      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ce:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d131      	bne.n	8004140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040dc:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e2:	4a46      	ldr	r2, [pc, #280]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ec:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040f4:	4a41      	ldr	r2, [pc, #260]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2232      	movs	r2, #50	; 0x32
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	4a3f      	ldr	r2, [pc, #252]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	0c9b      	lsrs	r3, r3, #18
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004112:	e002      	b.n	800411a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3b01      	subs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411a:	4b38      	ldr	r3, [pc, #224]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004126:	d102      	bne.n	800412e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f2      	bne.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412e:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d158      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e057      	b.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004146:	4a2d      	ldr	r2, [pc, #180]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004150:	e04d      	b.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d141      	bne.n	80041de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800415a:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004166:	d131      	bne.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	4a23      	ldr	r2, [pc, #140]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2232      	movs	r2, #50	; 0x32
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0c9b      	lsrs	r3, r3, #18
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419e:	e002      	b.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d102      	bne.n	80041ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f2      	bne.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d112      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e011      	b.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041dc:	e007      	b.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e6:	4a05      	ldr	r2, [pc, #20]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40007000 	.word	0x40007000
 8004200:	20000004 	.word	0x20000004
 8004204:	431bde83 	.word	0x431bde83

08004208 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004216:	6093      	str	r3, [r2, #8]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40007000 	.word	0x40007000

08004228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e306      	b.n	8004848 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d075      	beq.n	8004332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004246:	4b97      	ldr	r3, [pc, #604]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004250:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d102      	bne.n	8004266 <HAL_RCC_OscConfig+0x3e>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d002      	beq.n	800426c <HAL_RCC_OscConfig+0x44>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d10b      	bne.n	8004284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d05b      	beq.n	8004330 <HAL_RCC_OscConfig+0x108>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d157      	bne.n	8004330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e2e1      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d106      	bne.n	800429c <HAL_RCC_OscConfig+0x74>
 800428e:	4b85      	ldr	r3, [pc, #532]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a84      	ldr	r2, [pc, #528]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x98>
 80042a6:	4b7f      	ldr	r3, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7e      	ldr	r2, [pc, #504]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b7c      	ldr	r3, [pc, #496]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7b      	ldr	r2, [pc, #492]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0xb0>
 80042c0:	4b78      	ldr	r3, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a74      	ldr	r2, [pc, #464]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fc1c 	bl	8001b1c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fd fc18 	bl	8001b1c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e2a6      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0xc0>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fc08 	bl	8001b1c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fd fc04 	bl	8001b1c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e292      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004322:	4b60      	ldr	r3, [pc, #384]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0xe8>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004348:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d102      	bne.n	800435e <HAL_RCC_OscConfig+0x136>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d002      	beq.n	8004364 <HAL_RCC_OscConfig+0x13c>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11f      	bne.n	80043a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004364:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_OscConfig+0x154>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e265      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	4946      	ldr	r1, [pc, #280]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004390:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <HAL_RCC_OscConfig+0x280>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fd fb75 	bl	8001a84 <HAL_InitTick>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d043      	beq.n	8004428 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e251      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d023      	beq.n	80043f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ac:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3c      	ldr	r2, [pc, #240]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fbb0 	bl	8001b1c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fd fbac 	bl	8001b1c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e23a      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d2:	4b34      	ldr	r3, [pc, #208]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	492d      	ldr	r1, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
 80043f2:	e01a      	b.n	800442a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f4:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fb8c 	bl	8001b1c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fd fb88 	bl	8001b1c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e216      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x1e0>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d041      	beq.n	80044ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01c      	beq.n	8004478 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fb65 	bl	8001b1c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004456:	f7fd fb61 	bl	8001b1c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1ef      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ef      	beq.n	8004456 <HAL_RCC_OscConfig+0x22e>
 8004476:	e020      	b.n	80044ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_OscConfig+0x27c>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fd fb48 	bl	8001b1c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800448e:	e00d      	b.n	80044ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fd fb44 	bl	8001b1c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d906      	bls.n	80044ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1d2      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ac:	4b8c      	ldr	r3, [pc, #560]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ea      	bne.n	8004490 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80a6 	beq.w	8004614 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c8:	2300      	movs	r3, #0
 80044ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_OscConfig+0x2b4>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x2b6>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6593      	str	r3, [r2, #88]	; 0x58
 80044ee:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fe:	4b79      	ldr	r3, [pc, #484]	; (80046e4 <HAL_RCC_OscConfig+0x4bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450a:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCC_OscConfig+0x4bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a75      	ldr	r2, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x4bc>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fd fb01 	bl	8001b1c <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fd fafd 	bl	8001b1c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e18b      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	4b6c      	ldr	r3, [pc, #432]	; (80046e4 <HAL_RCC_OscConfig+0x4bc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d108      	bne.n	8004556 <HAL_RCC_OscConfig+0x32e>
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	4a65      	ldr	r2, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004554:	e024      	b.n	80045a0 <HAL_RCC_OscConfig+0x378>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b05      	cmp	r3, #5
 800455c:	d110      	bne.n	8004580 <HAL_RCC_OscConfig+0x358>
 800455e:	4b60      	ldr	r3, [pc, #384]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	4a5e      	ldr	r2, [pc, #376]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800457e:	e00f      	b.n	80045a0 <HAL_RCC_OscConfig+0x378>
 8004580:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	4a56      	ldr	r2, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fab8 	bl	8001b1c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fd fab4 	bl	8001b1c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e140      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ed      	beq.n	80045b0 <HAL_RCC_OscConfig+0x388>
 80045d4:	e015      	b.n	8004602 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fd faa1 	bl	8001b1c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd fa9d 	bl	8001b1c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e129      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ed      	bne.n	80045de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004602:	7ffb      	ldrb	r3, [r7, #31]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	4a34      	ldr	r2, [pc, #208]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004612:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800462e:	4a2c      	ldr	r2, [pc, #176]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fa70 	bl	8001b1c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004640:	f7fd fa6c 	bl	8001b1c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0fa      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x418>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd fa53 	bl	8001b1c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800467a:	f7fd fa4f 	bl	8001b1c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0dd      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 800468e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80d1 	beq.w	8004846 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	f000 808b 	beq.w	80047c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d15e      	bne.n	8004778 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fa29 	bl	8001b1c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e00c      	b.n	80046e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fd fa25 	bl	8001b1c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d905      	bls.n	80046e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0b3      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ec      	bne.n	80046ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f4:	4b56      	ldr	r3, [pc, #344]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b56      	ldr	r3, [pc, #344]	; (8004854 <HAL_RCC_OscConfig+0x62c>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6a11      	ldr	r1, [r2, #32]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004704:	3a01      	subs	r2, #1
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800470e:	0212      	lsls	r2, r2, #8
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	3a01      	subs	r2, #1
 800471a:	0552      	lsls	r2, r2, #21
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0652      	lsls	r2, r2, #25
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800472e:	06d2      	lsls	r2, r2, #27
 8004730:	430a      	orrs	r2, r1
 8004732:	4947      	ldr	r1, [pc, #284]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a44      	ldr	r2, [pc, #272]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a41      	ldr	r2, [pc, #260]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd f9e4 	bl	8001b1c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd f9e0 	bl	8001b1c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e06e      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x530>
 8004776:	e066      	b.n	8004846 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b35      	ldr	r3, [pc, #212]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a34      	ldr	r2, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a31      	ldr	r2, [pc, #196]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a2e      	ldr	r2, [pc, #184]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 8004796:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800479a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd f9bc 	bl	8001b1c <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd f9b8 	bl	8001b1c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e046      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x580>
 80047c6:	e03e      	b.n	8004846 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e039      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_OscConfig+0x628>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 0203 	and.w	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d12c      	bne.n	8004842 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	3b01      	subs	r3, #1
 80047f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d123      	bne.n	8004842 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d11b      	bne.n	8004842 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d113      	bne.n	8004842 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d109      	bne.n	8004842 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	3b01      	subs	r3, #1
 800483c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	019f800c 	.word	0x019f800c

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e11e      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b91      	ldr	r3, [pc, #580]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d910      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b8e      	ldr	r3, [pc, #568]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	498c      	ldr	r1, [pc, #560]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e106      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d073      	beq.n	8004994 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d129      	bne.n	8004908 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b4:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0f4      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048c4:	f000 f99e 	bl	8004c04 <RCC_GetSysClockFreqFromPLLSource>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4a7c      	ldr	r2, [pc, #496]	; (8004ac0 <HAL_RCC_ClockConfig+0x268>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d93f      	bls.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048d2:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d033      	beq.n	8004952 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d12f      	bne.n	8004952 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048f2:	4b72      	ldr	r3, [pc, #456]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fa:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e024      	b.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d107      	bne.n	8004920 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004910:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0c6      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0be      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004930:	f000 f8ce 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004934:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4a61      	ldr	r2, [pc, #388]	; (8004ac0 <HAL_RCC_ClockConfig+0x268>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d909      	bls.n	8004952 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800493e:	4b5f      	ldr	r3, [pc, #380]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	4a5d      	ldr	r2, [pc, #372]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b5a      	ldr	r3, [pc, #360]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4957      	ldr	r1, [pc, #348]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd f8da 	bl	8001b1c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fd f8d6 	bl	8001b1c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e095      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b4e      	ldr	r3, [pc, #312]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d023      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b43      	ldr	r3, [pc, #268]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a42      	ldr	r2, [pc, #264]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049c4:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049cc:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4936      	ldr	r1, [pc, #216]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	e008      	b.n	80049fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d105      	bne.n	80049fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049ee:	4b33      	ldr	r3, [pc, #204]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4a32      	ldr	r2, [pc, #200]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 80049f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fa:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d21d      	bcs.n	8004a44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 020f 	bic.w	r2, r3, #15
 8004a10:	4929      	ldr	r1, [pc, #164]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a18:	f7fd f880 	bl	8001b1c <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fd f87c 	bl	8001b1c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e03b      	b.n	8004aae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1ed      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4917      	ldr	r1, [pc, #92]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	490f      	ldr	r1, [pc, #60]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a82:	f000 f825 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490c      	ldr	r1, [pc, #48]	; (8004ac4 <HAL_RCC_ClockConfig+0x26c>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_RCC_ClockConfig+0x270>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc ffec 	bl	8001a84 <HAL_InitTick>
 8004aac:	4603      	mov	r3, r0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	04c4b400 	.word	0x04c4b400
 8004ac4:	080077c8 	.word	0x080077c8
 8004ac8:	20000004 	.word	0x20000004
 8004acc:	20000008 	.word	0x20000008

08004ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ad6:	4b2c      	ldr	r3, [pc, #176]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d102      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e047      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e03e      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d136      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d10c      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	0a12      	lsrs	r2, r2, #8
 8004b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
      break;
 8004b3c:	e00c      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b3e:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	0a12      	lsrs	r2, r2, #8
 8004b4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
      break;
 8004b56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0e5b      	lsrs	r3, r3, #25
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e001      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b78:	693b      	ldr	r3, [r7, #16]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	007a1200 	.word	0x007a1200

08004b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000004 	.word	0x20000004

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	080077d8 	.word	0x080077d8

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bdc:	f7ff ffda 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	080077d8 	.word	0x080077d8

08004c04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d10c      	bne.n	8004c42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c28:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c32:	68d2      	ldr	r2, [r2, #12]
 8004c34:	0a12      	lsrs	r2, r2, #8
 8004c36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
    break;
 8004c40:	e00c      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	0a12      	lsrs	r2, r2, #8
 8004c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    break;
 8004c5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0e5b      	lsrs	r3, r3, #25
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c76:	687b      	ldr	r3, [r7, #4]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40021000 	.word	0x40021000
 8004c88:	007a1200 	.word	0x007a1200
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8098 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cca:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cda:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc ff19 	bl	8001b1c <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cec:	e009      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fc ff15 	bl	8001b1c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d902      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	74fb      	strb	r3, [r7, #19]
        break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d159      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d019      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d30:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fc fed5 	bl	8001b1c <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d74:	e00b      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fc fed1 	bl	8001b1c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d902      	bls.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	74bb      	strb	r3, [r7, #18]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dcc:	7c7b      	ldrb	r3, [r7, #17]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4ba6      	ldr	r3, [pc, #664]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	4aa5      	ldr	r2, [pc, #660]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dea:	4ba0      	ldr	r3, [pc, #640]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	499c      	ldr	r1, [pc, #624]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0c:	4b97      	ldr	r3, [pc, #604]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4994      	ldr	r1, [pc, #592]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	498b      	ldr	r1, [pc, #556]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e50:	4b86      	ldr	r3, [pc, #536]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4983      	ldr	r1, [pc, #524]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e72:	4b7e      	ldr	r3, [pc, #504]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	497a      	ldr	r1, [pc, #488]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e94:	4b75      	ldr	r3, [pc, #468]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	4972      	ldr	r1, [pc, #456]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4969      	ldr	r1, [pc, #420]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed8:	4b64      	ldr	r3, [pc, #400]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	4961      	ldr	r1, [pc, #388]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004efa:	4b5c      	ldr	r3, [pc, #368]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	4958      	ldr	r1, [pc, #352]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	4950      	ldr	r1, [pc, #320]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a4a      	ldr	r2, [pc, #296]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f54:	4b45      	ldr	r3, [pc, #276]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	4942      	ldr	r1, [pc, #264]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b3d      	ldr	r3, [pc, #244]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a3c      	ldr	r2, [pc, #240]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f8c:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	4926      	ldr	r1, [pc, #152]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b21      	ldr	r3, [pc, #132]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	4918      	ldr	r1, [pc, #96]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	490a      	ldr	r1, [pc, #40]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005060:	7cbb      	ldrb	r3, [r7, #18]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e049      	b.n	8005116 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fb48 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fb10 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04a      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a21      	ldr	r2, [pc, #132]	; (80051dc <HAL_TIM_Base_Start_IT+0xbc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d013      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d115      	bne.n	80051b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d015      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d011      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	e008      	b.n	80051ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e000      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	00010007 	.word	0x00010007

080051f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e049      	b.n	800529a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f841 	bl	80052a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fa4e 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e0ff      	b.n	80054d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b14      	cmp	r3, #20
 80052e2:	f200 80f0 	bhi.w	80054c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005341 	.word	0x08005341
 80052f0:	080054c7 	.word	0x080054c7
 80052f4:	080054c7 	.word	0x080054c7
 80052f8:	080054c7 	.word	0x080054c7
 80052fc:	08005381 	.word	0x08005381
 8005300:	080054c7 	.word	0x080054c7
 8005304:	080054c7 	.word	0x080054c7
 8005308:	080054c7 	.word	0x080054c7
 800530c:	080053c3 	.word	0x080053c3
 8005310:	080054c7 	.word	0x080054c7
 8005314:	080054c7 	.word	0x080054c7
 8005318:	080054c7 	.word	0x080054c7
 800531c:	08005403 	.word	0x08005403
 8005320:	080054c7 	.word	0x080054c7
 8005324:	080054c7 	.word	0x080054c7
 8005328:	080054c7 	.word	0x080054c7
 800532c:	08005445 	.word	0x08005445
 8005330:	080054c7 	.word	0x080054c7
 8005334:	080054c7 	.word	0x080054c7
 8005338:	080054c7 	.word	0x080054c7
 800533c:	08005485 	.word	0x08005485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fa54 	bl	80057f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0208 	orr.w	r2, r2, #8
 800535a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
      break;
 800537e:	e0a5      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fac4 	bl	8005914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	021a      	lsls	r2, r3, #8
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	619a      	str	r2, [r3, #24]
      break;
 80053c0:	e084      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fb2d 	bl	8005a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0208 	orr.w	r2, r2, #8
 80053dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0204 	bic.w	r2, r2, #4
 80053ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69d9      	ldr	r1, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]
      break;
 8005400:	e064      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fb95 	bl	8005b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800541c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69d9      	ldr	r1, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	021a      	lsls	r2, r3, #8
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	61da      	str	r2, [r3, #28]
      break;
 8005442:	e043      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fbfe 	bl	8005c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005482:	e023      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fc42 	bl	8005d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054c4:	e002      	b.n	80054cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop

080054e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIM_ConfigClockSource+0x1c>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e0de      	b.n	80056ba <HAL_TIM_ConfigClockSource+0x1da>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800551a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800551e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	f000 80a9 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 800553c:	4a61      	ldr	r2, [pc, #388]	; (80056c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f200 80ae 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005544:	4a60      	ldr	r2, [pc, #384]	; (80056c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	f000 80a1 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 800554c:	4a5e      	ldr	r2, [pc, #376]	; (80056c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	f200 80a6 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005554:	4a5d      	ldr	r2, [pc, #372]	; (80056cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005556:	4293      	cmp	r3, r2
 8005558:	f000 8099 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 800555c:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800555e:	4293      	cmp	r3, r2
 8005560:	f200 809e 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005564:	4a5a      	ldr	r2, [pc, #360]	; (80056d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	f000 8091 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 800556c:	4a58      	ldr	r2, [pc, #352]	; (80056d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f200 8096 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005578:	f000 8089 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 800557c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005580:	f200 808e 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d03e      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0x128>
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	f200 8087 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005596:	f000 8086 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d87f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055a0:	2b70      	cmp	r3, #112	; 0x70
 80055a2:	d01a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0xfa>
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d87b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055a8:	2b60      	cmp	r3, #96	; 0x60
 80055aa:	d050      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x16e>
 80055ac:	2b60      	cmp	r3, #96	; 0x60
 80055ae:	d877      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055b0:	2b50      	cmp	r3, #80	; 0x50
 80055b2:	d03c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x14e>
 80055b4:	2b50      	cmp	r3, #80	; 0x50
 80055b6:	d873      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d058      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x18e>
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d86f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d064      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d86b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d060      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d867      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d05a      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x1ae>
 80055d8:	e062      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f000 fc75 	bl	8005ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	609a      	str	r2, [r3, #8]
      break;
 8005606:	e04f      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f000 fc5e 	bl	8005ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562a:	609a      	str	r2, [r3, #8]
      break;
 800562c:	e03c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	461a      	mov	r2, r3
 800563c:	f000 fbd0 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2150      	movs	r1, #80	; 0x50
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fc29 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 800564c:	e02c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	461a      	mov	r2, r3
 800565c:	f000 fbef 	bl	8005e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2160      	movs	r1, #96	; 0x60
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fc19 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 800566c:	e01c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fbb0 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2140      	movs	r1, #64	; 0x40
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fc09 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 800568c:	e00c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f000 fc00 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 800569e:	e003      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e000      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80056a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	00100070 	.word	0x00100070
 80056c8:	00100040 	.word	0x00100040
 80056cc:	00100030 	.word	0x00100030
 80056d0:	00100020 	.word	0x00100020

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <TIM_Base_SetConfig+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a39      	ldr	r2, [pc, #228]	; (80057dc <TIM_Base_SetConfig+0x108>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <TIM_Base_SetConfig+0x10c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <TIM_Base_SetConfig+0x110>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <TIM_Base_SetConfig+0x104>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <TIM_Base_SetConfig+0x108>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <TIM_Base_SetConfig+0x10c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <TIM_Base_SetConfig+0x110>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <TIM_Base_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <TIM_Base_SetConfig+0x118>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <TIM_Base_SetConfig+0x104>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0xe8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <TIM_Base_SetConfig+0x110>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0xe8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <TIM_Base_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0xe8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0f      	ldr	r2, [pc, #60]	; (80057ec <TIM_Base_SetConfig+0x118>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0xe8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f023 0302 	bic.w	r3, r3, #2
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a2c      	ldr	r2, [pc, #176]	; (8005900 <TIM_OC1_SetConfig+0x10c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00f      	beq.n	8005874 <TIM_OC1_SetConfig+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2b      	ldr	r2, [pc, #172]	; (8005904 <TIM_OC1_SetConfig+0x110>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_OC1_SetConfig+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <TIM_OC1_SetConfig+0x114>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_OC1_SetConfig+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a29      	ldr	r2, [pc, #164]	; (800590c <TIM_OC1_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_OC1_SetConfig+0x80>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a28      	ldr	r2, [pc, #160]	; (8005910 <TIM_OC1_SetConfig+0x11c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10c      	bne.n	800588e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0308 	bic.w	r3, r3, #8
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <TIM_OC1_SetConfig+0x10c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00f      	beq.n	80058b6 <TIM_OC1_SetConfig+0xc2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <TIM_OC1_SetConfig+0x110>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00b      	beq.n	80058b6 <TIM_OC1_SetConfig+0xc2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <TIM_OC1_SetConfig+0x114>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <TIM_OC1_SetConfig+0xc2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <TIM_OC1_SetConfig+0x118>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC1_SetConfig+0xc2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a17      	ldr	r2, [pc, #92]	; (8005910 <TIM_OC1_SetConfig+0x11c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d111      	bne.n	80058da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0320 	bic.w	r3, r3, #32
 8005962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <TIM_OC2_SetConfig+0x100>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_OC2_SetConfig+0x6c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <TIM_OC2_SetConfig+0x104>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10d      	bne.n	800599c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <TIM_OC2_SetConfig+0x100>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_OC2_SetConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <TIM_OC2_SetConfig+0x104>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_OC2_SetConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <TIM_OC2_SetConfig+0x108>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_OC2_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <TIM_OC2_SetConfig+0x10c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC2_SetConfig+0xb0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <TIM_OC2_SetConfig+0x110>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d113      	bne.n	80059ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800

08005a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <TIM_OC3_SetConfig+0xfc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC3_SetConfig+0x6a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <TIM_OC3_SetConfig+0x100>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10d      	bne.n	8005aae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <TIM_OC3_SetConfig+0xfc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_OC3_SetConfig+0xae>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <TIM_OC3_SetConfig+0x100>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_OC3_SetConfig+0xae>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <TIM_OC3_SetConfig+0x104>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_OC3_SetConfig+0xae>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <TIM_OC3_SetConfig+0x108>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC3_SetConfig+0xae>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <TIM_OC3_SetConfig+0x10c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d113      	bne.n	8005afe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	621a      	str	r2, [r3, #32]
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40013400 	.word	0x40013400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800

08005b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	031b      	lsls	r3, r3, #12
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <TIM_OC4_SetConfig+0x100>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x6c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <TIM_OC4_SetConfig+0x104>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10d      	bne.n	8005bc0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	031b      	lsls	r3, r3, #12
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <TIM_OC4_SetConfig+0x100>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00f      	beq.n	8005be8 <TIM_OC4_SetConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <TIM_OC4_SetConfig+0x104>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_OC4_SetConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <TIM_OC4_SetConfig+0x108>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_OC4_SetConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <TIM_OC4_SetConfig+0x10c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC4_SetConfig+0xb0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <TIM_OC4_SetConfig+0x110>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bf6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	019b      	lsls	r3, r3, #6
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	019b      	lsls	r3, r3, #6
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800

08005c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC5_SetConfig+0xb4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x7a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC5_SetConfig+0xb8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x7a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <TIM_OC5_SetConfig+0xbc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x7a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <TIM_OC5_SetConfig+0xc0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC5_SetConfig+0x7a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <TIM_OC5_SetConfig+0xc4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d109      	bne.n	8005cda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40014800 	.word	0x40014800

08005d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	051b      	lsls	r3, r3, #20
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <TIM_OC6_SetConfig+0xb8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC6_SetConfig+0x7c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <TIM_OC6_SetConfig+0xbc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC6_SetConfig+0x7c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <TIM_OC6_SetConfig+0xc0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC6_SetConfig+0x7c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <TIM_OC6_SetConfig+0xc4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC6_SetConfig+0x7c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <TIM_OC6_SetConfig+0xc8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f023 0210 	bic.w	r2, r3, #16
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f043 0307 	orr.w	r3, r3, #7
 8005ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e065      	b.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d013      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a12      	ldr	r2, [pc, #72]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10c      	bne.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40014000 	.word	0x40014000

0800601c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006034:	2302      	movs	r3, #2
 8006036:	e087      	b.n	8006148 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d106      	bne.n	80060d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d126      	bne.n	8006136 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	051b      	lsls	r3, r3, #20
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d106      	bne.n	8006136 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400

0800615c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e042      	b.n	80061f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7fb fb69 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8c2 	bl	8006328 <UART_SetConfig>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e022      	b.n	80061f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fb82 	bl	80068c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fc09 	bl	8006a04 <UART_CheckIdleState>
 80061f2:	4603      	mov	r3, r0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 8083 	bne.w	800631e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_UART_Transmit+0x28>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e07b      	b.n	8006320 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UART_Transmit+0x3a>
 8006232:	2302      	movs	r3, #2
 8006234:	e074      	b.n	8006320 <HAL_UART_Transmit+0x124>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2221      	movs	r2, #33	; 0x21
 800624a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800624e:	f7fb fc65 	bl	8001b1c <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d108      	bne.n	8006280 <HAL_UART_Transmit+0x84>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e003      	b.n	8006288 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006290:	e02c      	b.n	80062ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	2180      	movs	r1, #128	; 0x80
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fbfc 	bl	8006a9a <UART_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e039      	b.n	8006320 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3302      	adds	r3, #2
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e007      	b.n	80062da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1cc      	bne.n	8006292 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fbc9 	bl	8006a9a <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e006      	b.n	8006320 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e000      	b.n	8006320 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800631e:	2302      	movs	r3, #2
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800632c:	b08c      	sub	sp, #48	; 0x30
 800632e:	af00      	add	r7, sp, #0
 8006330:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	431a      	orrs	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	431a      	orrs	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	4313      	orrs	r3, r2
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4bab      	ldr	r3, [pc, #684]	; (8006604 <UART_SetConfig+0x2dc>)
 8006358:	4013      	ands	r3, r2
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006360:	430b      	orrs	r3, r1
 8006362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4aa0      	ldr	r2, [pc, #640]	; (8006608 <UART_SetConfig+0x2e0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006390:	4313      	orrs	r3, r2
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800639e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	f023 010f 	bic.w	r1, r3, #15
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a91      	ldr	r2, [pc, #580]	; (800660c <UART_SetConfig+0x2e4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d125      	bne.n	8006418 <UART_SetConfig+0xf0>
 80063cc:	4b90      	ldr	r3, [pc, #576]	; (8006610 <UART_SetConfig+0x2e8>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d81a      	bhi.n	8006410 <UART_SetConfig+0xe8>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0xb8>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006401 	.word	0x08006401
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006409 	.word	0x08006409
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e0d6      	b.n	80065a6 <UART_SetConfig+0x27e>
 80063f8:	2302      	movs	r3, #2
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fe:	e0d2      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006406:	e0ce      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640e:	e0ca      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006416:	e0c6      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a7d      	ldr	r2, [pc, #500]	; (8006614 <UART_SetConfig+0x2ec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d138      	bne.n	8006494 <UART_SetConfig+0x16c>
 8006422:	4b7b      	ldr	r3, [pc, #492]	; (8006610 <UART_SetConfig+0x2e8>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b0c      	cmp	r3, #12
 800642e:	d82d      	bhi.n	800648c <UART_SetConfig+0x164>
 8006430:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x110>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	0800646d 	.word	0x0800646d
 800643c:	0800648d 	.word	0x0800648d
 8006440:	0800648d 	.word	0x0800648d
 8006444:	0800648d 	.word	0x0800648d
 8006448:	0800647d 	.word	0x0800647d
 800644c:	0800648d 	.word	0x0800648d
 8006450:	0800648d 	.word	0x0800648d
 8006454:	0800648d 	.word	0x0800648d
 8006458:	08006475 	.word	0x08006475
 800645c:	0800648d 	.word	0x0800648d
 8006460:	0800648d 	.word	0x0800648d
 8006464:	0800648d 	.word	0x0800648d
 8006468:	08006485 	.word	0x08006485
 800646c:	2300      	movs	r3, #0
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006472:	e098      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006474:	2302      	movs	r3, #2
 8006476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800647a:	e094      	b.n	80065a6 <UART_SetConfig+0x27e>
 800647c:	2304      	movs	r3, #4
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e090      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006484:	2308      	movs	r3, #8
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e08c      	b.n	80065a6 <UART_SetConfig+0x27e>
 800648c:	2310      	movs	r3, #16
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e088      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5f      	ldr	r2, [pc, #380]	; (8006618 <UART_SetConfig+0x2f0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d125      	bne.n	80064ea <UART_SetConfig+0x1c2>
 800649e:	4b5c      	ldr	r3, [pc, #368]	; (8006610 <UART_SetConfig+0x2e8>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064a8:	2b30      	cmp	r3, #48	; 0x30
 80064aa:	d016      	beq.n	80064da <UART_SetConfig+0x1b2>
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d818      	bhi.n	80064e2 <UART_SetConfig+0x1ba>
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d00a      	beq.n	80064ca <UART_SetConfig+0x1a2>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d814      	bhi.n	80064e2 <UART_SetConfig+0x1ba>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <UART_SetConfig+0x19a>
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d008      	beq.n	80064d2 <UART_SetConfig+0x1aa>
 80064c0:	e00f      	b.n	80064e2 <UART_SetConfig+0x1ba>
 80064c2:	2300      	movs	r3, #0
 80064c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c8:	e06d      	b.n	80065a6 <UART_SetConfig+0x27e>
 80064ca:	2302      	movs	r3, #2
 80064cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d0:	e069      	b.n	80065a6 <UART_SetConfig+0x27e>
 80064d2:	2304      	movs	r3, #4
 80064d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d8:	e065      	b.n	80065a6 <UART_SetConfig+0x27e>
 80064da:	2308      	movs	r3, #8
 80064dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e0:	e061      	b.n	80065a6 <UART_SetConfig+0x27e>
 80064e2:	2310      	movs	r3, #16
 80064e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e8:	e05d      	b.n	80065a6 <UART_SetConfig+0x27e>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a4b      	ldr	r2, [pc, #300]	; (800661c <UART_SetConfig+0x2f4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d125      	bne.n	8006540 <UART_SetConfig+0x218>
 80064f4:	4b46      	ldr	r3, [pc, #280]	; (8006610 <UART_SetConfig+0x2e8>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006500:	d016      	beq.n	8006530 <UART_SetConfig+0x208>
 8006502:	2bc0      	cmp	r3, #192	; 0xc0
 8006504:	d818      	bhi.n	8006538 <UART_SetConfig+0x210>
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d00a      	beq.n	8006520 <UART_SetConfig+0x1f8>
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d814      	bhi.n	8006538 <UART_SetConfig+0x210>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <UART_SetConfig+0x1f0>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d008      	beq.n	8006528 <UART_SetConfig+0x200>
 8006516:	e00f      	b.n	8006538 <UART_SetConfig+0x210>
 8006518:	2300      	movs	r3, #0
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e042      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e03e      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e03a      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e036      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e032      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a30      	ldr	r2, [pc, #192]	; (8006608 <UART_SetConfig+0x2e0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d12a      	bne.n	80065a0 <UART_SetConfig+0x278>
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <UART_SetConfig+0x2e8>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006558:	d01a      	beq.n	8006590 <UART_SetConfig+0x268>
 800655a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800655e:	d81b      	bhi.n	8006598 <UART_SetConfig+0x270>
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006564:	d00c      	beq.n	8006580 <UART_SetConfig+0x258>
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656a:	d815      	bhi.n	8006598 <UART_SetConfig+0x270>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <UART_SetConfig+0x250>
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006574:	d008      	beq.n	8006588 <UART_SetConfig+0x260>
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x270>
 8006578:	2300      	movs	r3, #0
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657e:	e012      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006586:	e00e      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e00a      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e006      	b.n	80065a6 <UART_SetConfig+0x27e>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e002      	b.n	80065a6 <UART_SetConfig+0x27e>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <UART_SetConfig+0x2e0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	f040 80a8 	bne.w	8006702 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d834      	bhi.n	8006624 <UART_SetConfig+0x2fc>
 80065ba:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <UART_SetConfig+0x298>)
 80065bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	08006625 	.word	0x08006625
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	08006625 	.word	0x08006625
 80065d0:	080065f3 	.word	0x080065f3
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006625 	.word	0x08006625
 80065e0:	080065fb 	.word	0x080065fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e4:	f7fe fae2 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80065e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ea:	e021      	b.n	8006630 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <UART_SetConfig+0x2f8>)
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065f0:	e01e      	b.n	8006630 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f2:	f7fe fa6d 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 80065f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065f8:	e01a      	b.n	8006630 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006600:	e016      	b.n	8006630 <UART_SetConfig+0x308>
 8006602:	bf00      	nop
 8006604:	cfff69f3 	.word	0xcfff69f3
 8006608:	40008000 	.word	0x40008000
 800660c:	40013800 	.word	0x40013800
 8006610:	40021000 	.word	0x40021000
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800662e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 812a 	beq.w	800688c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	4a9e      	ldr	r2, [pc, #632]	; (80068b8 <UART_SetConfig+0x590>)
 800663e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006642:	461a      	mov	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	fbb3 f3f2 	udiv	r3, r3, r2
 800664a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	429a      	cmp	r2, r3
 800665a:	d305      	bcc.n	8006668 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	429a      	cmp	r2, r3
 8006666:	d903      	bls.n	8006670 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800666e:	e10d      	b.n	800688c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2200      	movs	r2, #0
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	60fa      	str	r2, [r7, #12]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	4a8e      	ldr	r2, [pc, #568]	; (80068b8 <UART_SetConfig+0x590>)
 800667e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006682:	b29b      	uxth	r3, r3
 8006684:	2200      	movs	r2, #0
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006692:	f7f9 fe15 	bl	80002c0 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	020b      	lsls	r3, r1, #8
 80066a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ac:	0202      	lsls	r2, r0, #8
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	6849      	ldr	r1, [r1, #4]
 80066b2:	0849      	lsrs	r1, r1, #1
 80066b4:	2000      	movs	r0, #0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4605      	mov	r5, r0
 80066ba:	eb12 0804 	adds.w	r8, r2, r4
 80066be:	eb43 0905 	adc.w	r9, r3, r5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	469a      	mov	sl, r3
 80066ca:	4693      	mov	fp, r2
 80066cc:	4652      	mov	r2, sl
 80066ce:	465b      	mov	r3, fp
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 fdf4 	bl	80002c0 <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4613      	mov	r3, r2
 80066de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e6:	d308      	bcc.n	80066fa <UART_SetConfig+0x3d2>
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ee:	d204      	bcs.n	80066fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	e0c8      	b.n	800688c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006700:	e0c4      	b.n	800688c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670a:	d167      	bne.n	80067dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800670c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006710:	2b08      	cmp	r3, #8
 8006712:	d828      	bhi.n	8006766 <UART_SetConfig+0x43e>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x3f4>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	08006741 	.word	0x08006741
 8006720:	08006749 	.word	0x08006749
 8006724:	08006751 	.word	0x08006751
 8006728:	08006767 	.word	0x08006767
 800672c:	08006757 	.word	0x08006757
 8006730:	08006767 	.word	0x08006767
 8006734:	08006767 	.word	0x08006767
 8006738:	08006767 	.word	0x08006767
 800673c:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006740:	f7fe fa34 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006746:	e014      	b.n	8006772 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006748:	f7fe fa46 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 800674c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800674e:	e010      	b.n	8006772 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b5a      	ldr	r3, [pc, #360]	; (80068bc <UART_SetConfig+0x594>)
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006754:	e00d      	b.n	8006772 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fe f9bb 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800675c:	e009      	b.n	8006772 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006764:	e005      	b.n	8006772 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8089 	beq.w	800688c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	4a4e      	ldr	r2, [pc, #312]	; (80068b8 <UART_SetConfig+0x590>)
 8006780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006784:	461a      	mov	r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	fbb3 f3f2 	udiv	r3, r3, r2
 800678c:	005a      	lsls	r2, r3, #1
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	441a      	add	r2, r3
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	fbb2 f3f3 	udiv	r3, r2, r3
 800679e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d916      	bls.n	80067d4 <UART_SetConfig+0x4ac>
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d212      	bcs.n	80067d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f023 030f 	bic.w	r3, r3, #15
 80067b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	8bfb      	ldrh	r3, [r7, #30]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	8bfa      	ldrh	r2, [r7, #30]
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	e05b      	b.n	800688c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067da:	e057      	b.n	800688c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d828      	bhi.n	8006836 <UART_SetConfig+0x50e>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x4c4>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006811 	.word	0x08006811
 80067f0:	08006819 	.word	0x08006819
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006837 	.word	0x08006837
 80067fc:	08006827 	.word	0x08006827
 8006800:	08006837 	.word	0x08006837
 8006804:	08006837 	.word	0x08006837
 8006808:	08006837 	.word	0x08006837
 800680c:	0800682f 	.word	0x0800682f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fe f9cc 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006816:	e014      	b.n	8006842 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006818:	f7fe f9de 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800681e:	e010      	b.n	8006842 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006820:	4b26      	ldr	r3, [pc, #152]	; (80068bc <UART_SetConfig+0x594>)
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006824:	e00d      	b.n	8006842 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006826:	f7fe f953 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 800682a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800682c:	e009      	b.n	8006842 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006834:	e005      	b.n	8006842 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006840:	bf00      	nop
    }

    if (pclk != 0U)
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d021      	beq.n	800688c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <UART_SetConfig+0x590>)
 800684e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006852:	461a      	mov	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	fbb3 f2f2 	udiv	r2, r3, r2
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	441a      	add	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	fbb2 f3f3 	udiv	r3, r2, r3
 800686a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d909      	bls.n	8006886 <UART_SetConfig+0x55e>
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006878:	d205      	bcs.n	8006886 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	b29a      	uxth	r2, r3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60da      	str	r2, [r3, #12]
 8006884:	e002      	b.n	800688c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2201      	movs	r2, #1
 8006890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2201      	movs	r2, #1
 8006898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2200      	movs	r2, #0
 80068a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2200      	movs	r2, #0
 80068a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80068a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3730      	adds	r7, #48	; 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b6:	bf00      	nop
 80068b8:	080077e0 	.word	0x080077e0
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069be:	d10a      	bne.n	80069d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a14:	f7fb f882 	bl	8001b1c <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d10e      	bne.n	8006a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f82f 	bl	8006a9a <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e025      	b.n	8006a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d10e      	bne.n	8006a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f819 	bl	8006a9a <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e00f      	b.n	8006a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b09c      	sub	sp, #112	; 0x70
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aaa:	e0a9      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	f000 80a5 	beq.w	8006c00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7fb f831 	bl	8001b1c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <UART_WaitOnFlagUntilTimeout+0x32>
 8006ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d140      	bne.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e6      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	663b      	str	r3, [r7, #96]	; 0x60
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e069      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d051      	beq.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6a:	d149      	bne.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
 8006b96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bc8:	623a      	str	r2, [r7, #32]
 8006bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69f9      	ldr	r1, [r7, #28]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e010      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69da      	ldr	r2, [r3, #28]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f43f af46 	beq.w	8006aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3770      	adds	r7, #112	; 0x70
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e027      	b.n	8006c90 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2224      	movs	r2, #36	; 0x24
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e02d      	b.n	8006d10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f84f 	bl	8006d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e02d      	b.n	8006d8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2224      	movs	r2, #36	; 0x24
 8006d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f811 	bl	8006d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006db4:	e031      	b.n	8006e1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006db6:	2308      	movs	r3, #8
 8006db8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0e5b      	lsrs	r3, r3, #25
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	0f5b      	lsrs	r3, r3, #29
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	7b3a      	ldrb	r2, [r7, #12]
 8006de2:	4911      	ldr	r1, [pc, #68]	; (8006e28 <UARTEx_SetNbDataToProcess+0x94>)
 8006de4:	5c8a      	ldrb	r2, [r1, r2]
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dea:	7b3a      	ldrb	r2, [r7, #12]
 8006dec:	490f      	ldr	r1, [pc, #60]	; (8006e2c <UARTEx_SetNbDataToProcess+0x98>)
 8006dee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	7b7a      	ldrb	r2, [r7, #13]
 8006e00:	4909      	ldr	r1, [pc, #36]	; (8006e28 <UARTEx_SetNbDataToProcess+0x94>)
 8006e02:	5c8a      	ldrb	r2, [r1, r2]
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e08:	7b7a      	ldrb	r2, [r7, #13]
 8006e0a:	4908      	ldr	r1, [pc, #32]	; (8006e2c <UARTEx_SetNbDataToProcess+0x98>)
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	080077f8 	.word	0x080077f8
 8006e2c:	08007800 	.word	0x08007800

08006e30 <siprintf>:
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b500      	push	{lr}
 8006e34:	b09c      	sub	sp, #112	; 0x70
 8006e36:	ab1d      	add	r3, sp, #116	; 0x74
 8006e38:	9002      	str	r0, [sp, #8]
 8006e3a:	9006      	str	r0, [sp, #24]
 8006e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e40:	4809      	ldr	r0, [pc, #36]	; (8006e68 <siprintf+0x38>)
 8006e42:	9107      	str	r1, [sp, #28]
 8006e44:	9104      	str	r1, [sp, #16]
 8006e46:	4909      	ldr	r1, [pc, #36]	; (8006e6c <siprintf+0x3c>)
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	a902      	add	r1, sp, #8
 8006e54:	f000 f992 	bl	800717c <_svfiprintf_r>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	b01c      	add	sp, #112	; 0x70
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b003      	add	sp, #12
 8006e66:	4770      	bx	lr
 8006e68:	2000005c 	.word	0x2000005c
 8006e6c:	ffff0208 	.word	0xffff0208

08006e70 <memset>:
 8006e70:	4402      	add	r2, r0
 8006e72:	4603      	mov	r3, r0
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d100      	bne.n	8006e7a <memset+0xa>
 8006e78:	4770      	bx	lr
 8006e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7e:	e7f9      	b.n	8006e74 <memset+0x4>

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	2000005c 	.word	0x2000005c

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 fc6a 	bl	8007778 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08007844 	.word	0x08007844
 8006ec8:	08007844 	.word	0x08007844
 8006ecc:	08007844 	.word	0x08007844
 8006ed0:	08007848 	.word	0x08007848

08006ed4 <__retarget_lock_acquire_recursive>:
 8006ed4:	4770      	bx	lr

08006ed6 <__retarget_lock_release_recursive>:
 8006ed6:	4770      	bx	lr

08006ed8 <_free_r>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d044      	beq.n	8006f68 <_free_r+0x90>
 8006ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee2:	9001      	str	r0, [sp, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eea:	bfb8      	it	lt
 8006eec:	18e4      	addlt	r4, r4, r3
 8006eee:	f000 f8df 	bl	80070b0 <__malloc_lock>
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <_free_r+0x94>)
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	b933      	cbnz	r3, 8006f08 <_free_r+0x30>
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	6014      	str	r4, [r2, #0]
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f04:	f000 b8da 	b.w	80070bc <__malloc_unlock>
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	d908      	bls.n	8006f1e <_free_r+0x46>
 8006f0c:	6825      	ldr	r5, [r4, #0]
 8006f0e:	1961      	adds	r1, r4, r5
 8006f10:	428b      	cmp	r3, r1
 8006f12:	bf01      	itttt	eq
 8006f14:	6819      	ldreq	r1, [r3, #0]
 8006f16:	685b      	ldreq	r3, [r3, #4]
 8006f18:	1949      	addeq	r1, r1, r5
 8006f1a:	6021      	streq	r1, [r4, #0]
 8006f1c:	e7ed      	b.n	8006efa <_free_r+0x22>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b10b      	cbz	r3, 8006f28 <_free_r+0x50>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d9fa      	bls.n	8006f1e <_free_r+0x46>
 8006f28:	6811      	ldr	r1, [r2, #0]
 8006f2a:	1855      	adds	r5, r2, r1
 8006f2c:	42a5      	cmp	r5, r4
 8006f2e:	d10b      	bne.n	8006f48 <_free_r+0x70>
 8006f30:	6824      	ldr	r4, [r4, #0]
 8006f32:	4421      	add	r1, r4
 8006f34:	1854      	adds	r4, r2, r1
 8006f36:	42a3      	cmp	r3, r4
 8006f38:	6011      	str	r1, [r2, #0]
 8006f3a:	d1e0      	bne.n	8006efe <_free_r+0x26>
 8006f3c:	681c      	ldr	r4, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	6053      	str	r3, [r2, #4]
 8006f42:	440c      	add	r4, r1
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	e7da      	b.n	8006efe <_free_r+0x26>
 8006f48:	d902      	bls.n	8006f50 <_free_r+0x78>
 8006f4a:	230c      	movs	r3, #12
 8006f4c:	6003      	str	r3, [r0, #0]
 8006f4e:	e7d6      	b.n	8006efe <_free_r+0x26>
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	1961      	adds	r1, r4, r5
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf04      	itt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	bf04      	itt	eq
 8006f60:	1949      	addeq	r1, r1, r5
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	6054      	str	r4, [r2, #4]
 8006f66:	e7ca      	b.n	8006efe <_free_r+0x26>
 8006f68:	b003      	add	sp, #12
 8006f6a:	bd30      	pop	{r4, r5, pc}
 8006f6c:	20000818 	.word	0x20000818

08006f70 <sbrk_aligned>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	4e0e      	ldr	r6, [pc, #56]	; (8006fac <sbrk_aligned+0x3c>)
 8006f74:	460c      	mov	r4, r1
 8006f76:	6831      	ldr	r1, [r6, #0]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	b911      	cbnz	r1, 8006f82 <sbrk_aligned+0x12>
 8006f7c:	f000 fba6 	bl	80076cc <_sbrk_r>
 8006f80:	6030      	str	r0, [r6, #0]
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 fba1 	bl	80076cc <_sbrk_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d00a      	beq.n	8006fa4 <sbrk_aligned+0x34>
 8006f8e:	1cc4      	adds	r4, r0, #3
 8006f90:	f024 0403 	bic.w	r4, r4, #3
 8006f94:	42a0      	cmp	r0, r4
 8006f96:	d007      	beq.n	8006fa8 <sbrk_aligned+0x38>
 8006f98:	1a21      	subs	r1, r4, r0
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 fb96 	bl	80076cc <_sbrk_r>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d101      	bne.n	8006fa8 <sbrk_aligned+0x38>
 8006fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	2000081c 	.word	0x2000081c

08006fb0 <_malloc_r>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	f025 0503 	bic.w	r5, r5, #3
 8006fba:	3508      	adds	r5, #8
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	bf38      	it	cc
 8006fc0:	250c      	movcc	r5, #12
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	db01      	blt.n	8006fcc <_malloc_r+0x1c>
 8006fc8:	42a9      	cmp	r1, r5
 8006fca:	d905      	bls.n	8006fd8 <_malloc_r+0x28>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	2600      	movs	r6, #0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070ac <_malloc_r+0xfc>
 8006fdc:	f000 f868 	bl	80070b0 <__malloc_lock>
 8006fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe4:	461c      	mov	r4, r3
 8006fe6:	bb5c      	cbnz	r4, 8007040 <_malloc_r+0x90>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4638      	mov	r0, r7
 8006fec:	f7ff ffc0 	bl	8006f70 <sbrk_aligned>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	d155      	bne.n	80070a2 <_malloc_r+0xf2>
 8006ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8006ffa:	4626      	mov	r6, r4
 8006ffc:	2e00      	cmp	r6, #0
 8006ffe:	d145      	bne.n	800708c <_malloc_r+0xdc>
 8007000:	2c00      	cmp	r4, #0
 8007002:	d048      	beq.n	8007096 <_malloc_r+0xe6>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	4631      	mov	r1, r6
 8007008:	4638      	mov	r0, r7
 800700a:	eb04 0903 	add.w	r9, r4, r3
 800700e:	f000 fb5d 	bl	80076cc <_sbrk_r>
 8007012:	4581      	cmp	r9, r0
 8007014:	d13f      	bne.n	8007096 <_malloc_r+0xe6>
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	1a6d      	subs	r5, r5, r1
 800701a:	4629      	mov	r1, r5
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ffa7 	bl	8006f70 <sbrk_aligned>
 8007022:	3001      	adds	r0, #1
 8007024:	d037      	beq.n	8007096 <_malloc_r+0xe6>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	442b      	add	r3, r5
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	f8d8 3000 	ldr.w	r3, [r8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d038      	beq.n	80070a6 <_malloc_r+0xf6>
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	42a2      	cmp	r2, r4
 8007038:	d12b      	bne.n	8007092 <_malloc_r+0xe2>
 800703a:	2200      	movs	r2, #0
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	e00f      	b.n	8007060 <_malloc_r+0xb0>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	1b52      	subs	r2, r2, r5
 8007044:	d41f      	bmi.n	8007086 <_malloc_r+0xd6>
 8007046:	2a0b      	cmp	r2, #11
 8007048:	d917      	bls.n	800707a <_malloc_r+0xca>
 800704a:	1961      	adds	r1, r4, r5
 800704c:	42a3      	cmp	r3, r4
 800704e:	6025      	str	r5, [r4, #0]
 8007050:	bf18      	it	ne
 8007052:	6059      	strne	r1, [r3, #4]
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	bf08      	it	eq
 8007058:	f8c8 1000 	streq.w	r1, [r8]
 800705c:	5162      	str	r2, [r4, r5]
 800705e:	604b      	str	r3, [r1, #4]
 8007060:	4638      	mov	r0, r7
 8007062:	f104 060b 	add.w	r6, r4, #11
 8007066:	f000 f829 	bl	80070bc <__malloc_unlock>
 800706a:	f026 0607 	bic.w	r6, r6, #7
 800706e:	1d23      	adds	r3, r4, #4
 8007070:	1af2      	subs	r2, r6, r3
 8007072:	d0ae      	beq.n	8006fd2 <_malloc_r+0x22>
 8007074:	1b9b      	subs	r3, r3, r6
 8007076:	50a3      	str	r3, [r4, r2]
 8007078:	e7ab      	b.n	8006fd2 <_malloc_r+0x22>
 800707a:	42a3      	cmp	r3, r4
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	d1dd      	bne.n	800703c <_malloc_r+0x8c>
 8007080:	f8c8 2000 	str.w	r2, [r8]
 8007084:	e7ec      	b.n	8007060 <_malloc_r+0xb0>
 8007086:	4623      	mov	r3, r4
 8007088:	6864      	ldr	r4, [r4, #4]
 800708a:	e7ac      	b.n	8006fe6 <_malloc_r+0x36>
 800708c:	4634      	mov	r4, r6
 800708e:	6876      	ldr	r6, [r6, #4]
 8007090:	e7b4      	b.n	8006ffc <_malloc_r+0x4c>
 8007092:	4613      	mov	r3, r2
 8007094:	e7cc      	b.n	8007030 <_malloc_r+0x80>
 8007096:	230c      	movs	r3, #12
 8007098:	603b      	str	r3, [r7, #0]
 800709a:	4638      	mov	r0, r7
 800709c:	f000 f80e 	bl	80070bc <__malloc_unlock>
 80070a0:	e797      	b.n	8006fd2 <_malloc_r+0x22>
 80070a2:	6025      	str	r5, [r4, #0]
 80070a4:	e7dc      	b.n	8007060 <_malloc_r+0xb0>
 80070a6:	605b      	str	r3, [r3, #4]
 80070a8:	deff      	udf	#255	; 0xff
 80070aa:	bf00      	nop
 80070ac:	20000818 	.word	0x20000818

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_lock+0x8>)
 80070b2:	f7ff bf0f 	b.w	8006ed4 <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	20000814 	.word	0x20000814

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__malloc_unlock+0x8>)
 80070be:	f7ff bf0a 	b.w	8006ed6 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	20000814 	.word	0x20000814

080070c8 <__ssputs_r>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	688e      	ldr	r6, [r1, #8]
 80070ce:	461f      	mov	r7, r3
 80070d0:	42be      	cmp	r6, r7
 80070d2:	680b      	ldr	r3, [r1, #0]
 80070d4:	4682      	mov	sl, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4690      	mov	r8, r2
 80070da:	d82c      	bhi.n	8007136 <__ssputs_r+0x6e>
 80070dc:	898a      	ldrh	r2, [r1, #12]
 80070de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070e2:	d026      	beq.n	8007132 <__ssputs_r+0x6a>
 80070e4:	6965      	ldr	r5, [r4, #20]
 80070e6:	6909      	ldr	r1, [r1, #16]
 80070e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ec:	eba3 0901 	sub.w	r9, r3, r1
 80070f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070f4:	1c7b      	adds	r3, r7, #1
 80070f6:	444b      	add	r3, r9
 80070f8:	106d      	asrs	r5, r5, #1
 80070fa:	429d      	cmp	r5, r3
 80070fc:	bf38      	it	cc
 80070fe:	461d      	movcc	r5, r3
 8007100:	0553      	lsls	r3, r2, #21
 8007102:	d527      	bpl.n	8007154 <__ssputs_r+0x8c>
 8007104:	4629      	mov	r1, r5
 8007106:	f7ff ff53 	bl	8006fb0 <_malloc_r>
 800710a:	4606      	mov	r6, r0
 800710c:	b360      	cbz	r0, 8007168 <__ssputs_r+0xa0>
 800710e:	6921      	ldr	r1, [r4, #16]
 8007110:	464a      	mov	r2, r9
 8007112:	f000 faeb 	bl	80076ec <memcpy>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	6126      	str	r6, [r4, #16]
 8007124:	6165      	str	r5, [r4, #20]
 8007126:	444e      	add	r6, r9
 8007128:	eba5 0509 	sub.w	r5, r5, r9
 800712c:	6026      	str	r6, [r4, #0]
 800712e:	60a5      	str	r5, [r4, #8]
 8007130:	463e      	mov	r6, r7
 8007132:	42be      	cmp	r6, r7
 8007134:	d900      	bls.n	8007138 <__ssputs_r+0x70>
 8007136:	463e      	mov	r6, r7
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	4632      	mov	r2, r6
 800713c:	4641      	mov	r1, r8
 800713e:	f000 faab 	bl	8007698 <memmove>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	1b9b      	subs	r3, r3, r6
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	4433      	add	r3, r6
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	2000      	movs	r0, #0
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	462a      	mov	r2, r5
 8007156:	f000 fad7 	bl	8007708 <_realloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	2800      	cmp	r0, #0
 800715e:	d1e0      	bne.n	8007122 <__ssputs_r+0x5a>
 8007160:	6921      	ldr	r1, [r4, #16]
 8007162:	4650      	mov	r0, sl
 8007164:	f7ff feb8 	bl	8006ed8 <_free_r>
 8007168:	230c      	movs	r3, #12
 800716a:	f8ca 3000 	str.w	r3, [sl]
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	e7e9      	b.n	8007150 <__ssputs_r+0x88>

0800717c <_svfiprintf_r>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4698      	mov	r8, r3
 8007182:	898b      	ldrh	r3, [r1, #12]
 8007184:	061b      	lsls	r3, r3, #24
 8007186:	b09d      	sub	sp, #116	; 0x74
 8007188:	4607      	mov	r7, r0
 800718a:	460d      	mov	r5, r1
 800718c:	4614      	mov	r4, r2
 800718e:	d50e      	bpl.n	80071ae <_svfiprintf_r+0x32>
 8007190:	690b      	ldr	r3, [r1, #16]
 8007192:	b963      	cbnz	r3, 80071ae <_svfiprintf_r+0x32>
 8007194:	2140      	movs	r1, #64	; 0x40
 8007196:	f7ff ff0b 	bl	8006fb0 <_malloc_r>
 800719a:	6028      	str	r0, [r5, #0]
 800719c:	6128      	str	r0, [r5, #16]
 800719e:	b920      	cbnz	r0, 80071aa <_svfiprintf_r+0x2e>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	e0d0      	b.n	800734c <_svfiprintf_r+0x1d0>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	616b      	str	r3, [r5, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	2320      	movs	r3, #32
 80071b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80071bc:	2330      	movs	r3, #48	; 0x30
 80071be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007364 <_svfiprintf_r+0x1e8>
 80071c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c6:	f04f 0901 	mov.w	r9, #1
 80071ca:	4623      	mov	r3, r4
 80071cc:	469a      	mov	sl, r3
 80071ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d2:	b10a      	cbz	r2, 80071d8 <_svfiprintf_r+0x5c>
 80071d4:	2a25      	cmp	r2, #37	; 0x25
 80071d6:	d1f9      	bne.n	80071cc <_svfiprintf_r+0x50>
 80071d8:	ebba 0b04 	subs.w	fp, sl, r4
 80071dc:	d00b      	beq.n	80071f6 <_svfiprintf_r+0x7a>
 80071de:	465b      	mov	r3, fp
 80071e0:	4622      	mov	r2, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	4638      	mov	r0, r7
 80071e6:	f7ff ff6f 	bl	80070c8 <__ssputs_r>
 80071ea:	3001      	adds	r0, #1
 80071ec:	f000 80a9 	beq.w	8007342 <_svfiprintf_r+0x1c6>
 80071f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f2:	445a      	add	r2, fp
 80071f4:	9209      	str	r2, [sp, #36]	; 0x24
 80071f6:	f89a 3000 	ldrb.w	r3, [sl]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80a1 	beq.w	8007342 <_svfiprintf_r+0x1c6>
 8007200:	2300      	movs	r3, #0
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800720a:	f10a 0a01 	add.w	sl, sl, #1
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007216:	931a      	str	r3, [sp, #104]	; 0x68
 8007218:	4654      	mov	r4, sl
 800721a:	2205      	movs	r2, #5
 800721c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007220:	4850      	ldr	r0, [pc, #320]	; (8007364 <_svfiprintf_r+0x1e8>)
 8007222:	f7f8 fffd 	bl	8000220 <memchr>
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	b9d8      	cbnz	r0, 8007262 <_svfiprintf_r+0xe6>
 800722a:	06d0      	lsls	r0, r2, #27
 800722c:	bf44      	itt	mi
 800722e:	2320      	movmi	r3, #32
 8007230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007234:	0711      	lsls	r1, r2, #28
 8007236:	bf44      	itt	mi
 8007238:	232b      	movmi	r3, #43	; 0x2b
 800723a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723e:	f89a 3000 	ldrb.w	r3, [sl]
 8007242:	2b2a      	cmp	r3, #42	; 0x2a
 8007244:	d015      	beq.n	8007272 <_svfiprintf_r+0xf6>
 8007246:	9a07      	ldr	r2, [sp, #28]
 8007248:	4654      	mov	r4, sl
 800724a:	2000      	movs	r0, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	4621      	mov	r1, r4
 8007252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	2b09      	cmp	r3, #9
 800725a:	d94d      	bls.n	80072f8 <_svfiprintf_r+0x17c>
 800725c:	b1b0      	cbz	r0, 800728c <_svfiprintf_r+0x110>
 800725e:	9207      	str	r2, [sp, #28]
 8007260:	e014      	b.n	800728c <_svfiprintf_r+0x110>
 8007262:	eba0 0308 	sub.w	r3, r0, r8
 8007266:	fa09 f303 	lsl.w	r3, r9, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	46a2      	mov	sl, r4
 8007270:	e7d2      	b.n	8007218 <_svfiprintf_r+0x9c>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	1d19      	adds	r1, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	9103      	str	r1, [sp, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfbb      	ittet	lt
 800727e:	425b      	neglt	r3, r3
 8007280:	f042 0202 	orrlt.w	r2, r2, #2
 8007284:	9307      	strge	r3, [sp, #28]
 8007286:	9307      	strlt	r3, [sp, #28]
 8007288:	bfb8      	it	lt
 800728a:	9204      	strlt	r2, [sp, #16]
 800728c:	7823      	ldrb	r3, [r4, #0]
 800728e:	2b2e      	cmp	r3, #46	; 0x2e
 8007290:	d10c      	bne.n	80072ac <_svfiprintf_r+0x130>
 8007292:	7863      	ldrb	r3, [r4, #1]
 8007294:	2b2a      	cmp	r3, #42	; 0x2a
 8007296:	d134      	bne.n	8007302 <_svfiprintf_r+0x186>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	1d1a      	adds	r2, r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	9203      	str	r2, [sp, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfb8      	it	lt
 80072a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072a8:	3402      	adds	r4, #2
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007374 <_svfiprintf_r+0x1f8>
 80072b0:	7821      	ldrb	r1, [r4, #0]
 80072b2:	2203      	movs	r2, #3
 80072b4:	4650      	mov	r0, sl
 80072b6:	f7f8 ffb3 	bl	8000220 <memchr>
 80072ba:	b138      	cbz	r0, 80072cc <_svfiprintf_r+0x150>
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	eba0 000a 	sub.w	r0, r0, sl
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	4082      	lsls	r2, r0
 80072c6:	4313      	orrs	r3, r2
 80072c8:	3401      	adds	r4, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d0:	4825      	ldr	r0, [pc, #148]	; (8007368 <_svfiprintf_r+0x1ec>)
 80072d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d6:	2206      	movs	r2, #6
 80072d8:	f7f8 ffa2 	bl	8000220 <memchr>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d038      	beq.n	8007352 <_svfiprintf_r+0x1d6>
 80072e0:	4b22      	ldr	r3, [pc, #136]	; (800736c <_svfiprintf_r+0x1f0>)
 80072e2:	bb1b      	cbnz	r3, 800732c <_svfiprintf_r+0x1b0>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	3307      	adds	r3, #7
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	3308      	adds	r3, #8
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	4433      	add	r3, r6
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	e768      	b.n	80071ca <_svfiprintf_r+0x4e>
 80072f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072fc:	460c      	mov	r4, r1
 80072fe:	2001      	movs	r0, #1
 8007300:	e7a6      	b.n	8007250 <_svfiprintf_r+0xd4>
 8007302:	2300      	movs	r3, #0
 8007304:	3401      	adds	r4, #1
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0c0a 	mov.w	ip, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007314:	3a30      	subs	r2, #48	; 0x30
 8007316:	2a09      	cmp	r2, #9
 8007318:	d903      	bls.n	8007322 <_svfiprintf_r+0x1a6>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c6      	beq.n	80072ac <_svfiprintf_r+0x130>
 800731e:	9105      	str	r1, [sp, #20]
 8007320:	e7c4      	b.n	80072ac <_svfiprintf_r+0x130>
 8007322:	fb0c 2101 	mla	r1, ip, r1, r2
 8007326:	4604      	mov	r4, r0
 8007328:	2301      	movs	r3, #1
 800732a:	e7f0      	b.n	800730e <_svfiprintf_r+0x192>
 800732c:	ab03      	add	r3, sp, #12
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	462a      	mov	r2, r5
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <_svfiprintf_r+0x1f4>)
 8007334:	a904      	add	r1, sp, #16
 8007336:	4638      	mov	r0, r7
 8007338:	f3af 8000 	nop.w
 800733c:	1c42      	adds	r2, r0, #1
 800733e:	4606      	mov	r6, r0
 8007340:	d1d6      	bne.n	80072f0 <_svfiprintf_r+0x174>
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	065b      	lsls	r3, r3, #25
 8007346:	f53f af2d 	bmi.w	80071a4 <_svfiprintf_r+0x28>
 800734a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800734c:	b01d      	add	sp, #116	; 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	ab03      	add	r3, sp, #12
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	462a      	mov	r2, r5
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <_svfiprintf_r+0x1f4>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	4638      	mov	r0, r7
 800735e:	f000 f879 	bl	8007454 <_printf_i>
 8007362:	e7eb      	b.n	800733c <_svfiprintf_r+0x1c0>
 8007364:	08007808 	.word	0x08007808
 8007368:	08007812 	.word	0x08007812
 800736c:	00000000 	.word	0x00000000
 8007370:	080070c9 	.word	0x080070c9
 8007374:	0800780e 	.word	0x0800780e

08007378 <_printf_common>:
 8007378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	4616      	mov	r6, r2
 800737e:	4699      	mov	r9, r3
 8007380:	688a      	ldr	r2, [r1, #8]
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007388:	4293      	cmp	r3, r2
 800738a:	bfb8      	it	lt
 800738c:	4613      	movlt	r3, r2
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007394:	4607      	mov	r7, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b10a      	cbz	r2, 800739e <_printf_common+0x26>
 800739a:	3301      	adds	r3, #1
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	0699      	lsls	r1, r3, #26
 80073a2:	bf42      	ittt	mi
 80073a4:	6833      	ldrmi	r3, [r6, #0]
 80073a6:	3302      	addmi	r3, #2
 80073a8:	6033      	strmi	r3, [r6, #0]
 80073aa:	6825      	ldr	r5, [r4, #0]
 80073ac:	f015 0506 	ands.w	r5, r5, #6
 80073b0:	d106      	bne.n	80073c0 <_printf_common+0x48>
 80073b2:	f104 0a19 	add.w	sl, r4, #25
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	6832      	ldr	r2, [r6, #0]
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	42ab      	cmp	r3, r5
 80073be:	dc26      	bgt.n	800740e <_printf_common+0x96>
 80073c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c4:	1e13      	subs	r3, r2, #0
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	bf18      	it	ne
 80073ca:	2301      	movne	r3, #1
 80073cc:	0692      	lsls	r2, r2, #26
 80073ce:	d42b      	bmi.n	8007428 <_printf_common+0xb0>
 80073d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d01e      	beq.n	800741c <_printf_common+0xa4>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	f003 0306 	and.w	r3, r3, #6
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	bf02      	ittt	eq
 80073ea:	68e5      	ldreq	r5, [r4, #12]
 80073ec:	6833      	ldreq	r3, [r6, #0]
 80073ee:	1aed      	subeq	r5, r5, r3
 80073f0:	68a3      	ldr	r3, [r4, #8]
 80073f2:	bf0c      	ite	eq
 80073f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f8:	2500      	movne	r5, #0
 80073fa:	4293      	cmp	r3, r2
 80073fc:	bfc4      	itt	gt
 80073fe:	1a9b      	subgt	r3, r3, r2
 8007400:	18ed      	addgt	r5, r5, r3
 8007402:	2600      	movs	r6, #0
 8007404:	341a      	adds	r4, #26
 8007406:	42b5      	cmp	r5, r6
 8007408:	d11a      	bne.n	8007440 <_printf_common+0xc8>
 800740a:	2000      	movs	r0, #0
 800740c:	e008      	b.n	8007420 <_printf_common+0xa8>
 800740e:	2301      	movs	r3, #1
 8007410:	4652      	mov	r2, sl
 8007412:	4649      	mov	r1, r9
 8007414:	4638      	mov	r0, r7
 8007416:	47c0      	blx	r8
 8007418:	3001      	adds	r0, #1
 800741a:	d103      	bne.n	8007424 <_printf_common+0xac>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007424:	3501      	adds	r5, #1
 8007426:	e7c6      	b.n	80073b6 <_printf_common+0x3e>
 8007428:	18e1      	adds	r1, r4, r3
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	2030      	movs	r0, #48	; 0x30
 800742e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007432:	4422      	add	r2, r4
 8007434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800743c:	3302      	adds	r3, #2
 800743e:	e7c7      	b.n	80073d0 <_printf_common+0x58>
 8007440:	2301      	movs	r3, #1
 8007442:	4622      	mov	r2, r4
 8007444:	4649      	mov	r1, r9
 8007446:	4638      	mov	r0, r7
 8007448:	47c0      	blx	r8
 800744a:	3001      	adds	r0, #1
 800744c:	d0e6      	beq.n	800741c <_printf_common+0xa4>
 800744e:	3601      	adds	r6, #1
 8007450:	e7d9      	b.n	8007406 <_printf_common+0x8e>
	...

08007454 <_printf_i>:
 8007454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	7e0f      	ldrb	r7, [r1, #24]
 800745a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800745c:	2f78      	cmp	r7, #120	; 0x78
 800745e:	4691      	mov	r9, r2
 8007460:	4680      	mov	r8, r0
 8007462:	460c      	mov	r4, r1
 8007464:	469a      	mov	sl, r3
 8007466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746a:	d807      	bhi.n	800747c <_printf_i+0x28>
 800746c:	2f62      	cmp	r7, #98	; 0x62
 800746e:	d80a      	bhi.n	8007486 <_printf_i+0x32>
 8007470:	2f00      	cmp	r7, #0
 8007472:	f000 80d4 	beq.w	800761e <_printf_i+0x1ca>
 8007476:	2f58      	cmp	r7, #88	; 0x58
 8007478:	f000 80c0 	beq.w	80075fc <_printf_i+0x1a8>
 800747c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007484:	e03a      	b.n	80074fc <_printf_i+0xa8>
 8007486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748a:	2b15      	cmp	r3, #21
 800748c:	d8f6      	bhi.n	800747c <_printf_i+0x28>
 800748e:	a101      	add	r1, pc, #4	; (adr r1, 8007494 <_printf_i+0x40>)
 8007490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007494:	080074ed 	.word	0x080074ed
 8007498:	08007501 	.word	0x08007501
 800749c:	0800747d 	.word	0x0800747d
 80074a0:	0800747d 	.word	0x0800747d
 80074a4:	0800747d 	.word	0x0800747d
 80074a8:	0800747d 	.word	0x0800747d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800747d 	.word	0x0800747d
 80074b4:	0800747d 	.word	0x0800747d
 80074b8:	0800747d 	.word	0x0800747d
 80074bc:	0800747d 	.word	0x0800747d
 80074c0:	08007605 	.word	0x08007605
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	080075bf 	.word	0x080075bf
 80074cc:	0800747d 	.word	0x0800747d
 80074d0:	0800747d 	.word	0x0800747d
 80074d4:	08007627 	.word	0x08007627
 80074d8:	0800747d 	.word	0x0800747d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800747d 	.word	0x0800747d
 80074e4:	0800747d 	.word	0x0800747d
 80074e8:	080075c7 	.word	0x080075c7
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	602a      	str	r2, [r5, #0]
 80074f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074fc:	2301      	movs	r3, #1
 80074fe:	e09f      	b.n	8007640 <_printf_i+0x1ec>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	0607      	lsls	r7, r0, #24
 8007506:	f103 0104 	add.w	r1, r3, #4
 800750a:	6029      	str	r1, [r5, #0]
 800750c:	d501      	bpl.n	8007512 <_printf_i+0xbe>
 800750e:	681e      	ldr	r6, [r3, #0]
 8007510:	e003      	b.n	800751a <_printf_i+0xc6>
 8007512:	0646      	lsls	r6, r0, #25
 8007514:	d5fb      	bpl.n	800750e <_printf_i+0xba>
 8007516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800751a:	2e00      	cmp	r6, #0
 800751c:	da03      	bge.n	8007526 <_printf_i+0xd2>
 800751e:	232d      	movs	r3, #45	; 0x2d
 8007520:	4276      	negs	r6, r6
 8007522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007526:	485a      	ldr	r0, [pc, #360]	; (8007690 <_printf_i+0x23c>)
 8007528:	230a      	movs	r3, #10
 800752a:	e012      	b.n	8007552 <_printf_i+0xfe>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	1d19      	adds	r1, r3, #4
 8007532:	6029      	str	r1, [r5, #0]
 8007534:	0605      	lsls	r5, r0, #24
 8007536:	d501      	bpl.n	800753c <_printf_i+0xe8>
 8007538:	681e      	ldr	r6, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0xee>
 800753c:	0641      	lsls	r1, r0, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0xe4>
 8007540:	881e      	ldrh	r6, [r3, #0]
 8007542:	4853      	ldr	r0, [pc, #332]	; (8007690 <_printf_i+0x23c>)
 8007544:	2f6f      	cmp	r7, #111	; 0x6f
 8007546:	bf0c      	ite	eq
 8007548:	2308      	moveq	r3, #8
 800754a:	230a      	movne	r3, #10
 800754c:	2100      	movs	r1, #0
 800754e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007552:	6865      	ldr	r5, [r4, #4]
 8007554:	60a5      	str	r5, [r4, #8]
 8007556:	2d00      	cmp	r5, #0
 8007558:	bfa2      	ittt	ge
 800755a:	6821      	ldrge	r1, [r4, #0]
 800755c:	f021 0104 	bicge.w	r1, r1, #4
 8007560:	6021      	strge	r1, [r4, #0]
 8007562:	b90e      	cbnz	r6, 8007568 <_printf_i+0x114>
 8007564:	2d00      	cmp	r5, #0
 8007566:	d04b      	beq.n	8007600 <_printf_i+0x1ac>
 8007568:	4615      	mov	r5, r2
 800756a:	fbb6 f1f3 	udiv	r1, r6, r3
 800756e:	fb03 6711 	mls	r7, r3, r1, r6
 8007572:	5dc7      	ldrb	r7, [r0, r7]
 8007574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007578:	4637      	mov	r7, r6
 800757a:	42bb      	cmp	r3, r7
 800757c:	460e      	mov	r6, r1
 800757e:	d9f4      	bls.n	800756a <_printf_i+0x116>
 8007580:	2b08      	cmp	r3, #8
 8007582:	d10b      	bne.n	800759c <_printf_i+0x148>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	07de      	lsls	r6, r3, #31
 8007588:	d508      	bpl.n	800759c <_printf_i+0x148>
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4299      	cmp	r1, r3
 8007590:	bfde      	ittt	le
 8007592:	2330      	movle	r3, #48	; 0x30
 8007594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800759c:	1b52      	subs	r2, r2, r5
 800759e:	6122      	str	r2, [r4, #16]
 80075a0:	f8cd a000 	str.w	sl, [sp]
 80075a4:	464b      	mov	r3, r9
 80075a6:	aa03      	add	r2, sp, #12
 80075a8:	4621      	mov	r1, r4
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7ff fee4 	bl	8007378 <_printf_common>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d14a      	bne.n	800764a <_printf_i+0x1f6>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	b004      	add	sp, #16
 80075ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	4833      	ldr	r0, [pc, #204]	; (8007694 <_printf_i+0x240>)
 80075c8:	2778      	movs	r7, #120	; 0x78
 80075ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	6829      	ldr	r1, [r5, #0]
 80075d2:	061f      	lsls	r7, r3, #24
 80075d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075d8:	d402      	bmi.n	80075e0 <_printf_i+0x18c>
 80075da:	065f      	lsls	r7, r3, #25
 80075dc:	bf48      	it	mi
 80075de:	b2b6      	uxthmi	r6, r6
 80075e0:	07df      	lsls	r7, r3, #31
 80075e2:	bf48      	it	mi
 80075e4:	f043 0320 	orrmi.w	r3, r3, #32
 80075e8:	6029      	str	r1, [r5, #0]
 80075ea:	bf48      	it	mi
 80075ec:	6023      	strmi	r3, [r4, #0]
 80075ee:	b91e      	cbnz	r6, 80075f8 <_printf_i+0x1a4>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	f023 0320 	bic.w	r3, r3, #32
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	2310      	movs	r3, #16
 80075fa:	e7a7      	b.n	800754c <_printf_i+0xf8>
 80075fc:	4824      	ldr	r0, [pc, #144]	; (8007690 <_printf_i+0x23c>)
 80075fe:	e7e4      	b.n	80075ca <_printf_i+0x176>
 8007600:	4615      	mov	r5, r2
 8007602:	e7bd      	b.n	8007580 <_printf_i+0x12c>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	6826      	ldr	r6, [r4, #0]
 8007608:	6961      	ldr	r1, [r4, #20]
 800760a:	1d18      	adds	r0, r3, #4
 800760c:	6028      	str	r0, [r5, #0]
 800760e:	0635      	lsls	r5, r6, #24
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	d501      	bpl.n	8007618 <_printf_i+0x1c4>
 8007614:	6019      	str	r1, [r3, #0]
 8007616:	e002      	b.n	800761e <_printf_i+0x1ca>
 8007618:	0670      	lsls	r0, r6, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0x1c0>
 800761c:	8019      	strh	r1, [r3, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	4615      	mov	r5, r2
 8007624:	e7bc      	b.n	80075a0 <_printf_i+0x14c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	681d      	ldr	r5, [r3, #0]
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	2100      	movs	r1, #0
 8007632:	4628      	mov	r0, r5
 8007634:	f7f8 fdf4 	bl	8000220 <memchr>
 8007638:	b108      	cbz	r0, 800763e <_printf_i+0x1ea>
 800763a:	1b40      	subs	r0, r0, r5
 800763c:	6060      	str	r0, [r4, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	2300      	movs	r3, #0
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007648:	e7aa      	b.n	80075a0 <_printf_i+0x14c>
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	462a      	mov	r2, r5
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d0ad      	beq.n	80075b4 <_printf_i+0x160>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	d413      	bmi.n	8007686 <_printf_i+0x232>
 800765e:	68e0      	ldr	r0, [r4, #12]
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	4298      	cmp	r0, r3
 8007664:	bfb8      	it	lt
 8007666:	4618      	movlt	r0, r3
 8007668:	e7a6      	b.n	80075b8 <_printf_i+0x164>
 800766a:	2301      	movs	r3, #1
 800766c:	4632      	mov	r2, r6
 800766e:	4649      	mov	r1, r9
 8007670:	4640      	mov	r0, r8
 8007672:	47d0      	blx	sl
 8007674:	3001      	adds	r0, #1
 8007676:	d09d      	beq.n	80075b4 <_printf_i+0x160>
 8007678:	3501      	adds	r5, #1
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	9903      	ldr	r1, [sp, #12]
 800767e:	1a5b      	subs	r3, r3, r1
 8007680:	42ab      	cmp	r3, r5
 8007682:	dcf2      	bgt.n	800766a <_printf_i+0x216>
 8007684:	e7eb      	b.n	800765e <_printf_i+0x20a>
 8007686:	2500      	movs	r5, #0
 8007688:	f104 0619 	add.w	r6, r4, #25
 800768c:	e7f5      	b.n	800767a <_printf_i+0x226>
 800768e:	bf00      	nop
 8007690:	08007819 	.word	0x08007819
 8007694:	0800782a 	.word	0x0800782a

08007698 <memmove>:
 8007698:	4288      	cmp	r0, r1
 800769a:	b510      	push	{r4, lr}
 800769c:	eb01 0402 	add.w	r4, r1, r2
 80076a0:	d902      	bls.n	80076a8 <memmove+0x10>
 80076a2:	4284      	cmp	r4, r0
 80076a4:	4623      	mov	r3, r4
 80076a6:	d807      	bhi.n	80076b8 <memmove+0x20>
 80076a8:	1e43      	subs	r3, r0, #1
 80076aa:	42a1      	cmp	r1, r4
 80076ac:	d008      	beq.n	80076c0 <memmove+0x28>
 80076ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076b6:	e7f8      	b.n	80076aa <memmove+0x12>
 80076b8:	4402      	add	r2, r0
 80076ba:	4601      	mov	r1, r0
 80076bc:	428a      	cmp	r2, r1
 80076be:	d100      	bne.n	80076c2 <memmove+0x2a>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ca:	e7f7      	b.n	80076bc <memmove+0x24>

080076cc <_sbrk_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d06      	ldr	r5, [pc, #24]	; (80076e8 <_sbrk_r+0x1c>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	f7fa f94a 	bl	8001970 <_sbrk>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_sbrk_r+0x1a>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_sbrk_r+0x1a>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	20000810 	.word	0x20000810

080076ec <memcpy>:
 80076ec:	440a      	add	r2, r1
 80076ee:	4291      	cmp	r1, r2
 80076f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f4:	d100      	bne.n	80076f8 <memcpy+0xc>
 80076f6:	4770      	bx	lr
 80076f8:	b510      	push	{r4, lr}
 80076fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007702:	4291      	cmp	r1, r2
 8007704:	d1f9      	bne.n	80076fa <memcpy+0xe>
 8007706:	bd10      	pop	{r4, pc}

08007708 <_realloc_r>:
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4680      	mov	r8, r0
 800770e:	4614      	mov	r4, r2
 8007710:	460e      	mov	r6, r1
 8007712:	b921      	cbnz	r1, 800771e <_realloc_r+0x16>
 8007714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4611      	mov	r1, r2
 800771a:	f7ff bc49 	b.w	8006fb0 <_malloc_r>
 800771e:	b92a      	cbnz	r2, 800772c <_realloc_r+0x24>
 8007720:	f7ff fbda 	bl	8006ed8 <_free_r>
 8007724:	4625      	mov	r5, r4
 8007726:	4628      	mov	r0, r5
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	f000 f81b 	bl	8007766 <_malloc_usable_size_r>
 8007730:	4284      	cmp	r4, r0
 8007732:	4607      	mov	r7, r0
 8007734:	d802      	bhi.n	800773c <_realloc_r+0x34>
 8007736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800773a:	d812      	bhi.n	8007762 <_realloc_r+0x5a>
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fc36 	bl	8006fb0 <_malloc_r>
 8007744:	4605      	mov	r5, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	d0ed      	beq.n	8007726 <_realloc_r+0x1e>
 800774a:	42bc      	cmp	r4, r7
 800774c:	4622      	mov	r2, r4
 800774e:	4631      	mov	r1, r6
 8007750:	bf28      	it	cs
 8007752:	463a      	movcs	r2, r7
 8007754:	f7ff ffca 	bl	80076ec <memcpy>
 8007758:	4631      	mov	r1, r6
 800775a:	4640      	mov	r0, r8
 800775c:	f7ff fbbc 	bl	8006ed8 <_free_r>
 8007760:	e7e1      	b.n	8007726 <_realloc_r+0x1e>
 8007762:	4635      	mov	r5, r6
 8007764:	e7df      	b.n	8007726 <_realloc_r+0x1e>

08007766 <_malloc_usable_size_r>:
 8007766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776a:	1f18      	subs	r0, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	bfbc      	itt	lt
 8007770:	580b      	ldrlt	r3, [r1, r0]
 8007772:	18c0      	addlt	r0, r0, r3
 8007774:	4770      	bx	lr
	...

08007778 <_init>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr

08007784 <_fini>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr
