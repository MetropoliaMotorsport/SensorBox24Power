
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007170  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007368  08007368  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007368  08007368  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800736c  0800736c  0000836c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007370  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  2000000c  0800737c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800737c  000098c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c4c  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  0001ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  000217d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6f  00000000  00000000  00022be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020770  00000000  00000000  00023b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015146  00000000  00000000  000442bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da563  00000000  00000000  00059405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005618  00000000  00000000  001339ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00138fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007330 	.word	0x08007330

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007330 	.word	0x08007330

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim, uint16_t value){
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
	  TIM_OC_InitTypeDef sConfigOC;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000224:	2360      	movs	r3, #96	@ 0x60
 8000226:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = value;
 8000228:	887b      	ldrh	r3, [r7, #2]
 800022a:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f006 f863 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f005 fe0f 	bl	8005e68 <HAL_TIM_PWM_Start>
}
 800024a:	bf00      	nop
 800024c:	3728      	adds	r7, #40	@ 0x28
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <set_pwm_freq>:

void set_pwm_freq(TIM_HandleTypeDef *htim, uint16_t value){
 8000252:	b480      	push	{r7}
 8000254:	b083      	sub	sp, #12
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	460b      	mov	r3, r1
 800025c:	807b      	strh	r3, [r7, #2]

}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 800026e:	f000 f803 	bl	8000278 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <Config_1>:

void Config_1(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

	CAN_ID = 3;
 800027c:	4b60      	ldr	r3, [pc, #384]	@ (8000400 <Config_1+0x188>)
 800027e:	2203      	movs	r2, #3
 8000280:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 8000282:	4b60      	ldr	r3, [pc, #384]	@ (8000404 <Config_1+0x18c>)
 8000284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000288:	801a      	strh	r2, [r3, #0]

	//OUTPUT 1 in mA
	WC[0] = 1900;
 800028a:	4b5f      	ldr	r3, [pc, #380]	@ (8000408 <Config_1+0x190>)
 800028c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000290:	801a      	strh	r2, [r3, #0]
	OC[0] = 2050;
 8000292:	4b5e      	ldr	r3, [pc, #376]	@ (800040c <Config_1+0x194>)
 8000294:	f640 0202 	movw	r2, #2050	@ 0x802
 8000298:	801a      	strh	r2, [r3, #0]
	UC[0] = 1800;
 800029a:	4b5d      	ldr	r3, [pc, #372]	@ (8000410 <Config_1+0x198>)
 800029c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002a0:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC[1] = 1900;
 80002a2:	4b59      	ldr	r3, [pc, #356]	@ (8000408 <Config_1+0x190>)
 80002a4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002a8:	805a      	strh	r2, [r3, #2]
	OC[1] = 2050;
 80002aa:	4b58      	ldr	r3, [pc, #352]	@ (800040c <Config_1+0x194>)
 80002ac:	f640 0202 	movw	r2, #2050	@ 0x802
 80002b0:	805a      	strh	r2, [r3, #2]
	UC[1] = 1800;
 80002b2:	4b57      	ldr	r3, [pc, #348]	@ (8000410 <Config_1+0x198>)
 80002b4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002b8:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	WC[2] = 1900;
 80002ba:	4b53      	ldr	r3, [pc, #332]	@ (8000408 <Config_1+0x190>)
 80002bc:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002c0:	809a      	strh	r2, [r3, #4]
	OC[2] = 2050;
 80002c2:	4b52      	ldr	r3, [pc, #328]	@ (800040c <Config_1+0x194>)
 80002c4:	f640 0202 	movw	r2, #2050	@ 0x802
 80002c8:	809a      	strh	r2, [r3, #4]
	UC[2] = 1800;
 80002ca:	4b51      	ldr	r3, [pc, #324]	@ (8000410 <Config_1+0x198>)
 80002cc:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002d0:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	WC[3] = 1900;
 80002d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000408 <Config_1+0x190>)
 80002d4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002d8:	80da      	strh	r2, [r3, #6]
	OC[3] = 2050;
 80002da:	4b4c      	ldr	r3, [pc, #304]	@ (800040c <Config_1+0x194>)
 80002dc:	f640 0202 	movw	r2, #2050	@ 0x802
 80002e0:	80da      	strh	r2, [r3, #6]
	UC[3] = 1800;
 80002e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000410 <Config_1+0x198>)
 80002e4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80002e8:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	WC[4] = 1900;
 80002ea:	4b47      	ldr	r3, [pc, #284]	@ (8000408 <Config_1+0x190>)
 80002ec:	f240 726c 	movw	r2, #1900	@ 0x76c
 80002f0:	811a      	strh	r2, [r3, #8]
	OC[4] = 2050;
 80002f2:	4b46      	ldr	r3, [pc, #280]	@ (800040c <Config_1+0x194>)
 80002f4:	f640 0202 	movw	r2, #2050	@ 0x802
 80002f8:	811a      	strh	r2, [r3, #8]
	UC[4] = 1800;
 80002fa:	4b45      	ldr	r3, [pc, #276]	@ (8000410 <Config_1+0x198>)
 80002fc:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000300:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	WC[5] = 1900;
 8000302:	4b41      	ldr	r3, [pc, #260]	@ (8000408 <Config_1+0x190>)
 8000304:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000308:	815a      	strh	r2, [r3, #10]
	OC[5] = 2050;
 800030a:	4b40      	ldr	r3, [pc, #256]	@ (800040c <Config_1+0x194>)
 800030c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000310:	815a      	strh	r2, [r3, #10]
	UC[5] = 1800;
 8000312:	4b3f      	ldr	r3, [pc, #252]	@ (8000410 <Config_1+0x198>)
 8000314:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000318:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	WC[6] = 1900;
 800031a:	4b3b      	ldr	r3, [pc, #236]	@ (8000408 <Config_1+0x190>)
 800031c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000320:	819a      	strh	r2, [r3, #12]
	OC[6] = 2050;
 8000322:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <Config_1+0x194>)
 8000324:	f640 0202 	movw	r2, #2050	@ 0x802
 8000328:	819a      	strh	r2, [r3, #12]
	UC[6] = 1800;
 800032a:	4b39      	ldr	r3, [pc, #228]	@ (8000410 <Config_1+0x198>)
 800032c:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000330:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	WC[7] = 1900;
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <Config_1+0x190>)
 8000334:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000338:	81da      	strh	r2, [r3, #14]
	OC[7] = 2050;
 800033a:	4b34      	ldr	r3, [pc, #208]	@ (800040c <Config_1+0x194>)
 800033c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000340:	81da      	strh	r2, [r3, #14]
	UC[7] = 1800;
 8000342:	4b33      	ldr	r3, [pc, #204]	@ (8000410 <Config_1+0x198>)
 8000344:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000348:	81da      	strh	r2, [r3, #14]

	Default_Switch_State = 0b00011011; //each bit represent one output [8,7,6,5,4,3,2,1]
 800034a:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <Config_1+0x19c>)
 800034c:	221b      	movs	r2, #27
 800034e:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <Config_1+0x1a0>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 8000356:	4b31      	ldr	r3, [pc, #196]	@ (800041c <Config_1+0x1a4>)
 8000358:	2200      	movs	r2, #0
 800035a:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 800035c:	4b2f      	ldr	r3, [pc, #188]	@ (800041c <Config_1+0x1a4>)
 800035e:	2200      	movs	r2, #0
 8000360:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 8000362:	4b2d      	ldr	r3, [pc, #180]	@ (8000418 <Config_1+0x1a0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	089b      	lsrs	r3, r3, #2
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d00c      	beq.n	8000388 <Config_1+0x110>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <Config_1+0x1a4>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	2364      	movs	r3, #100	@ 0x64
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	4a29      	ldr	r2, [pc, #164]	@ (8000420 <Config_1+0x1a8>)
 800037c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000380:	b29a      	uxth	r2, r3
 8000382:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <Config_1+0x1ac>)
 8000384:	801a      	strh	r2, [r3, #0]
 8000386:	e002      	b.n	800038e <Config_1+0x116>
	}else{
		PWM_speed[0] = 0;
 8000388:	4b26      	ldr	r3, [pc, #152]	@ (8000424 <Config_1+0x1ac>)
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 800038e:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <Config_1+0x1a0>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	085b      	lsrs	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d00c      	beq.n	80003b4 <Config_1+0x13c>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 800039a:	4b20      	ldr	r3, [pc, #128]	@ (800041c <Config_1+0x1a4>)
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	461a      	mov	r2, r3
 80003a0:	2364      	movs	r3, #100	@ 0x64
 80003a2:	fb02 f303 	mul.w	r3, r2, r3
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <Config_1+0x1a8>)
 80003a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <Config_1+0x1ac>)
 80003b0:	805a      	strh	r2, [r3, #2]
 80003b2:	e002      	b.n	80003ba <Config_1+0x142>
	}else{
		PWM_speed[1] = 0;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <Config_1+0x1ac>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <Config_1+0x1b0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <Config_1+0x1b0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	805a      	strh	r2, [r3, #2]

	set_pwm_duty_cycle(&htim1,PWM_width[0]);
 80003c6:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <Config_1+0x1b0>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4817      	ldr	r0, [pc, #92]	@ (800042c <Config_1+0x1b4>)
 80003ce:	f7ff ff23 	bl	8000218 <set_pwm_duty_cycle>
	set_pwm_duty_cycle(&htim2,PWM_width[1]);
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <Config_1+0x1b0>)
 80003d4:	885b      	ldrh	r3, [r3, #2]
 80003d6:	4619      	mov	r1, r3
 80003d8:	4815      	ldr	r0, [pc, #84]	@ (8000430 <Config_1+0x1b8>)
 80003da:	f7ff ff1d 	bl	8000218 <set_pwm_duty_cycle>

	set_pwm_freq(&htim1,PWM_speed[0]);
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <Config_1+0x1ac>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	4619      	mov	r1, r3
 80003e4:	4811      	ldr	r0, [pc, #68]	@ (800042c <Config_1+0x1b4>)
 80003e6:	f7ff ff34 	bl	8000252 <set_pwm_freq>
	set_pwm_freq(&htim2,PWM_speed[1]);
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <Config_1+0x1ac>)
 80003ec:	885b      	ldrh	r3, [r3, #2]
 80003ee:	4619      	mov	r1, r3
 80003f0:	480f      	ldr	r0, [pc, #60]	@ (8000430 <Config_1+0x1b8>)
 80003f2:	f7ff ff2e 	bl	8000252 <set_pwm_freq>

	output();
 80003f6:	f000 f8b1 	bl	800055c <output>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000086c 	.word	0x2000086c
 8000404:	2000086e 	.word	0x2000086e
 8000408:	20000828 	.word	0x20000828
 800040c:	20000838 	.word	0x20000838
 8000410:	20000848 	.word	0x20000848
 8000414:	2000085e 	.word	0x2000085e
 8000418:	2000085f 	.word	0x2000085f
 800041c:	20000860 	.word	0x20000860
 8000420:	08f0d180 	.word	0x08f0d180
 8000424:	20000868 	.word	0x20000868
 8000428:	20000864 	.word	0x20000864
 800042c:	20000174 	.word	0x20000174
 8000430:	200001c0 	.word	0x200001c0

08000434 <HAL_FDCAN_RxFifo0Callback>:
uint8_t RxData[8];
uint8_t TxData[8];


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	d017      	beq.n	8000478 <HAL_FDCAN_RxFifo0Callback+0x44>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800044a:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800044c:	2140      	movs	r1, #64	@ 0x40
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f003 fe52 	bl	80040f8 <HAL_FDCAN_GetRxMessage>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800045a:	f001 fa79 	bl	8001950 <Error_Handler>
 800045e:	e001      	b.n	8000464 <HAL_FDCAN_RxFifo0Callback+0x30>
		}else{
			decode();
 8000460:	f000 f936 	bl	80006d0 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f003 ff5f 	bl	800432c <HAL_FDCAN_ActivateNotification>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <HAL_FDCAN_RxFifo0Callback+0x44>
		{
			/* Notification Error */
			Error_Handler();
 8000474:	f001 fa6c 	bl	8001950 <Error_Handler>
		}
	}
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000028 	.word	0x20000028
 8000484:	20000894 	.word	0x20000894

08000488 <CanSend>:

void CanSend(uint8_t *TxData){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000490:	e001      	b.n	8000496 <CanSend+0xe>
		Error_Handler();
 8000492:	f001 fa5d 	bl	8001950 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000496:	4809      	ldr	r0, [pc, #36]	@ (80004bc <CanSend+0x34>)
 8000498:	f003 ff36 	bl	8004308 <HAL_FDCAN_GetTxFifoFreeLevel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <CanSend+0x2a>
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	4906      	ldr	r1, [pc, #24]	@ (80004c0 <CanSend+0x38>)
 80004a6:	4805      	ldr	r0, [pc, #20]	@ (80004bc <CanSend+0x34>)
 80004a8:	f003 fde2 	bl	8004070 <HAL_FDCAN_AddMessageToTxFifoQ>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1ef      	bne.n	8000492 <CanSend+0xa>
	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000110 	.word	0x20000110
 80004c0:	20000870 	.word	0x20000870

080004c4 <CAN_switch_state>:

void CAN_switch_state(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
	uint8_t TxData1[5];
	uint8_t TxData2[5];


	TxData1[0] = 11;
 80004ca:	230b      	movs	r3, #11
 80004cc:	723b      	strb	r3, [r7, #8]
	for(int i = 1; i < 5;i++){
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	e014      	b.n	80004fe <CAN_switch_state+0x3a>
		TxData1[i] = check_bit(Default_Switch_State,i-1);
 80004d4:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <CAN_switch_state+0x94>)
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	3b01      	subs	r3, #1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	4610      	mov	r0, r2
 80004e4:	f000 fcd6 	bl	8000e94 <check_bit>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4619      	mov	r1, r3
 80004ec:	f107 0208 	add.w	r2, r7, #8
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	4413      	add	r3, r2
 80004f4:	460a      	mov	r2, r1
 80004f6:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b04      	cmp	r3, #4
 8000502:	dde7      	ble.n	80004d4 <CAN_switch_state+0x10>
	}
	CanSend(TxData1);
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ffbd 	bl	8000488 <CanSend>

	TxData2[0] = 12;
 800050e:	230c      	movs	r3, #12
 8000510:	703b      	strb	r3, [r7, #0]
	for(int i = 1; i < 5;i++){
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	e013      	b.n	8000540 <CAN_switch_state+0x7c>
		TxData2[i] = check_bit(Default_Switch_State,i+3);
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <CAN_switch_state+0x94>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	3303      	adds	r3, #3
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4610      	mov	r0, r2
 8000528:	f000 fcb4 	bl	8000e94 <check_bit>
 800052c:	4603      	mov	r3, r0
 800052e:	4619      	mov	r1, r3
 8000530:	463a      	mov	r2, r7
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	4413      	add	r3, r2
 8000536:	460a      	mov	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 5;i++){
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	3301      	adds	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	2b04      	cmp	r3, #4
 8000544:	dde8      	ble.n	8000518 <CAN_switch_state+0x54>
	}
	CanSend(TxData2);
 8000546:	463b      	mov	r3, r7
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff9d 	bl	8000488 <CanSend>
}
 800054e:	bf00      	nop
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000085e 	.word	0x2000085e

0800055c <output>:



void output(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	e069      	b.n	8000644 <output+0xe8>
		bit = check_bit(Default_Switch_State, i);
 8000570:	4b38      	ldr	r3, [pc, #224]	@ (8000654 <output+0xf8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	79fa      	ldrb	r2, [r7, #7]
 8000576:	4611      	mov	r1, r2
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fc8b 	bl	8000e94 <check_bit>
 800057e:	4603      	mov	r3, r0
 8000580:	71bb      	strb	r3, [r7, #6]
		switch(i){
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d857      	bhi.n	8000638 <output+0xdc>
 8000588:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <output+0x34>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005b1 	.word	0x080005b1
 8000594:	080005c1 	.word	0x080005c1
 8000598:	080005d3 	.word	0x080005d3
 800059c:	080005e5 	.word	0x080005e5
 80005a0:	080005f7 	.word	0x080005f7
 80005a4:	08000607 	.word	0x08000607
 80005a8:	08000619 	.word	0x08000619
 80005ac:	08000629 	.word	0x08000629
		case 0:
			HAL_GPIO_WritePin(GPIOA,IN0_Pin,bit);
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	461a      	mov	r2, r3
 80005b4:	2108      	movs	r1, #8
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ba:	f004 fb7f 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 80005be:	e03e      	b.n	800063e <output+0xe2>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	461a      	mov	r2, r3
 80005c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005cc:	f004 fb76 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 80005d0:	e035      	b.n	800063e <output+0xe2>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	461a      	mov	r2, r3
 80005d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f004 fb6d 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 80005e2:	e02c      	b.n	800063e <output+0xe2>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	461a      	mov	r2, r3
 80005e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f004 fb64 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 80005f4:	e023      	b.n	800063e <output+0xe2>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2110      	movs	r1, #16
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f004 fb5c 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 8000604:	e01b      	b.n	800063e <output+0xe2>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	461a      	mov	r2, r3
 800060a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800060e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000612:	f004 fb53 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 8000616:	e012      	b.n	800063e <output+0xe2>
		case 6:
			HAL_GPIO_WritePin(GPIOA,IN2_2_Pin,bit);
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	461a      	mov	r2, r3
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f004 fb4b 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 8000626:	e00a      	b.n	800063e <output+0xe2>
		case 7:
			HAL_GPIO_WritePin(GPIOA,IN3_2_Pin,bit);
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	461a      	mov	r2, r3
 800062c:	2110      	movs	r1, #16
 800062e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000632:	f004 fb43 	bl	8004cbc <HAL_GPIO_WritePin>
			break;
 8000636:	e002      	b.n	800063e <output+0xe2>
		default:
			Error_Handler();
 8000638:	f001 f98a 	bl	8001950 <Error_Handler>
			break;
 800063c:	bf00      	nop
	for(i = 0; i < 8;i++){
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	3301      	adds	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b07      	cmp	r3, #7
 8000648:	d992      	bls.n	8000570 <output+0x14>
		}
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000085e 	.word	0x2000085e

08000658 <Over_current>:

void Over_current(uint8_t output_pin){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <Over_current+0x24>)
 8000664:	220f      	movs	r2, #15
 8000666:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <Over_current+0x24>)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800066e:	4803      	ldr	r0, [pc, #12]	@ (800067c <Over_current+0x24>)
 8000670:	f7ff ff0a 	bl	8000488 <CanSend>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000030 	.word	0x20000030

08000680 <Warning_current>:

void Warning_current(uint8_t output_pin){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <Warning_current+0x24>)
 800068c:	220e      	movs	r2, #14
 800068e:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <Warning_current+0x24>)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 8000696:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <Warning_current+0x24>)
 8000698:	f7ff fef6 	bl	8000488 <CanSend>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000030 	.word	0x20000030

080006a8 <Under_current>:

void Under_current(uint8_t output_pin){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 13;
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <Under_current+0x24>)
 80006b4:	220d      	movs	r2, #13
 80006b6:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 80006b8:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <Under_current+0x24>)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 80006be:	4803      	ldr	r0, [pc, #12]	@ (80006cc <Under_current+0x24>)
 80006c0:	f7ff fee2 	bl	8000488 <CanSend>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000030 	.word	0x20000030

080006d0 <decode>:

void decode(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <decode+0xb0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d002      	beq.n	80006e2 <decode+0x12>
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d03a      	beq.n	8000756 <decode+0x86>
 80006e0:	e049      	b.n	8000776 <decode+0xa6>
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 80006e2:	4b27      	ldr	r3, [pc, #156]	@ (8000780 <decode+0xb0>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d002      	beq.n	80006f0 <decode+0x20>
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d018      	beq.n	8000720 <decode+0x50>
 80006ee:	e02f      	b.n	8000750 <decode+0x80>
		case 1:										//PUMPS
			switch(RxData[2]){
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <decode+0xb0>)
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d002      	beq.n	80006fe <decode+0x2e>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d007      	beq.n	800070c <decode+0x3c>
 80006fc:	e00d      	b.n	800071a <decode+0x4a>
			case 1:
				set_pwm_duty_cycle(&htim1,RxData[3]);
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <decode+0xb0>)
 8000700:	78db      	ldrb	r3, [r3, #3]
 8000702:	4619      	mov	r1, r3
 8000704:	481f      	ldr	r0, [pc, #124]	@ (8000784 <decode+0xb4>)
 8000706:	f7ff fd87 	bl	8000218 <set_pwm_duty_cycle>
				break;
 800070a:	e009      	b.n	8000720 <decode+0x50>
			case 2:
				set_pwm_freq(&htim1, RxData[3]);
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <decode+0xb0>)
 800070e:	78db      	ldrb	r3, [r3, #3]
 8000710:	4619      	mov	r1, r3
 8000712:	481c      	ldr	r0, [pc, #112]	@ (8000784 <decode+0xb4>)
 8000714:	f7ff fd9d 	bl	8000252 <set_pwm_freq>
				break;
 8000718:	e002      	b.n	8000720 <decode+0x50>
			default:
				//decode_error();
				Error_Handler();
 800071a:	f001 f919 	bl	8001950 <Error_Handler>
				break;
 800071e:	bf00      	nop
			}
		case 2:										//FANS
			switch(RxData[2]){
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <decode+0xb0>)
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d002      	beq.n	800072e <decode+0x5e>
 8000728:	2b02      	cmp	r3, #2
 800072a:	d007      	beq.n	800073c <decode+0x6c>
 800072c:	e00d      	b.n	800074a <decode+0x7a>
			case 1:
				set_pwm_duty_cycle(&htim2,RxData[3]);
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <decode+0xb0>)
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	4619      	mov	r1, r3
 8000734:	4814      	ldr	r0, [pc, #80]	@ (8000788 <decode+0xb8>)
 8000736:	f7ff fd6f 	bl	8000218 <set_pwm_duty_cycle>
				break;
 800073a:	e009      	b.n	8000750 <decode+0x80>
			case 2:
				set_pwm_freq(&htim2, RxData[3]);
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <decode+0xb0>)
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	@ (8000788 <decode+0xb8>)
 8000744:	f7ff fd85 	bl	8000252 <set_pwm_freq>
				break;
 8000748:	e002      	b.n	8000750 <decode+0x80>
			default:
				//decode_error();
				Error_Handler();
 800074a:	f001 f901 	bl	8001950 <Error_Handler>
				break;
 800074e:	bf00      	nop
			}
		default:
			//decode_error(); //TODO: IMPLEMENT
			Error_Handler();
 8000750:	f001 f8fe 	bl	8001950 <Error_Handler>
			break;
 8000754:	bf00      	nop
		}
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <decode+0xbc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <decode+0xb0>)
 800075c:	7851      	ldrb	r1, [r2, #1]
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <decode+0xb0>)
 8000760:	7892      	ldrb	r2, [r2, #2]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fbb2 	bl	8000ecc <set_bit>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <decode+0xbc>)
 800076e:	701a      	strb	r2, [r3, #0]
		output();
 8000770:	f7ff fef4 	bl	800055c <output>
		break;
 8000774:	e002      	b.n	800077c <decode+0xac>
	default:
		Error_Handler();
 8000776:	f001 f8eb 	bl	8001950 <Error_Handler>
		break;
 800077a:	bf00      	nop
	}
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000028 	.word	0x20000028
 8000784:	20000174 	.word	0x20000174
 8000788:	200001c0 	.word	0x200001c0
 800078c:	2000085e 	.word	0x2000085e

08000790 <CS_process>:



void CS_process(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	PROC[0] = IN1_1_CS[0];
 8000796:	4b67      	ldr	r3, [pc, #412]	@ (8000934 <CS_process+0x1a4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a67      	ldr	r2, [pc, #412]	@ (8000938 <CS_process+0x1a8>)
 800079c:	6013      	str	r3, [r2, #0]
	PROC[1] = IN2_1_CS[0];
 800079e:	4b67      	ldr	r3, [pc, #412]	@ (800093c <CS_process+0x1ac>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a65      	ldr	r2, [pc, #404]	@ (8000938 <CS_process+0x1a8>)
 80007a4:	6053      	str	r3, [r2, #4]
	PROC[2] = IN3_1_CS[0];
 80007a6:	4b66      	ldr	r3, [pc, #408]	@ (8000940 <CS_process+0x1b0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a63      	ldr	r2, [pc, #396]	@ (8000938 <CS_process+0x1a8>)
 80007ac:	6093      	str	r3, [r2, #8]
	PROC[3] = IN4_1_CS[0];
 80007ae:	4b65      	ldr	r3, [pc, #404]	@ (8000944 <CS_process+0x1b4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a61      	ldr	r2, [pc, #388]	@ (8000938 <CS_process+0x1a8>)
 80007b4:	60d3      	str	r3, [r2, #12]
	PROC[4] = IN1_2_CS[0];
 80007b6:	4b64      	ldr	r3, [pc, #400]	@ (8000948 <CS_process+0x1b8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a5f      	ldr	r2, [pc, #380]	@ (8000938 <CS_process+0x1a8>)
 80007bc:	6113      	str	r3, [r2, #16]
	PROC[5] = IN2_2_CS[0];
 80007be:	4b63      	ldr	r3, [pc, #396]	@ (800094c <CS_process+0x1bc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a5d      	ldr	r2, [pc, #372]	@ (8000938 <CS_process+0x1a8>)
 80007c4:	6153      	str	r3, [r2, #20]
	PROC[6] = IN3_2_CS[0];
 80007c6:	4b62      	ldr	r3, [pc, #392]	@ (8000950 <CS_process+0x1c0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a5b      	ldr	r2, [pc, #364]	@ (8000938 <CS_process+0x1a8>)
 80007cc:	6193      	str	r3, [r2, #24]
	PROC[7] = IN4_2_CS[0];
 80007ce:	4b61      	ldr	r3, [pc, #388]	@ (8000954 <CS_process+0x1c4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a59      	ldr	r2, [pc, #356]	@ (8000938 <CS_process+0x1a8>)
 80007d4:	61d3      	str	r3, [r2, #28]
	for(int i = 1; i < I_AVERAGE; i++){
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e052      	b.n	8000882 <CS_process+0xf2>
		PROC[0] = (PROC[0] + IN1_1_CS[i])/2;
 80007dc:	4b56      	ldr	r3, [pc, #344]	@ (8000938 <CS_process+0x1a8>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4954      	ldr	r1, [pc, #336]	@ (8000934 <CS_process+0x1a4>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e8:	4413      	add	r3, r2
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	4a52      	ldr	r2, [pc, #328]	@ (8000938 <CS_process+0x1a8>)
 80007ee:	6013      	str	r3, [r2, #0]
		PROC[1] = (PROC[1] + IN2_1_CS[i])/2;
 80007f0:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <CS_process+0x1a8>)
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4951      	ldr	r1, [pc, #324]	@ (800093c <CS_process+0x1ac>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fc:	4413      	add	r3, r2
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	4a4d      	ldr	r2, [pc, #308]	@ (8000938 <CS_process+0x1a8>)
 8000802:	6053      	str	r3, [r2, #4]
		PROC[2] = (PROC[2] + IN3_1_CS[i])/2;
 8000804:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <CS_process+0x1a8>)
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	494d      	ldr	r1, [pc, #308]	@ (8000940 <CS_process+0x1b0>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000810:	4413      	add	r3, r2
 8000812:	085b      	lsrs	r3, r3, #1
 8000814:	4a48      	ldr	r2, [pc, #288]	@ (8000938 <CS_process+0x1a8>)
 8000816:	6093      	str	r3, [r2, #8]
		PROC[3] = (PROC[3] + IN4_1_CS[i])/2;
 8000818:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <CS_process+0x1a8>)
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4949      	ldr	r1, [pc, #292]	@ (8000944 <CS_process+0x1b4>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000824:	4413      	add	r3, r2
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	4a43      	ldr	r2, [pc, #268]	@ (8000938 <CS_process+0x1a8>)
 800082a:	60d3      	str	r3, [r2, #12]
		PROC[4] = (PROC[4] + IN1_2_CS[i])/2;
 800082c:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <CS_process+0x1a8>)
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	4945      	ldr	r1, [pc, #276]	@ (8000948 <CS_process+0x1b8>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000838:	4413      	add	r3, r2
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <CS_process+0x1a8>)
 800083e:	6113      	str	r3, [r2, #16]
		PROC[5] = (PROC[5] + IN2_2_CS[i])/2;
 8000840:	4b3d      	ldr	r3, [pc, #244]	@ (8000938 <CS_process+0x1a8>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	4941      	ldr	r1, [pc, #260]	@ (800094c <CS_process+0x1bc>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084c:	4413      	add	r3, r2
 800084e:	085b      	lsrs	r3, r3, #1
 8000850:	4a39      	ldr	r2, [pc, #228]	@ (8000938 <CS_process+0x1a8>)
 8000852:	6153      	str	r3, [r2, #20]
		PROC[6] = (PROC[6] + IN3_2_CS[i])/2;
 8000854:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <CS_process+0x1a8>)
 8000856:	699a      	ldr	r2, [r3, #24]
 8000858:	493d      	ldr	r1, [pc, #244]	@ (8000950 <CS_process+0x1c0>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000860:	4413      	add	r3, r2
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	4a34      	ldr	r2, [pc, #208]	@ (8000938 <CS_process+0x1a8>)
 8000866:	6193      	str	r3, [r2, #24]
		PROC[7] = (PROC[7] + IN4_2_CS[i])/2;
 8000868:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <CS_process+0x1a8>)
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	4939      	ldr	r1, [pc, #228]	@ (8000954 <CS_process+0x1c4>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000874:	4413      	add	r3, r2
 8000876:	085b      	lsrs	r3, r3, #1
 8000878:	4a2f      	ldr	r2, [pc, #188]	@ (8000938 <CS_process+0x1a8>)
 800087a:	61d3      	str	r3, [r2, #28]
	for(int i = 1; i < I_AVERAGE; i++){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b1f      	cmp	r3, #31
 8000886:	dda9      	ble.n	80007dc <CS_process+0x4c>
	}
	PROC[0] = CS_Raw_to_mA(PROC[0]);
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <CS_process+0x1a8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fb42 	bl	8000f18 <CS_Raw_to_mA>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <CS_process+0x1a8>)
 800089a:	601a      	str	r2, [r3, #0]
	PROC[1] = CS_Raw_to_mA(PROC[1]);
 800089c:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <CS_process+0x1a8>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fb38 	bl	8000f18 <CS_Raw_to_mA>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <CS_process+0x1a8>)
 80008ae:	605a      	str	r2, [r3, #4]
	PROC[2] = CS_Raw_to_mA(PROC[2]);
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <CS_process+0x1a8>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb2e 	bl	8000f18 <CS_Raw_to_mA>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <CS_process+0x1a8>)
 80008c2:	609a      	str	r2, [r3, #8]
	PROC[3] = CS_Raw_to_mA(PROC[3]);
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <CS_process+0x1a8>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fb24 	bl	8000f18 <CS_Raw_to_mA>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <CS_process+0x1a8>)
 80008d6:	60da      	str	r2, [r3, #12]
	PROC[4] = CS_Raw_to_mA(PROC[4]);
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <CS_process+0x1a8>)
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fb1a 	bl	8000f18 <CS_Raw_to_mA>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <CS_process+0x1a8>)
 80008ea:	611a      	str	r2, [r3, #16]
	PROC[5] = CS_Raw_to_mA(PROC[5]);
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <CS_process+0x1a8>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fb10 	bl	8000f18 <CS_Raw_to_mA>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <CS_process+0x1a8>)
 80008fe:	615a      	str	r2, [r3, #20]
	PROC[6] = CS_Raw_to_mA(PROC[6]);
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <CS_process+0x1a8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fb06 	bl	8000f18 <CS_Raw_to_mA>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <CS_process+0x1a8>)
 8000912:	619a      	str	r2, [r3, #24]
	PROC[7] = CS_Raw_to_mA(PROC[7]);
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <CS_process+0x1a8>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fafc 	bl	8000f18 <CS_Raw_to_mA>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <CS_process+0x1a8>)
 8000926:	61da      	str	r2, [r3, #28]
	check_warnings();
 8000928:	f000 f816 	bl	8000958 <check_warnings>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000388 	.word	0x20000388
 8000938:	20000808 	.word	0x20000808
 800093c:	20000408 	.word	0x20000408
 8000940:	20000488 	.word	0x20000488
 8000944:	20000508 	.word	0x20000508
 8000948:	20000588 	.word	0x20000588
 800094c:	20000608 	.word	0x20000608
 8000950:	20000688 	.word	0x20000688
 8000954:	20000708 	.word	0x20000708

08000958 <check_warnings>:

void check_warnings(){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 8; x++){
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e038      	b.n	80009d6 <check_warnings+0x7e>
		if(PROC[x] >= WC[x]){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a20      	ldr	r2, [pc, #128]	@ (80009e8 <check_warnings+0x90>)
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	491f      	ldr	r1, [pc, #124]	@ (80009ec <check_warnings+0x94>)
 8000970:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000974:	4293      	cmp	r3, r2
 8000976:	d31d      	bcc.n	80009b4 <check_warnings+0x5c>
			if(PROC[x] >= OC[x]){
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <check_warnings+0x90>)
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	491b      	ldr	r1, [pc, #108]	@ (80009f0 <check_warnings+0x98>)
 8000984:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000988:	4293      	cmp	r3, r2
 800098a:	d30f      	bcc.n	80009ac <check_warnings+0x54>
				Default_Switch_State = set_bit(Default_Switch_State, x, 0);
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <check_warnings+0x9c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	79f9      	ldrb	r1, [r7, #7]
 8000992:	2200      	movs	r2, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fa99 	bl	8000ecc <set_bit>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <check_warnings+0x9c>)
 80009a0:	701a      	strb	r2, [r3, #0]
				Over_current(x);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe57 	bl	8000658 <Over_current>
 80009aa:	e003      	b.n	80009b4 <check_warnings+0x5c>
			}else{
				Warning_current(x);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe66 	bl	8000680 <Warning_current>
			}
		}
		if(PROC[x] <= UC[x]){
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <check_warnings+0x90>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	490e      	ldr	r1, [pc, #56]	@ (80009f8 <check_warnings+0xa0>)
 80009c0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d803      	bhi.n	80009d0 <check_warnings+0x78>
			Under_current(x);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe6c 	bl	80006a8 <Under_current>
	for(uint8_t x = 0; x < 8; x++){
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d9c3      	bls.n	8000964 <check_warnings+0xc>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000808 	.word	0x20000808
 80009ec:	20000828 	.word	0x20000828
 80009f0:	20000838 	.word	0x20000838
 80009f4:	2000085e 	.word	0x2000085e
 80009f8:	20000848 	.word	0x20000848

080009fc <CS_read>:

void CS_read(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e229      	b.n	8000e5c <CS_read+0x460>
		switch(x){
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	f200 8223 	bhi.w	8000e56 <CS_read+0x45a>
 8000a10:	a201      	add	r2, pc, #4	@ (adr r2, 8000a18 <CS_read+0x1c>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a29 	.word	0x08000a29
 8000a1c:	08000b2b 	.word	0x08000b2b
 8000a20:	08000c2d 	.word	0x08000c2d
 8000a24:	08000d55 	.word	0x08000d55
		case 0:
			CS_SEL[0] = 0;
 8000a28:	4b8c      	ldr	r3, [pc, #560]	@ (8000c5c <CS_read+0x260>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c5c <CS_read+0x260>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000a34:	4b89      	ldr	r3, [pc, #548]	@ (8000c5c <CS_read+0x260>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2140      	movs	r1, #64	@ 0x40
 8000a3c:	4888      	ldr	r0, [pc, #544]	@ (8000c60 <CS_read+0x264>)
 8000a3e:	f004 f93d 	bl	8004cbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000a42:	4b86      	ldr	r3, [pc, #536]	@ (8000c5c <CS_read+0x260>)
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4885      	ldr	r0, [pc, #532]	@ (8000c60 <CS_read+0x264>)
 8000a4c:	f004 f936 	bl	8004cbc <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	e065      	b.n	8000b22 <CS_read+0x126>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000a56:	4883      	ldr	r0, [pc, #524]	@ (8000c64 <CS_read+0x268>)
 8000a58:	f001 fedc 	bl	8002814 <HAL_ADC_Start>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <CS_read+0x6a>
 8000a62:	f000 ff75 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000a66:	4880      	ldr	r0, [pc, #512]	@ (8000c68 <CS_read+0x26c>)
 8000a68:	f001 fed4 	bl	8002814 <HAL_ADC_Start>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <CS_read+0x7a>
 8000a72:	f000 ff6d 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000a76:	2164      	movs	r1, #100	@ 0x64
 8000a78:	487a      	ldr	r0, [pc, #488]	@ (8000c64 <CS_read+0x268>)
 8000a7a:	f001 ffbb 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <CS_read+0x8c>
 8000a84:	f000 ff64 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000a88:	2164      	movs	r1, #100	@ 0x64
 8000a8a:	4877      	ldr	r0, [pc, #476]	@ (8000c68 <CS_read+0x26c>)
 8000a8c:	f001 ffb2 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <CS_read+0x9e>
 8000a96:	f000 ff5b 	bl	8001950 <Error_Handler>
				IN1_1_CS[i] = HAL_ADC_GetValue(&hadc1);
 8000a9a:	4872      	ldr	r0, [pc, #456]	@ (8000c64 <CS_read+0x268>)
 8000a9c:	f002 f9ed 	bl	8002e7a <HAL_ADC_GetValue>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4972      	ldr	r1, [pc, #456]	@ (8000c6c <CS_read+0x270>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				IN1_2_CS[i] = HAL_ADC_GetValue(&hadc2);
 8000aaa:	486f      	ldr	r0, [pc, #444]	@ (8000c68 <CS_read+0x26c>)
 8000aac:	f002 f9e5 	bl	8002e7a <HAL_ADC_GetValue>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	496f      	ldr	r1, [pc, #444]	@ (8000c70 <CS_read+0x274>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000aba:	486a      	ldr	r0, [pc, #424]	@ (8000c64 <CS_read+0x268>)
 8000abc:	f001 ff66 	bl	800298c <HAL_ADC_Stop>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <CS_read+0xce>
 8000ac6:	f000 ff43 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000aca:	4867      	ldr	r0, [pc, #412]	@ (8000c68 <CS_read+0x26c>)
 8000acc:	f001 ff5e 	bl	800298c <HAL_ADC_Stop>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <CS_read+0xde>
 8000ad6:	f000 ff3b 	bl	8001950 <Error_Handler>

				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000ada:	4862      	ldr	r0, [pc, #392]	@ (8000c64 <CS_read+0x268>)
 8000adc:	f001 fe9a 	bl	8002814 <HAL_ADC_Start>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <CS_read+0xee>
 8000ae6:	f000 ff33 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000aea:	2164      	movs	r1, #100	@ 0x64
 8000aec:	485d      	ldr	r0, [pc, #372]	@ (8000c64 <CS_read+0x268>)
 8000aee:	f001 ff81 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <CS_read+0x100>
 8000af8:	f000 ff2a 	bl	8001950 <Error_Handler>
				Analog_CS[i] = HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000afc:	4859      	ldr	r0, [pc, #356]	@ (8000c64 <CS_read+0x268>)
 8000afe:	f002 f9bc 	bl	8002e7a <HAL_ADC_GetValue>
 8000b02:	4602      	mov	r2, r0
 8000b04:	495b      	ldr	r1, [pc, #364]	@ (8000c74 <CS_read+0x278>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000b0c:	4855      	ldr	r0, [pc, #340]	@ (8000c64 <CS_read+0x268>)
 8000b0e:	f001 ff3d 	bl	800298c <HAL_ADC_Stop>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <CS_read+0x120>
 8000b18:	f000 ff1a 	bl	8001950 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	dd96      	ble.n	8000a56 <CS_read+0x5a>
			}
			break;
 8000b28:	e195      	b.n	8000e56 <CS_read+0x45a>
		case 1:
			CS_SEL[0] = 0;
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <CS_read+0x260>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000b30:	4b4a      	ldr	r3, [pc, #296]	@ (8000c5c <CS_read+0x260>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000b36:	4b49      	ldr	r3, [pc, #292]	@ (8000c5c <CS_read+0x260>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2140      	movs	r1, #64	@ 0x40
 8000b3e:	4848      	ldr	r0, [pc, #288]	@ (8000c60 <CS_read+0x264>)
 8000b40:	f004 f8bc 	bl	8004cbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000b44:	4b45      	ldr	r3, [pc, #276]	@ (8000c5c <CS_read+0x260>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4844      	ldr	r0, [pc, #272]	@ (8000c60 <CS_read+0x264>)
 8000b4e:	f004 f8b5 	bl	8004cbc <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e065      	b.n	8000c24 <CS_read+0x228>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000b58:	4842      	ldr	r0, [pc, #264]	@ (8000c64 <CS_read+0x268>)
 8000b5a:	f001 fe5b 	bl	8002814 <HAL_ADC_Start>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <CS_read+0x16c>
 8000b64:	f000 fef4 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000b68:	483f      	ldr	r0, [pc, #252]	@ (8000c68 <CS_read+0x26c>)
 8000b6a:	f001 fe53 	bl	8002814 <HAL_ADC_Start>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <CS_read+0x17c>
 8000b74:	f000 feec 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000b78:	2164      	movs	r1, #100	@ 0x64
 8000b7a:	483a      	ldr	r0, [pc, #232]	@ (8000c64 <CS_read+0x268>)
 8000b7c:	f001 ff3a 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <CS_read+0x18e>
 8000b86:	f000 fee3 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000b8a:	2164      	movs	r1, #100	@ 0x64
 8000b8c:	4836      	ldr	r0, [pc, #216]	@ (8000c68 <CS_read+0x26c>)
 8000b8e:	f001 ff31 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <CS_read+0x1a0>
 8000b98:	f000 feda 	bl	8001950 <Error_Handler>
				IN2_1_CS[i] = HAL_ADC_GetValue(&hadc1);
 8000b9c:	4831      	ldr	r0, [pc, #196]	@ (8000c64 <CS_read+0x268>)
 8000b9e:	f002 f96c 	bl	8002e7a <HAL_ADC_GetValue>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4934      	ldr	r1, [pc, #208]	@ (8000c78 <CS_read+0x27c>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				IN2_2_CS[i] = HAL_ADC_GetValue(&hadc2);
 8000bac:	482e      	ldr	r0, [pc, #184]	@ (8000c68 <CS_read+0x26c>)
 8000bae:	f002 f964 	bl	8002e7a <HAL_ADC_GetValue>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4931      	ldr	r1, [pc, #196]	@ (8000c7c <CS_read+0x280>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000bbc:	4829      	ldr	r0, [pc, #164]	@ (8000c64 <CS_read+0x268>)
 8000bbe:	f001 fee5 	bl	800298c <HAL_ADC_Stop>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <CS_read+0x1d0>
 8000bc8:	f000 fec2 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000bcc:	4826      	ldr	r0, [pc, #152]	@ (8000c68 <CS_read+0x26c>)
 8000bce:	f001 fedd 	bl	800298c <HAL_ADC_Stop>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <CS_read+0x1e0>
 8000bd8:	f000 feba 	bl	8001950 <Error_Handler>

				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000bdc:	4821      	ldr	r0, [pc, #132]	@ (8000c64 <CS_read+0x268>)
 8000bde:	f001 fe19 	bl	8002814 <HAL_ADC_Start>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <CS_read+0x1f0>
 8000be8:	f000 feb2 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000bec:	2164      	movs	r1, #100	@ 0x64
 8000bee:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <CS_read+0x268>)
 8000bf0:	f001 ff00 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <CS_read+0x202>
 8000bfa:	f000 fea9 	bl	8001950 <Error_Handler>
				Analog_CS[i] = HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000bfe:	4819      	ldr	r0, [pc, #100]	@ (8000c64 <CS_read+0x268>)
 8000c00:	f002 f93b 	bl	8002e7a <HAL_ADC_GetValue>
 8000c04:	4602      	mov	r2, r0
 8000c06:	491b      	ldr	r1, [pc, #108]	@ (8000c74 <CS_read+0x278>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000c0e:	4815      	ldr	r0, [pc, #84]	@ (8000c64 <CS_read+0x268>)
 8000c10:	f001 febc 	bl	800298c <HAL_ADC_Stop>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <CS_read+0x222>
 8000c1a:	f000 fe99 	bl	8001950 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b1f      	cmp	r3, #31
 8000c28:	dd96      	ble.n	8000b58 <CS_read+0x15c>
			}
			break;
 8000c2a:	e114      	b.n	8000e56 <CS_read+0x45a>
		case 2:
			CS_SEL[0] = 1;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <CS_read+0x260>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <CS_read+0x260>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <CS_read+0x260>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2140      	movs	r1, #64	@ 0x40
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <CS_read+0x264>)
 8000c42:	f004 f83b 	bl	8004cbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <CS_read+0x260>)
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <CS_read+0x264>)
 8000c50:	f004 f834 	bl	8004cbc <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e078      	b.n	8000d4c <CS_read+0x350>
 8000c5a:	bf00      	nop
 8000c5c:	2000085c 	.word	0x2000085c
 8000c60:	48000400 	.word	0x48000400
 8000c64:	20000038 	.word	0x20000038
 8000c68:	200000a4 	.word	0x200000a4
 8000c6c:	20000388 	.word	0x20000388
 8000c70:	20000588 	.word	0x20000588
 8000c74:	20000788 	.word	0x20000788
 8000c78:	20000408 	.word	0x20000408
 8000c7c:	20000608 	.word	0x20000608
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c80:	487b      	ldr	r0, [pc, #492]	@ (8000e70 <CS_read+0x474>)
 8000c82:	f001 ff8f 	bl	8002ba4 <HAL_ADC_Start_IT>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <CS_read+0x294>
 8000c8c:	f000 fe60 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000c90:	4878      	ldr	r0, [pc, #480]	@ (8000e74 <CS_read+0x478>)
 8000c92:	f001 ff87 	bl	8002ba4 <HAL_ADC_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <CS_read+0x2a4>
 8000c9c:	f000 fe58 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000ca0:	2164      	movs	r1, #100	@ 0x64
 8000ca2:	4873      	ldr	r0, [pc, #460]	@ (8000e70 <CS_read+0x474>)
 8000ca4:	f001 fea6 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <CS_read+0x2b6>
 8000cae:	f000 fe4f 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000cb2:	2164      	movs	r1, #100	@ 0x64
 8000cb4:	486f      	ldr	r0, [pc, #444]	@ (8000e74 <CS_read+0x478>)
 8000cb6:	f001 fe9d 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <CS_read+0x2c8>
 8000cc0:	f000 fe46 	bl	8001950 <Error_Handler>
				IN3_1_CS[i] = HAL_ADC_GetValue(&hadc1);
 8000cc4:	486a      	ldr	r0, [pc, #424]	@ (8000e70 <CS_read+0x474>)
 8000cc6:	f002 f8d8 	bl	8002e7a <HAL_ADC_GetValue>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	496a      	ldr	r1, [pc, #424]	@ (8000e78 <CS_read+0x47c>)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				IN3_2_CS[i] = HAL_ADC_GetValue(&hadc2);
 8000cd4:	4867      	ldr	r0, [pc, #412]	@ (8000e74 <CS_read+0x478>)
 8000cd6:	f002 f8d0 	bl	8002e7a <HAL_ADC_GetValue>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4967      	ldr	r1, [pc, #412]	@ (8000e7c <CS_read+0x480>)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000ce4:	4862      	ldr	r0, [pc, #392]	@ (8000e70 <CS_read+0x474>)
 8000ce6:	f002 f88d 	bl	8002e04 <HAL_ADC_Stop_IT>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <CS_read+0x2f8>
 8000cf0:	f000 fe2e 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000cf4:	485f      	ldr	r0, [pc, #380]	@ (8000e74 <CS_read+0x478>)
 8000cf6:	f002 f885 	bl	8002e04 <HAL_ADC_Stop_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <CS_read+0x308>
 8000d00:	f000 fe26 	bl	8001950 <Error_Handler>

				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000d04:	485a      	ldr	r0, [pc, #360]	@ (8000e70 <CS_read+0x474>)
 8000d06:	f001 fd85 	bl	8002814 <HAL_ADC_Start>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <CS_read+0x318>
 8000d10:	f000 fe1e 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000d14:	2164      	movs	r1, #100	@ 0x64
 8000d16:	4856      	ldr	r0, [pc, #344]	@ (8000e70 <CS_read+0x474>)
 8000d18:	f001 fe6c 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <CS_read+0x32a>
 8000d22:	f000 fe15 	bl	8001950 <Error_Handler>
				Analog_CS[i] = HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000d26:	4852      	ldr	r0, [pc, #328]	@ (8000e70 <CS_read+0x474>)
 8000d28:	f002 f8a7 	bl	8002e7a <HAL_ADC_GetValue>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4954      	ldr	r1, [pc, #336]	@ (8000e80 <CS_read+0x484>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000d36:	484e      	ldr	r0, [pc, #312]	@ (8000e70 <CS_read+0x474>)
 8000d38:	f001 fe28 	bl	800298c <HAL_ADC_Stop>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <CS_read+0x34a>
 8000d42:	f000 fe05 	bl	8001950 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b1f      	cmp	r3, #31
 8000d50:	dd96      	ble.n	8000c80 <CS_read+0x284>
			}
			break;
 8000d52:	e080      	b.n	8000e56 <CS_read+0x45a>
		case 3:
			CS_SEL[0] = 1;
 8000d54:	4b4b      	ldr	r3, [pc, #300]	@ (8000e84 <CS_read+0x488>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e84 <CS_read+0x488>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d60:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <CS_read+0x488>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	2140      	movs	r1, #64	@ 0x40
 8000d68:	4847      	ldr	r0, [pc, #284]	@ (8000e88 <CS_read+0x48c>)
 8000d6a:	f003 ffa7 	bl	8004cbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d6e:	4b45      	ldr	r3, [pc, #276]	@ (8000e84 <CS_read+0x488>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	461a      	mov	r2, r3
 8000d74:	2120      	movs	r1, #32
 8000d76:	4844      	ldr	r0, [pc, #272]	@ (8000e88 <CS_read+0x48c>)
 8000d78:	f003 ffa0 	bl	8004cbc <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	e065      	b.n	8000e4e <CS_read+0x452>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d82:	483b      	ldr	r0, [pc, #236]	@ (8000e70 <CS_read+0x474>)
 8000d84:	f001 ff0e 	bl	8002ba4 <HAL_ADC_Start_IT>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <CS_read+0x396>
 8000d8e:	f000 fddf 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d92:	4838      	ldr	r0, [pc, #224]	@ (8000e74 <CS_read+0x478>)
 8000d94:	f001 ff06 	bl	8002ba4 <HAL_ADC_Start_IT>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <CS_read+0x3a6>
 8000d9e:	f000 fdd7 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000da2:	2164      	movs	r1, #100	@ 0x64
 8000da4:	4832      	ldr	r0, [pc, #200]	@ (8000e70 <CS_read+0x474>)
 8000da6:	f001 fe25 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <CS_read+0x3b8>
 8000db0:	f000 fdce 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000db4:	2164      	movs	r1, #100	@ 0x64
 8000db6:	482f      	ldr	r0, [pc, #188]	@ (8000e74 <CS_read+0x478>)
 8000db8:	f001 fe1c 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <CS_read+0x3ca>
 8000dc2:	f000 fdc5 	bl	8001950 <Error_Handler>
				IN4_1_CS[i] = HAL_ADC_GetValue(&hadc1);
 8000dc6:	482a      	ldr	r0, [pc, #168]	@ (8000e70 <CS_read+0x474>)
 8000dc8:	f002 f857 	bl	8002e7a <HAL_ADC_GetValue>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	492f      	ldr	r1, [pc, #188]	@ (8000e8c <CS_read+0x490>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				IN4_2_CS[i] = HAL_ADC_GetValue(&hadc2);
 8000dd6:	4827      	ldr	r0, [pc, #156]	@ (8000e74 <CS_read+0x478>)
 8000dd8:	f002 f84f 	bl	8002e7a <HAL_ADC_GetValue>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	492c      	ldr	r1, [pc, #176]	@ (8000e90 <CS_read+0x494>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000de6:	4822      	ldr	r0, [pc, #136]	@ (8000e70 <CS_read+0x474>)
 8000de8:	f002 f80c 	bl	8002e04 <HAL_ADC_Stop_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <CS_read+0x3fa>
 8000df2:	f000 fdad 	bl	8001950 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000df6:	481f      	ldr	r0, [pc, #124]	@ (8000e74 <CS_read+0x478>)
 8000df8:	f002 f804 	bl	8002e04 <HAL_ADC_Stop_IT>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <CS_read+0x40a>
 8000e02:	f000 fda5 	bl	8001950 <Error_Handler>

				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e06:	481a      	ldr	r0, [pc, #104]	@ (8000e70 <CS_read+0x474>)
 8000e08:	f001 fd04 	bl	8002814 <HAL_ADC_Start>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <CS_read+0x41a>
 8000e12:	f000 fd9d 	bl	8001950 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();} //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e16:	2164      	movs	r1, #100	@ 0x64
 8000e18:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <CS_read+0x474>)
 8000e1a:	f001 fdeb 	bl	80029f4 <HAL_ADC_PollForConversion>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <CS_read+0x42c>
 8000e24:	f000 fd94 	bl	8001950 <Error_Handler>
				Analog_CS[i] = HAL_ADC_GetValue(&hadc1); //have to repeat this in all loops, so that the rank 2 ADC gets emptied as well
 8000e28:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <CS_read+0x474>)
 8000e2a:	f002 f826 	bl	8002e7a <HAL_ADC_GetValue>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	4913      	ldr	r1, [pc, #76]	@ (8000e80 <CS_read+0x484>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <CS_read+0x474>)
 8000e3a:	f001 fda7 	bl	800298c <HAL_ADC_Stop>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <CS_read+0x44c>
 8000e44:	f000 fd84 	bl	8001950 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b1f      	cmp	r3, #31
 8000e52:	dd96      	ble.n	8000d82 <CS_read+0x386>
			}
			break;
 8000e54:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	f77f add2 	ble.w	8000a08 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000e64:	f7ff fc94 	bl	8000790 <CS_process>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000038 	.word	0x20000038
 8000e74:	200000a4 	.word	0x200000a4
 8000e78:	20000488 	.word	0x20000488
 8000e7c:	20000688 	.word	0x20000688
 8000e80:	20000788 	.word	0x20000788
 8000e84:	2000085c 	.word	0x2000085c
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	20000508 	.word	0x20000508
 8000e90:	20000708 	.word	0x20000708

08000e94 <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8000eae:	79fa      	ldrb	r2, [r7, #7]
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <check_bit+0x2a>
		return 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <check_bit+0x2c>
	}else{
		return 0;
 8000ebe:	2300      	movs	r3, #0
	}
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <set_bit+0x2c>
		byte |= mask;
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e008      	b.n	8000f0a <set_bit+0x3e>
	}else{
		byte &= ~mask;
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4013      	ands	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <CS_Raw_to_mA>:

uint16_t CS_Raw_to_mA(uint16_t raw){
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8000f22:	f241 3356 	movw	r3, #4950	@ 0x1356
 8000f26:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	817b      	strh	r3, [r7, #10]

	current = raw*max_mA / 4095;
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	fb03 f202 	mul.w	r2, r3, r2
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <CS_Raw_to_mA+0x3c>)
 8000f36:	fba3 1302 	umull	r1, r3, r3, r2
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	0852      	lsrs	r2, r2, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	0adb      	lsrs	r3, r3, #11
 8000f42:	817b      	strh	r3, [r7, #10]

	return current;
 8000f44:	897b      	ldrh	r3, [r7, #10]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	00100101 	.word	0x00100101

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 ffeb 	bl	8001f36 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000f60:	f7ff f983 	bl	800026a <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f84e 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 fc6c 	bl	8001844 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f896 	bl	800109c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000f70:	f000 f986 	bl	8001280 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000f74:	f000 f9ec 	bl	8001350 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f78:	f000 fa9a 	bl	80014b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f7c:	f000 fb0e 	bl	800159c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f80:	f000 fb5a 	bl	8001638 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000f84:	f000 fbcc 	bl	8001720 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f88:	f000 fc00 	bl	800178c <MX_TIM7_Init>
  MX_TIM16_Init();
 8000f8c:	f000 fc34 	bl	80017f8 <MX_TIM16_Init>
  MX_ADC2_Init();
 8000f90:	f000 f90e 	bl	80011b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8000f94:	4815      	ldr	r0, [pc, #84]	@ (8000fec <main+0x94>)
 8000f96:	f004 ff05 	bl	8005da4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8000f9a:	4815      	ldr	r0, [pc, #84]	@ (8000ff0 <main+0x98>)
 8000f9c:	f004 ff02 	bl	8005da4 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000fa0:	4814      	ldr	r0, [pc, #80]	@ (8000ff4 <main+0x9c>)
 8000fa2:	f004 fe95 	bl	8005cd0 <HAL_TIM_Base_Start_IT>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }
 8000fa6:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <main+0xa0>)
 8000fa8:	f003 f83a 	bl	8004020 <HAL_FDCAN_Start>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <main+0x5e>
 8000fb2:	f000 fccd 	bl	8001950 <Error_Handler>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2101      	movs	r1, #1
 8000fba:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <main+0xa0>)
 8000fbc:	f003 f9b6 	bl	800432c <HAL_FDCAN_ActivateNotification>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <main+0x72>
 8000fc6:	f000 fcc3 	bl	8001950 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(millis % 10 == 0){
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <main+0xa4>)
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <main+0xa8>)
 8000fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd4:	08d9      	lsrs	r1, r3, #3
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f1      	bne.n	8000fca <main+0x72>
		  CS_read();
 8000fe6:	f7ff fd09 	bl	80009fc <CS_read>
	  if(millis % 10 == 0){
 8000fea:	e7ee      	b.n	8000fca <main+0x72>
 8000fec:	20000174 	.word	0x20000174
 8000ff0:	200001c0 	.word	0x200001c0
 8000ff4:	2000020c 	.word	0x2000020c
 8000ff8:	20000110 	.word	0x20000110
 8000ffc:	20000858 	.word	0x20000858
 8001000:	cccccccd 	.word	0xcccccccd

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	@ 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	2238      	movs	r2, #56	@ 0x38
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 f960 	bl	80072d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001026:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800102a:	f003 fe5f 	bl	8004cec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2340      	movs	r3, #64	@ 0x40
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001044:	2301      	movs	r3, #1
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001050:	2308      	movs	r3, #8
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fef9 	bl	8004e54 <HAL_RCC_OscConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001068:	f000 fc72 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001070:	2303      	movs	r3, #3
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f9f7 	bl	8005478 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001090:	f000 fc5e 	bl	8001950 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	@ 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	@ 0x30
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 f90f 	bl	80072d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010c2:	4b37      	ldr	r3, [pc, #220]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010d6:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010dc:	4b30      	ldr	r3, [pc, #192]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010de:	2201      	movs	r2, #1
 80010e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_ADC1_Init+0x104>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <MX_ADC1_Init+0x104>)
 800110a:	2200      	movs	r2, #0
 800110c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_ADC1_Init+0x104>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	481e      	ldr	r0, [pc, #120]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001126:	f001 f9f1 	bl	800250c <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001130:	f000 fc0e 	bl	8001950 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001140:	f002 fc60 	bl	8003a04 <HAL_ADCEx_MultiModeConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 fc01 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_ADC1_Init+0x108>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001152:	2306      	movs	r3, #6
 8001154:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001156:	2302      	movs	r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_ADC1_Init+0x10c>)
 800115c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115e:	2304      	movs	r3, #4
 8001160:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_ADC1_Init+0x104>)
 800116c:	f001 fe92 	bl	8002e94 <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001176:	f000 fbeb 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_ADC1_Init+0x110>)
 800117c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800117e:	230c      	movs	r3, #12
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <MX_ADC1_Init+0x104>)
 8001188:	f001 fe84 	bl	8002e94 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001192:	f000 fbdd 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	@ 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000038 	.word	0x20000038
 80011a4:	04300002 	.word	0x04300002
 80011a8:	407f0000 	.word	0x407f0000
 80011ac:	0c900008 	.word	0x0c900008

080011b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2220      	movs	r2, #32
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 f88b 	bl	80072d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001274 <MX_ADC2_Init+0xc4>)
 80011c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <MX_ADC2_Init+0xc0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_ADC2_Init+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <MX_ADC2_Init+0xc0>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_ADC2_Init+0xc0>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001214:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <MX_ADC2_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_ADC2_Init+0xc0>)
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <MX_ADC2_Init+0xc0>)
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800122a:	4811      	ldr	r0, [pc, #68]	@ (8001270 <MX_ADC2_Init+0xc0>)
 800122c:	f001 f96e 	bl	800250c <HAL_ADC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 fb8b 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_ADC2_Init+0xc8>)
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001242:	2302      	movs	r3, #2
 8001244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <MX_ADC2_Init+0xcc>)
 8001248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124a:	2304      	movs	r3, #4
 800124c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <MX_ADC2_Init+0xc0>)
 8001258:	f001 fe1c 	bl	8002e94 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001262:	f000 fb75 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000a4 	.word	0x200000a4
 8001274:	50000100 	.word	0x50000100
 8001278:	0c900008 	.word	0x0c900008
 800127c:	407f0000 	.word	0x407f0000

08001280 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 8001286:	4a2f      	ldr	r2, [pc, #188]	@ (8001344 <MX_FDCAN1_Init+0xc4>)
 8001288:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012a2:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012bc:	220d      	movs	r2, #13
 80012be:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012da:	2201      	movs	r2, #1
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012e0:	221c      	movs	r2, #28
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80012f0:	4813      	ldr	r0, [pc, #76]	@ (8001340 <MX_FDCAN1_Init+0xc0>)
 80012f2:	f002 fd3b 	bl	8003d6c <HAL_FDCAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80012fc:	f000 fb28 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_FDCAN1_Init+0xc8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001308:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001318:	2205      	movs	r2, #5
 800131a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <MX_FDCAN1_Init+0xcc>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000110 	.word	0x20000110
 8001344:	40006400 	.word	0x40006400
 8001348:	2000086c 	.word	0x2000086c
 800134c:	20000870 	.word	0x20000870

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09c      	sub	sp, #112	@ 0x70
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001370:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2234      	movs	r2, #52	@ 0x34
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f005 ffa4 	bl	80072d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001390:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <MX_TIM1_Init+0x158>)
 8001392:	4a46      	ldr	r2, [pc, #280]	@ (80014ac <MX_TIM1_Init+0x15c>)
 8001394:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001396:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <MX_TIM1_Init+0x158>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <MX_TIM1_Init+0x158>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a2:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b0:	4b3d      	ldr	r3, [pc, #244]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013bc:	483a      	ldr	r0, [pc, #232]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013be:	f004 fc2f 	bl	8005c20 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013c8:	f000 fac2 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013d6:	4619      	mov	r1, r3
 80013d8:	4833      	ldr	r0, [pc, #204]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013da:	f005 f8a9 	bl	8006530 <HAL_TIM_ConfigClockSource>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013e4:	f000 fab4 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e8:	482f      	ldr	r0, [pc, #188]	@ (80014a8 <MX_TIM1_Init+0x158>)
 80013ea:	f004 fcdb 	bl	8005da4 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013f4:	f000 faac 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001404:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001408:	4619      	mov	r1, r3
 800140a:	4827      	ldr	r0, [pc, #156]	@ (80014a8 <MX_TIM1_Init+0x158>)
 800140c:	f005 fe10 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001416:	f000 fa9b 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	@ 0x60
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001436:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	481a      	ldr	r0, [pc, #104]	@ (80014a8 <MX_TIM1_Init+0x158>)
 8001440:	f004 ff62 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800144a:	f000 fa81 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001462:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001466:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001474:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM1_Init+0x158>)
 800148c:	f005 fe52 	bl	8007134 <HAL_TIMEx_ConfigBreakDeadTime>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001496:	f000 fa5b 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149a:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM1_Init+0x158>)
 800149c:	f000 fc3c 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 80014a0:	bf00      	nop
 80014a2:	3770      	adds	r7, #112	@ 0x70
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000174 	.word	0x20000174
 80014ac:	40012c00 	.word	0x40012c00

080014b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	@ 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <MX_TIM2_Init+0xe8>)
 80014e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <MX_TIM2_Init+0xe8>)
 80014ec:	2295      	movs	r2, #149	@ 0x95
 80014ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <MX_TIM2_Init+0xe8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <MX_TIM2_Init+0xe8>)
 80014f8:	f06f 0201 	mvn.w	r2, #1
 80014fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <MX_TIM2_Init+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <MX_TIM2_Init+0xe8>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150a:	4823      	ldr	r0, [pc, #140]	@ (8001598 <MX_TIM2_Init+0xe8>)
 800150c:	f004 fb88 	bl	8005c20 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001516:	f000 fa1b 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001524:	4619      	mov	r1, r3
 8001526:	481c      	ldr	r0, [pc, #112]	@ (8001598 <MX_TIM2_Init+0xe8>)
 8001528:	f005 f802 	bl	8006530 <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001532:	f000 fa0d 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <MX_TIM2_Init+0xe8>)
 8001538:	f004 fc34 	bl	8005da4 <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001542:	f000 fa05 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4810      	ldr	r0, [pc, #64]	@ (8001598 <MX_TIM2_Init+0xe8>)
 8001556:	f005 fd6b 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001560:	f000 f9f6 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	@ 0x60
 8001566:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM2_Init+0xe8>)
 800157c:	f004 fec4 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001586:	f000 f9e3 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800158a:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM2_Init+0xe8>)
 800158c:	f000 fbc4 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	@ 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200001c0 	.word	0x200001c0

0800159c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001634 <MX_TIM3_Init+0x98>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015c2:	223f      	movs	r2, #63	@ 0x3f
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015e2:	f004 fb1d 	bl	8005c20 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015ec:	f000 f9b0 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <MX_TIM3_Init+0x94>)
 80015fe:	f004 ff97 	bl	8006530 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001608:	f000 f9a2 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_TIM3_Init+0x94>)
 800161a:	f005 fd09 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f994 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000020c 	.word	0x2000020c
 8001634:	40000400 	.word	0x40000400

08001638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	@ 0x38
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <MX_TIM4_Init+0xe0>)
 800166c:	4a2b      	ldr	r2, [pc, #172]	@ (800171c <MX_TIM4_Init+0xe4>)
 800166e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001670:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <MX_TIM4_Init+0xe0>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <MX_TIM4_Init+0xe0>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <MX_TIM4_Init+0xe0>)
 800167e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <MX_TIM4_Init+0xe0>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <MX_TIM4_Init+0xe0>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001690:	4821      	ldr	r0, [pc, #132]	@ (8001718 <MX_TIM4_Init+0xe0>)
 8001692:	f004 fac5 	bl	8005c20 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800169c:	f000 f958 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	4619      	mov	r1, r3
 80016ac:	481a      	ldr	r0, [pc, #104]	@ (8001718 <MX_TIM4_Init+0xe0>)
 80016ae:	f004 ff3f 	bl	8006530 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80016b8:	f000 f94a 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016bc:	4816      	ldr	r0, [pc, #88]	@ (8001718 <MX_TIM4_Init+0xe0>)
 80016be:	f004 fb71 	bl	8005da4 <HAL_TIM_PWM_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80016c8:	f000 f942 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	480f      	ldr	r0, [pc, #60]	@ (8001718 <MX_TIM4_Init+0xe0>)
 80016dc:	f005 fca8 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016e6:	f000 f933 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ea:	2360      	movs	r3, #96	@ 0x60
 80016ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_TIM4_Init+0xe0>)
 8001702:	f004 fe01 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800170c:	f000 f920 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3738      	adds	r7, #56	@ 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000258 	.word	0x20000258
 800171c:	40000800 	.word	0x40000800

08001720 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_TIM6_Init+0x64>)
 8001732:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <MX_TIM6_Init+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_TIM6_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_TIM6_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_TIM6_Init+0x64>)
 8001744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001748:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_TIM6_Init+0x64>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <MX_TIM6_Init+0x64>)
 8001752:	f004 fa65 	bl	8005c20 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800175c:	f000 f8f8 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_TIM6_Init+0x64>)
 800176e:	f005 fc5f 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001778:	f000 f8ea 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002a4 	.word	0x200002a4
 8001788:	40001000 	.word	0x40001000

0800178c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_TIM7_Init+0x64>)
 800179e:	4a15      	ldr	r2, [pc, #84]	@ (80017f4 <MX_TIM7_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017be:	f004 fa2f 	bl	8005c20 <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017c8:	f000 f8c2 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_TIM7_Init+0x64>)
 80017da:	f005 fc29 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f8b4 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002f0 	.word	0x200002f0
 80017f4:	40001400 	.word	0x40001400

080017f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_TIM16_Init+0x44>)
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <MX_TIM16_Init+0x48>)
 8001800:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_TIM16_Init+0x44>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_TIM16_Init+0x44>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <MX_TIM16_Init+0x44>)
 8001810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001814:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_TIM16_Init+0x44>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_TIM16_Init+0x44>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_TIM16_Init+0x44>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_TIM16_Init+0x44>)
 800182a:	f004 f9f9 	bl	8005c20 <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001834:	f000 f88c 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000033c 	.word	0x2000033c
 8001840:	40014400 	.word	0x40014400

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	4b3a      	ldr	r3, [pc, #232]	@ (8001944 <MX_GPIO_Init+0x100>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a39      	ldr	r2, [pc, #228]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001872:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a33      	ldr	r2, [pc, #204]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_GPIO_Init+0x100>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188e:	4a2d      	ldr	r2, [pc, #180]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001896:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <MX_GPIO_Init+0x100>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MX_GPIO_Init+0x100>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <MX_GPIO_Init+0x100>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <MX_GPIO_Init+0x100>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c0:	4821      	ldr	r0, [pc, #132]	@ (8001948 <MX_GPIO_Init+0x104>)
 80018c2:	f003 f9fb 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f248 6110 	movw	r1, #34320	@ 0x8610
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d0:	f003 f9f4 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 80018d4:	2200      	movs	r2, #0
 80018d6:	f240 11f9 	movw	r1, #505	@ 0x1f9
 80018da:	481c      	ldr	r0, [pc, #112]	@ (800194c <MX_GPIO_Init+0x108>)
 80018dc:	f003 f9ee 	bl	8004cbc <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 80018e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4813      	ldr	r0, [pc, #76]	@ (8001948 <MX_GPIO_Init+0x104>)
 80018fa:	f003 f85d 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 80018fe:	f248 6310 	movw	r3, #34320	@ 0x8610
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f003 f84d 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin AnalogPower_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 800191e:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8001922:	617b      	str	r3, [r7, #20]
                          |SEL0_Pin|IN2_2_Pin|AnalogPower_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_GPIO_Init+0x108>)
 8001938:	f003 f83e 	bl	80049b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	48001800 	.word	0x48001800
 800194c:	48000400 	.word	0x48000400

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x44>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6613      	str	r3, [r2, #96]	@ 0x60
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_MspInit+0x44>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <HAL_MspInit+0x44>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001984:	6593      	str	r3, [r2, #88]	@ 0x58
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001992:	f003 fa4f 	bl	8004e34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09c      	sub	sp, #112	@ 0x70
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	2244      	movs	r2, #68	@ 0x44
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fc87 	bl	80072d8 <memset>
  if(hadc->Instance==ADC1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d2:	d13e      	bne.n	8001a52 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019de:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 ff2b 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019f0:	f7ff ffae 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019f4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a39      	ldr	r2, [pc, #228]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 80019fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019fe:	4b38      	ldr	r3, [pc, #224]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10b      	bne.n	8001a1e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin|ADC1_2_pos_Pin|ADC1_2_neg_Pin;
 8001a36:	230f      	movs	r3, #15
 8001a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4c:	f002 ffb4 	bl	80049b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a50:	e042      	b.n	8001ad8 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <HAL_ADC_MspInit+0x144>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13d      	bne.n	8001ad8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0318 	add.w	r3, r7, #24
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fee7 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001a78:	f7ff ff6a 	bl	8001950 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 8001a84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_ADC_MspInit+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_ADC_MspInit+0x140>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f002 ff70 	bl	80049b8 <HAL_GPIO_Init>
}
 8001ad8:	bf00      	nop
 8001ada:	3770      	adds	r7, #112	@ 0x70
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200008bc 	.word	0x200008bc
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	50000100 	.word	0x50000100

08001aec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09a      	sub	sp, #104	@ 0x68
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	2244      	movs	r2, #68	@ 0x44
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f005 fbe3 	bl	80072d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a24      	ldr	r2, [pc, #144]	@ (8001ba8 <HAL_FDCAN_MspInit+0xbc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d141      	bne.n	8001ba0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fe87 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001b38:	f7ff ff0a 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_FDCAN_MspInit+0xc0>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b70:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b7e:	2309      	movs	r3, #9
 8001b80:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8c:	f002 ff14 	bl	80049b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2015      	movs	r0, #21
 8001b96:	f002 f8b4 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001b9a:	2015      	movs	r0, #21
 8001b9c:	f002 f8cb 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3768      	adds	r7, #104	@ 0x68
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40006400 	.word	0x40006400
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001cfc <HAL_TIM_Base_MspInit+0x14c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bce:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bda:	e08a      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be4:	d114      	bne.n	8001c10 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be6:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	4a45      	ldr	r2, [pc, #276]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf2:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	201c      	movs	r0, #28
 8001c04:	f002 f87d 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c08:	201c      	movs	r0, #28
 8001c0a:	f002 f894 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 8001c0e:	e070      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a3b      	ldr	r2, [pc, #236]	@ (8001d04 <HAL_TIM_Base_MspInit+0x154>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d114      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1a:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	4a38      	ldr	r2, [pc, #224]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c26:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201d      	movs	r0, #29
 8001c38:	f002 f863 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c3c:	201d      	movs	r0, #29
 8001c3e:	f002 f87a 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 8001c42:	e056      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	@ (8001d08 <HAL_TIM_Base_MspInit+0x158>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d114      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	4a2b      	ldr	r2, [pc, #172]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201e      	movs	r0, #30
 8001c6c:	f002 f849 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c70:	201e      	movs	r0, #30
 8001c72:	f002 f860 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 8001c76:	e03c      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <HAL_TIM_Base_MspInit+0x15c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10c      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
}
 8001c9a:	e02a      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_TIM_Base_MspInit+0x160>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	4a15      	ldr	r2, [pc, #84]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2037      	movs	r0, #55	@ 0x37
 8001cc4:	f002 f81d 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cc8:	2037      	movs	r0, #55	@ 0x37
 8001cca:	f002 f834 	bl	8003d36 <HAL_NVIC_EnableIRQ>
}
 8001cce:	e010      	b.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d14 <HAL_TIM_Base_MspInit+0x164>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_TIM_Base_MspInit+0x150>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40001000 	.word	0x40001000
 8001d10:	40001400 	.word	0x40001400
 8001d14:	40014400 	.word	0x40014400

08001d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <HAL_TIM_MspPostInit+0xac>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d11e      	bne.n	8001d78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d64:	2306      	movs	r3, #6
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d72:	f002 fe21 	bl	80049b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d76:	e021      	b.n	8001dbc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d80:	d11c      	bne.n	8001dbc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_TIM_MspPostInit+0xb0>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db8:	f002 fdfe 	bl	80049b8 <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40021000 	.word	0x40021000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e22:	f000 f8db 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <FDCAN1_IT0_IRQHandler+0x10>)
 8001e32:	f002 fb61 	bl	80044f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000110 	.word	0x20000110

08001e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM2_IRQHandler+0x10>)
 8001e46:	f004 f90f 	bl	8006068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001c0 	.word	0x200001c0

08001e54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <TIM3_IRQHandler+0x38>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <TIM3_IRQHandler+0x38>)
 8001e62:	801a      	strh	r2, [r3, #0]
	if(millis % CAN_interval == 0){
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <TIM3_IRQHandler+0x38>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <TIM3_IRQHandler+0x3c>)
 8001e6a:	8812      	ldrh	r2, [r2, #0]
 8001e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e70:	fb01 f202 	mul.w	r2, r1, r2
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <TIM3_IRQHandler+0x2c>
		  CAN_switch_state();
 8001e7c:	f7fe fb22 	bl	80004c4 <CAN_switch_state>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e80:	4804      	ldr	r0, [pc, #16]	@ (8001e94 <TIM3_IRQHandler+0x40>)
 8001e82:	f004 f8f1 	bl	8006068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000858 	.word	0x20000858
 8001e90:	2000086e 	.word	0x2000086e
 8001e94:	2000020c 	.word	0x2000020c

08001e98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM4_IRQHandler+0x10>)
 8001e9e:	f004 f8e3 	bl	8006068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000258 	.word	0x20000258

08001eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <TIM7_IRQHandler+0x10>)
 8001eb2:	f004 f8d9 	bl	8006068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200002f0 	.word	0x200002f0

08001ec0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ee6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eea:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eec:	4a0e      	ldr	r2, [pc, #56]	@ (8001f28 <LoopForever+0xe>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f00:	4c0b      	ldr	r4, [pc, #44]	@ (8001f30 <LoopForever+0x16>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f0e:	f7ff ffd7 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f005 f9e9 	bl	80072e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff f81f 	bl	8000f58 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   r0, =_estack
 8001f1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f28:	08007370 	.word	0x08007370
  ldr r2, =_sbss
 8001f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f30:	200008c4 	.word	0x200008c4

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>

08001f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f001 fed3 	bl	8003cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	200f      	movs	r0, #15
 8001f48:	f000 f80e 	bl	8001f68 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e001      	b.n	8001f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f58:	f7ff fd00 	bl	800195c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]

}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_InitTick+0x68>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d022      	beq.n	8001fc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_InitTick+0x6c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_InitTick+0x68>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fede 	bl	8003d52 <HAL_SYSTICK_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d809      	bhi.n	8001fb6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001faa:	f001 feaa 	bl	8003d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_InitTick+0x70>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e007      	b.n	8001fc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e004      	b.n	8001fc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e001      	b.n	8001fc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	200008c0 	.word	0x200008c0
 8001ffc:	20000008 	.word	0x20000008

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200008c0 	.word	0x200008c0

08002018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3360      	adds	r3, #96	@ 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <LL_ADC_SetOffset+0x44>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	03fff000 	.word	0x03fff000

080020c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3360      	adds	r3, #96	@ 0x60
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3360      	adds	r3, #96	@ 0x60
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800212a:	b480      	push	{r7}
 800212c:	b087      	sub	sp, #28
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3360      	adds	r3, #96	@ 0x60
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	431a      	orrs	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3360      	adds	r3, #96	@ 0x60
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b087      	sub	sp, #28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3330      	adds	r3, #48	@ 0x30
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	4413      	add	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	211f      	movs	r1, #31
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 011f 	and.w	r1, r3, #31
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800223a:	b480      	push	{r7}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3314      	adds	r3, #20
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0e5b      	lsrs	r3, r3, #25
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0d1b      	lsrs	r3, r3, #20
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2107      	movs	r1, #7
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0d1b      	lsrs	r3, r3, #20
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	431a      	orrs	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0318 	and.w	r3, r3, #24
 80022b2:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022b4:	40d9      	lsrs	r1, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	400b      	ands	r3, r1
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	0007ffff 	.word	0x0007ffff

080022d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6093      	str	r3, [r2, #8]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002348:	d101      	bne.n	800234e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800236c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002370:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002398:	d101      	bne.n	800239e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e8:	f043 0202 	orr.w	r2, r3, #2
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_ADC_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b02      	cmp	r3, #2
 8002434:	d101      	bne.n	800243a <LL_ADC_IsDisableOngoing+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsDisableOngoing+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d101      	bne.n	80024b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d101      	bne.n	80024fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e167      	b.n	80027f6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fa35 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fef1 	bl	8002334 <LL_ADC_IsDeepPowerDownEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fed7 	bl	8002310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff0c 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fef0 	bl	800235c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800257c:	4ba0      	ldr	r3, [pc, #640]	@ (8002800 <HAL_ADC_Init+0x2f4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	4aa0      	ldr	r2, [pc, #640]	@ (8002804 <HAL_ADC_Init+0x2f8>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002590:	e002      	b.n	8002598 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b01      	subs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff feee 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff62 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 80025d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8100 	bne.w	80027e4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80fc 	bne.w	80027e4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fefb 	bl	80023fc <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800260c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002610:	f7ff fef4 	bl	80023fc <LL_ADC_IsEnabled>
 8002614:	4604      	mov	r4, r0
 8002616:	487c      	ldr	r0, [pc, #496]	@ (8002808 <HAL_ADC_Init+0x2fc>)
 8002618:	f7ff fef0 	bl	80023fc <LL_ADC_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	4323      	orrs	r3, r4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	4878      	ldr	r0, [pc, #480]	@ (800280c <HAL_ADC_Init+0x300>)
 800262c:	f7ff fcf4 	bl	8002018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7f5b      	ldrb	r3, [r3, #29]
 8002634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800263a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800265a:	2b01      	cmp	r3, #1
 800265c:	d106      	bne.n	800266c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	045b      	lsls	r3, r3, #17
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	4b60      	ldr	r3, [pc, #384]	@ (8002810 <HAL_ADC_Init+0x304>)
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	430b      	orrs	r3, r1
 800269a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff15 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 80026bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d16d      	bne.n	80027a0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d16a      	bne.n	80027a0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026e6:	f023 0302 	bic.w	r3, r3, #2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800270a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002714:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6911      	ldr	r1, [r2, #16]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	430b      	orrs	r3, r1
 8002726:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800272a:	e013      	b.n	8002754 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800273a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800274c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002750:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d118      	bne.n	8002790 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002780:	430a      	orrs	r2, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	e007      	b.n	80027a0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f023 010f 	bic.w	r1, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c0:	e007      	b.n	80027d2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 020f 	bic.w	r2, r2, #15
 80027d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d6:	f023 0303 	bic.w	r3, r3, #3
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027e2:	e007      	b.n	80027f4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	@ 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd90      	pop	{r4, r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000000 	.word	0x20000000
 8002804:	053e2d63 	.word	0x053e2d63
 8002808:	50000100 	.word	0x50000100
 800280c:	50000300 	.word	0x50000300
 8002810:	fff04007 	.word	0xfff04007

08002814 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800281c:	4859      	ldr	r0, [pc, #356]	@ (8002984 <HAL_ADC_Start+0x170>)
 800281e:	f7ff fd5b 	bl	80022d8 <LL_ADC_GetMultimode>
 8002822:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe35 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 809f 	bne.w	8002974 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADC_Start+0x30>
 8002840:	2302      	movs	r3, #2
 8002842:	e09a      	b.n	800297a <HAL_ADC_Start+0x166>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 ffcd 	bl	80037ec <ADC_Enable>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 8086 	bne.w	800296a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a44      	ldr	r2, [pc, #272]	@ (8002988 <HAL_ADC_Start+0x174>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d002      	beq.n	8002882 <HAL_ADC_Start+0x6e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e001      	b.n	8002886 <HAL_ADC_Start+0x72>
 8002882:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4293      	cmp	r3, r2
 800288c:	d002      	beq.n	8002894 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b2:	f023 0206 	bic.w	r2, r3, #6
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	221c      	movs	r2, #28
 80028c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <HAL_ADC_Start+0x174>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Start+0xce>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e001      	b.n	80028e6 <HAL_ADC_Start+0xd2>
 80028e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d008      	beq.n	8002900 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d002      	beq.n	8002900 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	d114      	bne.n	800292a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002916:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fd90 	bl	8002448 <LL_ADC_REG_StartConversion>
 8002928:	e026      	b.n	8002978 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <HAL_ADC_Start+0x174>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d002      	beq.n	8002946 <HAL_ADC_Start+0x132>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	e001      	b.n	800294a <HAL_ADC_Start+0x136>
 8002946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800294a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00f      	beq.n	8002978 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002960:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002968:	e006      	b.n	8002978 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002972:	e001      	b.n	8002978 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	50000300 	.word	0x50000300
 8002988:	50000100 	.word	0x50000100

0800298c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Stop+0x16>
 800299e:	2302      	movs	r3, #2
 80029a0:	e023      	b.n	80029ea <HAL_ADC_Stop+0x5e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80029aa:	2103      	movs	r1, #3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fe61 	bl	8003674 <ADC_ConversionStop>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d111      	bne.n	80029e0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 ff9b 	bl	80038f8 <ADC_Disable>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	4867      	ldr	r0, [pc, #412]	@ (8002b9c <HAL_ADC_PollForConversion+0x1a8>)
 8002a00:	f7ff fc6a 	bl	80022d8 <LL_ADC_GetMultimode>
 8002a04:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e02a      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d002      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0a6      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a44:	2304      	movs	r3, #4
 8002a46:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a48:	e00f      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a4a:	4854      	ldr	r0, [pc, #336]	@ (8002b9c <HAL_ADC_PollForConversion+0x1a8>)
 8002a4c:	f7ff fc52 	bl	80022f4 <LL_ADC_GetMultiDMATransfer>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e095      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a66:	2304      	movs	r3, #4
 8002a68:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a6a:	f7ff fac9 	bl	8002000 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a70:	e021      	b.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d01d      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a7a:	f7ff fac1 	bl	8002000 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <HAL_ADC_PollForConversion+0x9c>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d112      	bne.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e06d      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0d6      	beq.n	8002a72 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fb71 	bl	80021bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7f5b      	ldrb	r3, [r3, #29]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d118      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d111      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	@ (8002ba0 <HAL_ADC_PollForConversion+0x1ac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d002      	beq.n	8002b2a <HAL_ADC_PollForConversion+0x136>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e001      	b.n	8002b2e <HAL_ADC_PollForConversion+0x13a>
 8002b2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d008      	beq.n	8002b48 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d002      	beq.n	8002b48 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b09      	cmp	r3, #9
 8002b46:	d104      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e00d      	b.n	8002b6e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <HAL_ADC_PollForConversion+0x1ac>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_PollForConversion+0x16e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e001      	b.n	8002b66 <HAL_ADC_PollForConversion+0x172>
 8002b62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b66:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d104      	bne.n	8002b7e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e008      	b.n	8002b90 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	50000300 	.word	0x50000300
 8002ba0:	50000100 	.word	0x50000100

08002ba4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bac:	4893      	ldr	r0, [pc, #588]	@ (8002dfc <HAL_ADC_Start_IT+0x258>)
 8002bae:	f7ff fb93 	bl	80022d8 <LL_ADC_GetMultimode>
 8002bb2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fc6d 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 8113 	bne.w	8002dec <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_Start_IT+0x30>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e10e      	b.n	8002df2 <HAL_ADC_Start_IT+0x24e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fe05 	bl	80037ec <ADC_Enable>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 80fa 	bne.w	8002de2 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	@ (8002e00 <HAL_ADC_Start_IT+0x25c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d002      	beq.n	8002c12 <HAL_ADC_Start_IT+0x6e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	e001      	b.n	8002c16 <HAL_ADC_Start_IT+0x72>
 8002c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d002      	beq.n	8002c24 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	f023 0206 	bic.w	r2, r3, #6
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	221c      	movs	r2, #28
 8002c56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 021c 	bic.w	r2, r2, #28
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d108      	bne.n	8002c8a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0208 	orr.w	r2, r2, #8
 8002c86:	605a      	str	r2, [r3, #4]
          break;
 8002c88:	e008      	b.n	8002c9c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0204 	orr.w	r2, r2, #4
 8002c98:	605a      	str	r2, [r3, #4]
          break;
 8002c9a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0210 	orr.w	r2, r2, #16
 8002cb2:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	@ (8002e00 <HAL_ADC_Start_IT+0x25c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <HAL_ADC_Start_IT+0x120>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e001      	b.n	8002cc8 <HAL_ADC_Start_IT+0x124>
 8002cc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d008      	beq.n	8002ce2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d002      	beq.n	8002ce2 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	d13a      	bne.n	8002d58 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02d      	beq.n	8002d4c <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cf8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d110      	bne.n	8002d2a <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0220 	bic.w	r2, r2, #32
 8002d16:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d26:	605a      	str	r2, [r3, #4]
              break;
 8002d28:	e010      	b.n	8002d4c <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d38:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	605a      	str	r2, [r3, #4]
              break;
 8002d4a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fb79 	bl	8002448 <LL_ADC_REG_StartConversion>
 8002d56:	e04b      	b.n	8002df0 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a25      	ldr	r2, [pc, #148]	@ (8002e00 <HAL_ADC_Start_IT+0x25c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d002      	beq.n	8002d74 <HAL_ADC_Start_IT+0x1d0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e001      	b.n	8002d78 <HAL_ADC_Start_IT+0x1d4>
 8002d74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d78:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d034      	beq.n	8002df0 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d110      	bne.n	8002dc0 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0220 	bic.w	r2, r2, #32
 8002dac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dbc:	605a      	str	r2, [r3, #4]
              break;
 8002dbe:	e017      	b.n	8002df0 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	605a      	str	r2, [r3, #4]
              break;
 8002de0:	e006      	b.n	8002df0 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002dea:	e001      	b.n	8002df0 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	50000100 	.word	0x50000100

08002e04 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Stop_IT+0x16>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e02b      	b.n	8002e72 <HAL_ADC_Stop_IT+0x6e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e22:	2103      	movs	r1, #3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fc25 	bl	8003674 <ADC_ConversionStop>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d119      	bne.n	8002e68 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 021c 	bic.w	r2, r2, #28
 8002e42:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fd57 	bl	80038f8 <ADC_Disable>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b0b6      	sub	sp, #216	@ 0xd8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x22>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e3c8      	b.n	8003648 <HAL_ADC_ConfigChannel+0x7b4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fae8 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 83ad 	bne.w	800362a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f7ff f980 	bl	80021e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fad6 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8002eec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff faf6 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 8002efa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002efe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 81d9 	bne.w	80032ba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 81d4 	bne.w	80032ba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f1a:	d10f      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7ff f987 	bl	800223a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f92e 	bl	8002196 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f3a:	e00e      	b.n	8002f5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f7ff f976 	bl	800223a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f91e 	bl	8002196 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d022      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6919      	ldr	r1, [r3, #16]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f8c:	f7ff f878 	bl	8002080 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6919      	ldr	r1, [r3, #16]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f7ff f8c4 	bl	800212a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x124>
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x126>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7ff f8d0 	bl	8002160 <LL_ADC_SetOffsetSaturation>
 8002fc0:	e17b      	b.n	80032ba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f87d 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x15a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f872 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	e01e      	b.n	800302c <HAL_ADC_ConfigChannel+0x198>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f867 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e004      	b.n	800302a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x1b0>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	e018      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1e2>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800306c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f836 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f81a 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x220>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f80f 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 021f 	and.w	r2, r3, #31
 80030b2:	e01e      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x25e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f804 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80030e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_ConfigChannel+0x276>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	e018      	b.n	800313c <HAL_ADC_ConfigChannel+0x2a8>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800311e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e004      	b.n	800313c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003132:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800313c:	429a      	cmp	r2, r3
 800313e:	d106      	bne.n	800314e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe ffd3 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe ffb7 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_ADC_ConfigChannel+0x2e6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe ffac 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003170:	4603      	mov	r3, r0
 8003172:	0e9b      	lsrs	r3, r3, #26
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	e01e      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x324>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe ffa1 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800319c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80031a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80031ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x33c>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	e016      	b.n	80031fe <HAL_ADC_ConfigChannel+0x36a>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80031e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e004      	b.n	80031fe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80031f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031fe:	429a      	cmp	r2, r3
 8003200:	d106      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	2102      	movs	r1, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe ff72 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2103      	movs	r1, #3
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe ff56 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_ADC_ConfigChannel+0x3a8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2103      	movs	r1, #3
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe ff4b 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	f003 021f 	and.w	r2, r3, #31
 800323a:	e017      	b.n	800326c <HAL_ADC_ConfigChannel+0x3d8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2103      	movs	r1, #3
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ff40 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003256:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3f0>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	e011      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x414>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003294:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80032a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2103      	movs	r1, #3
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe ff1d 	bl	80020f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f89c 	bl	80023fc <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 8140 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	461a      	mov	r2, r3
 80032da:	f7fe ffd9 	bl	8002290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4a8f      	ldr	r2, [pc, #572]	@ (8003520 <HAL_ADC_ConfigChannel+0x68c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	f040 8131 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x47e>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	3301      	adds	r3, #1
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2b09      	cmp	r3, #9
 8003308:	bf94      	ite	ls
 800330a:	2301      	movls	r3, #1
 800330c:	2300      	movhi	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	e019      	b.n	8003346 <HAL_ADC_ConfigChannel+0x4b2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003322:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e003      	b.n	8003336 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800332e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2b09      	cmp	r3, #9
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003346:	2b00      	cmp	r3, #0
 8003348:	d079      	beq.n	800343e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x4d2>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	3301      	adds	r3, #1
 800335e:	069b      	lsls	r3, r3, #26
 8003360:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003364:	e015      	b.n	8003392 <HAL_ADC_ConfigChannel+0x4fe>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003376:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	069b      	lsls	r3, r3, #26
 800338e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x51e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	e017      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x54e>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80033ca:	2320      	movs	r3, #32
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80033ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	ea42 0103 	orr.w	r1, r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x574>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 021f 	and.w	r2, r3, #31
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	051b      	lsls	r3, r3, #20
 8003406:	e018      	b.n	800343a <HAL_ADC_ConfigChannel+0x5a6>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800341a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f003 021f 	and.w	r2, r3, #31
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343a:	430b      	orrs	r3, r1
 800343c:	e081      	b.n	8003542 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_ADC_ConfigChannel+0x5c6>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0e9b      	lsrs	r3, r3, #26
 8003450:	3301      	adds	r3, #1
 8003452:	069b      	lsls	r3, r3, #26
 8003454:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003458:	e015      	b.n	8003486 <HAL_ADC_ConfigChannel+0x5f2>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	069b      	lsls	r3, r3, #26
 8003482:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x612>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	3301      	adds	r3, #1
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	e017      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x642>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	61fb      	str	r3, [r7, #28]
  return result;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x66e>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 021f 	and.w	r2, r3, #31
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	3b1e      	subs	r3, #30
 80034fa:	051b      	lsls	r3, r3, #20
 80034fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003500:	e01e      	b.n	8003540 <HAL_ADC_ConfigChannel+0x6ac>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	613b      	str	r3, [r7, #16]
  return result;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e006      	b.n	800352c <HAL_ADC_ConfigChannel+0x698>
 800351e:	bf00      	nop
 8003520:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 021f 	and.w	r2, r3, #31
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	3b1e      	subs	r3, #30
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003546:	4619      	mov	r1, r3
 8003548:	f7fe fe77 	bl	800223a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b3f      	ldr	r3, [pc, #252]	@ (8003650 <HAL_ADC_ConfigChannel+0x7bc>)
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d071      	beq.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003558:	483e      	ldr	r0, [pc, #248]	@ (8003654 <HAL_ADC_ConfigChannel+0x7c0>)
 800355a:	f7fe fd83 	bl	8002064 <LL_ADC_GetCommonPathInternalCh>
 800355e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a3c      	ldr	r2, [pc, #240]	@ (8003658 <HAL_ADC_ConfigChannel+0x7c4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x6e2>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a3a      	ldr	r2, [pc, #232]	@ (800365c <HAL_ADC_ConfigChannel+0x7c8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d127      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800357a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d121      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800358a:	d157      	bne.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003594:	4619      	mov	r1, r3
 8003596:	482f      	ldr	r0, [pc, #188]	@ (8003654 <HAL_ADC_ConfigChannel+0x7c0>)
 8003598:	f7fe fd51 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800359c:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <HAL_ADC_ConfigChannel+0x7cc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	4a30      	ldr	r2, [pc, #192]	@ (8003664 <HAL_ADC_ConfigChannel+0x7d0>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035b6:	e002      	b.n	80035be <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f9      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c4:	e03a      	b.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a27      	ldr	r2, [pc, #156]	@ (8003668 <HAL_ADC_ConfigChannel+0x7d4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d113      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_ADC_ConfigChannel+0x7d8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02a      	beq.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	4619      	mov	r1, r3
 80035f0:	4818      	ldr	r0, [pc, #96]	@ (8003654 <HAL_ADC_ConfigChannel+0x7c0>)
 80035f2:	f7fe fd24 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f6:	e021      	b.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <HAL_ADC_ConfigChannel+0x7dc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d11c      	bne.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_ADC_ConfigChannel+0x7d8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d011      	beq.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800361c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003620:	4619      	mov	r1, r3
 8003622:	480c      	ldr	r0, [pc, #48]	@ (8003654 <HAL_ADC_ConfigChannel+0x7c0>)
 8003624:	f7fe fd0b 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
 8003628:	e008      	b.n	800363c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003644:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003648:	4618      	mov	r0, r3
 800364a:	37d8      	adds	r7, #216	@ 0xd8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	80080000 	.word	0x80080000
 8003654:	50000300 	.word	0x50000300
 8003658:	c3210000 	.word	0xc3210000
 800365c:	90c00010 	.word	0x90c00010
 8003660:	20000000 	.word	0x20000000
 8003664:	053e2d63 	.word	0x053e2d63
 8003668:	c7520000 	.word	0xc7520000
 800366c:	50000100 	.word	0x50000100
 8003670:	cb840000 	.word	0xcb840000

08003674 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe ff04 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8003690:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe ff25 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 800369c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8098 	beq.w	80037dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02a      	beq.n	8003710 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7f5b      	ldrb	r3, [r3, #29]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d126      	bne.n	8003710 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7f1b      	ldrb	r3, [r3, #28]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d122      	bne.n	8003710 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036ce:	e014      	b.n	80036fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4a45      	ldr	r2, [pc, #276]	@ (80037e8 <ADC_ConversionStop+0x174>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d90d      	bls.n	80036f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f043 0210 	orr.w	r2, r3, #16
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e074      	b.n	80037de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d1e3      	bne.n	80036d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2240      	movs	r2, #64	@ 0x40
 800370e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d014      	beq.n	8003740 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe febc 	bl	8002498 <LL_ADC_REG_IsConversionOngoing>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fe79 	bl	8002422 <LL_ADC_IsDisableOngoing>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fe98 	bl	8002470 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d014      	beq.n	8003770 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fecb 	bl	80024e6 <LL_ADC_INJ_IsConversionOngoing>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fe61 	bl	8002422 <LL_ADC_IsDisableOngoing>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fea7 	bl	80024be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d005      	beq.n	8003782 <ADC_ConversionStop+0x10e>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d105      	bne.n	8003788 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800377c:	230c      	movs	r3, #12
 800377e:	617b      	str	r3, [r7, #20]
        break;
 8003780:	e005      	b.n	800378e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003782:	2308      	movs	r3, #8
 8003784:	617b      	str	r3, [r7, #20]
        break;
 8003786:	e002      	b.n	800378e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003788:	2304      	movs	r3, #4
 800378a:	617b      	str	r3, [r7, #20]
        break;
 800378c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800378e:	f7fe fc37 	bl	8002000 <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003794:	e01b      	b.n	80037ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003796:	f7fe fc33 	bl	8002000 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d914      	bls.n	80037ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f043 0210 	orr.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1dc      	bne.n	8003796 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	a33fffff 	.word	0xa33fffff

080037ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fe fdfd 	bl	80023fc <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d169      	bne.n	80038dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <ADC_Enable+0xfc>)
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	f043 0210 	orr.w	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e055      	b.n	80038de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fdb8 	bl	80023ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800383c:	482b      	ldr	r0, [pc, #172]	@ (80038ec <ADC_Enable+0x100>)
 800383e:	f7fe fc11 	bl	8002064 <LL_ADC_GetCommonPathInternalCh>
 8003842:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800384c:	4b28      	ldr	r3, [pc, #160]	@ (80038f0 <ADC_Enable+0x104>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	4a28      	ldr	r2, [pc, #160]	@ (80038f4 <ADC_Enable+0x108>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003866:	e002      	b.n	800386e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	3b01      	subs	r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003874:	f7fe fbc4 	bl	8002000 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800387a:	e028      	b.n	80038ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fdbb 	bl	80023fc <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fd8b 	bl	80023ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003896:	f7fe fbb3 	bl	8002000 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d914      	bls.n	80038ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d00d      	beq.n	80038ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e007      	b.n	80038de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d1cf      	bne.n	800387c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	8000003f 	.word	0x8000003f
 80038ec:	50000300 	.word	0x50000300
 80038f0:	20000000 	.word	0x20000000
 80038f4:	053e2d63 	.word	0x053e2d63

080038f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fd8c 	bl	8002422 <LL_ADC_IsDisableOngoing>
 800390a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fd73 	bl	80023fc <LL_ADC_IsEnabled>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d047      	beq.n	80039ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d144      	bne.n	80039ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030d 	and.w	r3, r3, #13
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10c      	bne.n	800394a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fd4d 	bl	80023d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2203      	movs	r2, #3
 8003940:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003942:	f7fe fb5d 	bl	8002000 <HAL_GetTick>
 8003946:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003948:	e029      	b.n	800399e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e023      	b.n	80039ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003966:	f7fe fb4b 	bl	8002000 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d914      	bls.n	800399e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003986:	f043 0210 	orr.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e007      	b.n	80039ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1dc      	bne.n	8003966 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <LL_ADC_IsEnabled>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <LL_ADC_IsEnabled+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_ADC_IsEnabled+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_ADC_REG_IsConversionOngoing>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d101      	bne.n	80039f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b0a1      	sub	sp, #132	@ 0x84
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e08b      	b.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a3a:	d102      	bne.n	8003a42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a3c:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	e001      	b.n	8003a46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e06a      	b.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ffb8 	bl	80039dc <LL_ADC_REG_IsConversionOngoing>
 8003a6c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ffb2 	bl	80039dc <LL_ADC_REG_IsConversionOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d14c      	bne.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d149      	bne.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a84:	4b30      	ldr	r3, [pc, #192]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d028      	beq.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003aa2:	035b      	lsls	r3, r3, #13
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ab0:	f7ff ff81 	bl	80039b6 <LL_ADC_IsEnabled>
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4823      	ldr	r0, [pc, #140]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ab8:	f7ff ff7d 	bl	80039b6 <LL_ADC_IsEnabled>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4323      	orrs	r3, r4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d133      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003acc:	f023 030f 	bic.w	r3, r3, #15
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	6811      	ldr	r1, [r2, #0]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	6892      	ldr	r2, [r2, #8]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ade:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae0:	e024      	b.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aee:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003af2:	f7ff ff60 	bl	80039b6 <LL_ADC_IsEnabled>
 8003af6:	4604      	mov	r4, r0
 8003af8:	4812      	ldr	r0, [pc, #72]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003afa:	f7ff ff5c 	bl	80039b6 <LL_ADC_IsEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4323      	orrs	r3, r4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d112      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b16:	e009      	b.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b2a:	e000      	b.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3784      	adds	r7, #132	@ 0x84
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	50000100 	.word	0x50000100
 8003b48:	50000300 	.word	0x50000300

08003b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <__NVIC_SetPriorityGrouping+0x44>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7e:	4a04      	ldr	r2, [pc, #16]	@ (8003b90 <__NVIC_SetPriorityGrouping+0x44>)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	60d3      	str	r3, [r2, #12]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b98:	4b04      	ldr	r3, [pc, #16]	@ (8003bac <__NVIC_GetPriorityGrouping+0x18>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	db0b      	blt.n	8003bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	f003 021f 	and.w	r2, r3, #31
 8003bc8:	4907      	ldr	r1, [pc, #28]	@ (8003be8 <__NVIC_EnableIRQ+0x38>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000e100 	.word	0xe000e100

08003bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db0a      	blt.n	8003c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	490c      	ldr	r1, [pc, #48]	@ (8003c38 <__NVIC_SetPriority+0x4c>)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c14:	e00a      	b.n	8003c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4908      	ldr	r1, [pc, #32]	@ (8003c3c <__NVIC_SetPriority+0x50>)
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	3b04      	subs	r3, #4
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	440b      	add	r3, r1
 8003c2a:	761a      	strb	r2, [r3, #24]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000e100 	.word	0xe000e100
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	@ 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f1c3 0307 	rsb	r3, r3, #7
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	bf28      	it	cs
 8003c5e:	2304      	movcs	r3, #4
 8003c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3304      	adds	r3, #4
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d902      	bls.n	8003c70 <NVIC_EncodePriority+0x30>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3b03      	subs	r3, #3
 8003c6e:	e000      	b.n	8003c72 <NVIC_EncodePriority+0x32>
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	401a      	ands	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c88:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	4313      	orrs	r3, r2
         );
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3724      	adds	r7, #36	@ 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb8:	d301      	bcc.n	8003cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00f      	b.n	8003cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <SysTick_Config+0x40>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f7ff ff8e 	bl	8003bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd0:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <SysTick_Config+0x40>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <SysTick_Config+0x40>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e000e010 	.word	0xe000e010

08003cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff29 	bl	8003b4c <__NVIC_SetPriorityGrouping>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d10:	f7ff ff40 	bl	8003b94 <__NVIC_GetPriorityGrouping>
 8003d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff90 	bl	8003c40 <NVIC_EncodePriority>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff5f 	bl	8003bec <__NVIC_SetPriority>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff33 	bl	8003bb0 <__NVIC_EnableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffa4 	bl	8003ca8 <SysTick_Config>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e147      	b.n	800400e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd feaa 	bl	8001aec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7fe f92a 	bl	8002000 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003dae:	e012      	b.n	8003dd6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003db0:	f7fe f926 	bl	8002000 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b0a      	cmp	r3, #10
 8003dbc:	d90b      	bls.n	8003dd6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e11b      	b.n	800400e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d0e5      	beq.n	8003db0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df4:	f7fe f904 	bl	8002000 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003dfa:	e012      	b.n	8003e22 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003dfc:	f7fe f900 	bl	8002000 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b0a      	cmp	r3, #10
 8003e08:	d90b      	bls.n	8003e22 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0f5      	b.n	800400e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0e5      	beq.n	8003dfc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0202 	orr.w	r2, r2, #2
 8003e3e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a74      	ldr	r2, [pc, #464]	@ (8004018 <HAL_FDCAN_Init+0x2ac>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d103      	bne.n	8003e52 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003e4a:	4a74      	ldr	r2, [pc, #464]	@ (800401c <HAL_FDCAN_Init+0x2b0>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7c1b      	ldrb	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d108      	bne.n	8003e6c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e68:	619a      	str	r2, [r3, #24]
 8003e6a:	e007      	b.n	8003e7c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7c5b      	ldrb	r3, [r3, #17]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d108      	bne.n	8003e96 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e92:	619a      	str	r2, [r3, #24]
 8003e94:	e007      	b.n	8003ea6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ea4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7c9b      	ldrb	r3, [r3, #18]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ebc:	619a      	str	r2, [r3, #24]
 8003ebe:	e007      	b.n	8003ed0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ece:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003ef4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0210 	bic.w	r2, r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	619a      	str	r2, [r3, #24]
 8003f1e:	e02c      	b.n	8003f7a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d028      	beq.n	8003f7a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d01c      	beq.n	8003f6a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f3e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0210 	orr.w	r2, r2, #16
 8003f4e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d110      	bne.n	8003f7a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0220 	orr.w	r2, r2, #32
 8003f66:	619a      	str	r2, [r3, #24]
 8003f68:	e007      	b.n	8003f7a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0220 	orr.w	r2, r2, #32
 8003f78:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f8a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f92:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003fa2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fa4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fae:	d115      	bne.n	8003fdc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fbe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003fd8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003fda:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fc0e 	bl	8004814 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40006400 	.word	0x40006400
 800401c:	40006500 	.word	0x40006500

08004020 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d110      	bne.n	8004056 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e006      	b.n	8004064 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
  }
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d12c      	bne.n	80040e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e023      	b.n	80040f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fbfe 	bl	80048c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	fa01 f202 	lsl.w	r2, r1, r2
 80040d0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80040d4:	2201      	movs	r2, #1
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	409a      	lsls	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e006      	b.n	80040f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e6:	f043 0208 	orr.w	r2, r3, #8
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b08b      	sub	sp, #44	@ 0x2c
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004110:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004112:	7efb      	ldrb	r3, [r7, #27]
 8004114:	2b02      	cmp	r3, #2
 8004116:	f040 80e8 	bne.w	80042ea <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b40      	cmp	r3, #64	@ 0x40
 800411e:	d137      	bne.n	8004190 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0db      	b.n	80042f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10a      	bne.n	8004168 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	0a5b      	lsrs	r3, r3, #9
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004164:	2301      	movs	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
 800418e:	e036      	b.n	80041fe <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a3      	b.n	80042f8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10a      	bne.n	80041d8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e005      	b.n	800422e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	3304      	adds	r3, #4
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0fda      	lsrs	r2, r3, #31
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	3304      	adds	r3, #4
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	e00a      	b.n	80042ba <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	441a      	add	r2, r3
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	440b      	add	r3, r1
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	3301      	adds	r3, #1
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <HAL_FDCAN_GetRxMessage+0x20c>)
 80042c0:	5cd3      	ldrb	r3, [r2, r3]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d3ec      	bcc.n	80042a4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b40      	cmp	r3, #64	@ 0x40
 80042ce:	d105      	bne.n	80042dc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80042da:	e004      	b.n	80042e6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e006      	b.n	80042f8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	372c      	adds	r7, #44	@ 0x2c
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	08007358 	.word	0x08007358

08004308 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800433e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d003      	beq.n	800434e <HAL_FDCAN_ActivateNotification+0x22>
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	2b02      	cmp	r3, #2
 800434a:	f040 80c8 	bne.w	80044de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03b      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d031      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d027      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01d      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d13b      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d131      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d127      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11d      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0202 	orr.w	r2, r2, #2
 800448c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e006      	b.n	80044ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	@ 0x30
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004506:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800450a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004514:	4013      	ands	r3, r2
 8004516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452c:	4013      	ands	r3, r2
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004544:	4013      	ands	r3, r2
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004552:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	4013      	ands	r3, r2
 800455e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004566:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800456a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	4013      	ands	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004586:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2240      	movs	r2, #64	@ 0x40
 80045a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f916 	bl	80047d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d019      	beq.n	80045e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d014      	beq.n	80045e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8d8 	bl	8004798 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80045e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80045f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8a2 	bl	8004742 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800460a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800460c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fb ff10 	bl	8000434 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f897 	bl	8004758 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004646:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f890 	bl	800476e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d018      	beq.n	800468a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d013      	beq.n	800468a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800466a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f87c 	bl	8004782 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f880 	bl	80047ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80046ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f878 	bl	80047c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00f      	beq.n	80046fc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800470a:	69f9      	ldr	r1, [r7, #28]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f876 	bl	80047fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f858 	bl	80047ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800473a:	bf00      	nop
 800473c:	3730      	adds	r7, #48	@ 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800481e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004836:	041a      	lsls	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004854:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	061a      	lsls	r2, r3, #24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e005      	b.n	80048a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3304      	adds	r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3f3      	bcc.n	8004896 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	4000a400 	.word	0x4000a400

080048c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	@ 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80048de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e00a      	b.n	8004902 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80048f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80048fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80048fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004900:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800490c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004912:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004918:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	3304      	adds	r3, #4
 8004940:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	3304      	adds	r3, #4
 800494c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e020      	b.n	8004996 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3303      	adds	r3, #3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3302      	adds	r3, #2
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	440b      	add	r3, r1
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800496c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	440b      	add	r3, r1
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800497a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	440a      	add	r2, r1
 8004982:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004984:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3304      	adds	r3, #4
 800498e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3304      	adds	r3, #4
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a06      	ldr	r2, [pc, #24]	@ (80049b4 <FDCAN_CopyMessageToRAM+0xf4>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	461a      	mov	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d3d6      	bcc.n	8004954 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	3724      	adds	r7, #36	@ 0x24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	08007358 	.word	0x08007358

080049b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049c6:	e15a      	b.n	8004c7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2101      	movs	r1, #1
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 814c 	beq.w	8004c78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d005      	beq.n	80049f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d130      	bne.n	8004a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2203      	movs	r2, #3
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a2e:	2201      	movs	r2, #1
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f003 0201 	and.w	r2, r3, #1
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d017      	beq.n	8004a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2203      	movs	r2, #3
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d123      	bne.n	8004aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	08da      	lsrs	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3208      	adds	r2, #8
 8004aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3208      	adds	r2, #8
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2203      	movs	r2, #3
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0203 	and.w	r2, r3, #3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a6 	beq.w	8004c78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004c9c <HAL_GPIO_Init+0x2e4>)
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b30:	4a5a      	ldr	r2, [pc, #360]	@ (8004c9c <HAL_GPIO_Init+0x2e4>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b38:	4b58      	ldr	r3, [pc, #352]	@ (8004c9c <HAL_GPIO_Init+0x2e4>)
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b44:	4a56      	ldr	r2, [pc, #344]	@ (8004ca0 <HAL_GPIO_Init+0x2e8>)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b6e:	d01f      	beq.n	8004bb0 <HAL_GPIO_Init+0x1f8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a4c      	ldr	r2, [pc, #304]	@ (8004ca4 <HAL_GPIO_Init+0x2ec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d019      	beq.n	8004bac <HAL_GPIO_Init+0x1f4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca8 <HAL_GPIO_Init+0x2f0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_GPIO_Init+0x1f0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a4a      	ldr	r2, [pc, #296]	@ (8004cac <HAL_GPIO_Init+0x2f4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00d      	beq.n	8004ba4 <HAL_GPIO_Init+0x1ec>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a49      	ldr	r2, [pc, #292]	@ (8004cb0 <HAL_GPIO_Init+0x2f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_GPIO_Init+0x1e8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a48      	ldr	r2, [pc, #288]	@ (8004cb4 <HAL_GPIO_Init+0x2fc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_GPIO_Init+0x1e4>
 8004b98:	2305      	movs	r3, #5
 8004b9a:	e00a      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004b9c:	2306      	movs	r3, #6
 8004b9e:	e008      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	e006      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e004      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e002      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_GPIO_Init+0x1fa>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	f002 0203 	and.w	r2, r2, #3
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc2:	4937      	ldr	r1, [pc, #220]	@ (8004ca0 <HAL_GPIO_Init+0x2e8>)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bd0:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bf4:	4a30      	ldr	r2, [pc, #192]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c1e:	4a26      	ldr	r2, [pc, #152]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c24:	4b24      	ldr	r3, [pc, #144]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c48:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c72:	4a11      	ldr	r2, [pc, #68]	@ (8004cb8 <HAL_GPIO_Init+0x300>)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f ae9d 	bne.w	80049c8 <HAL_GPIO_Init+0x10>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	48000400 	.word	0x48000400
 8004ca8:	48000800 	.word	0x48000800
 8004cac:	48000c00 	.word	0x48000c00
 8004cb0:	48001000 	.word	0x48001000
 8004cb4:	48001400 	.word	0x48001400
 8004cb8:	40010400 	.word	0x40010400

08004cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ccc:	787b      	ldrb	r3, [r7, #1]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cd8:	e002      	b.n	8004ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d141      	bne.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d131      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d08:	4b47      	ldr	r3, [pc, #284]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0e:	4a46      	ldr	r2, [pc, #280]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d18:	4b43      	ldr	r3, [pc, #268]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d20:	4a41      	ldr	r2, [pc, #260]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d28:	4b40      	ldr	r3, [pc, #256]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2232      	movs	r2, #50	@ 0x32
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	4a3f      	ldr	r2, [pc, #252]	@ (8004e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3e:	e002      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	4b38      	ldr	r3, [pc, #224]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d102      	bne.n	8004d5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f2      	bne.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d5a:	4b33      	ldr	r3, [pc, #204]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d66:	d158      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e057      	b.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d72:	4a2d      	ldr	r2, [pc, #180]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004d7c:	e04d      	b.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d141      	bne.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d86:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d92:	d131      	bne.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9a:	4a23      	ldr	r2, [pc, #140]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da4:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dac:	4a1e      	ldr	r2, [pc, #120]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2232      	movs	r2, #50	@ 0x32
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dca:	e002      	b.n	8004dd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd2:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dde:	d102      	bne.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f2      	bne.n	8004dcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de6:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df2:	d112      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e011      	b.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e08:	e007      	b.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e0a:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e12:	4a05      	ldr	r2, [pc, #20]	@ (8004e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	431bde83 	.word	0x431bde83

08004e34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	@ (8004e50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e42:	6093      	str	r3, [r2, #8]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40007000 	.word	0x40007000

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e2fe      	b.n	8005464 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d075      	beq.n	8004f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e72:	4b97      	ldr	r3, [pc, #604]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e7c:	4b94      	ldr	r3, [pc, #592]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d102      	bne.n	8004e92 <HAL_RCC_OscConfig+0x3e>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_OscConfig+0x44>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d10b      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	4b8d      	ldr	r3, [pc, #564]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05b      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d157      	bne.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e2d9      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x74>
 8004eba:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a84      	ldr	r2, [pc, #528]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x98>
 8004ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b7c      	ldr	r3, [pc, #496]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004eec:	4b78      	ldr	r3, [pc, #480]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a77      	ldr	r2, [pc, #476]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b75      	ldr	r3, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a74      	ldr	r2, [pc, #464]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd f878 	bl	8002000 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fd f874 	bl	8002000 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	@ 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e29e      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f26:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0xc0>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd f864 	bl	8002000 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fd f860 	bl	8002000 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e28a      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f4e:	4b60      	ldr	r3, [pc, #384]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0xe8>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d075      	beq.n	8005056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6a:	4b59      	ldr	r3, [pc, #356]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f74:	4b56      	ldr	r3, [pc, #344]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d102      	bne.n	8004f8a <HAL_RCC_OscConfig+0x136>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_OscConfig+0x13c>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d11f      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f90:	4b4f      	ldr	r3, [pc, #316]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x154>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e25d      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b49      	ldr	r3, [pc, #292]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	4946      	ldr	r1, [pc, #280]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fbc:	4b45      	ldr	r3, [pc, #276]	@ (80050d4 <HAL_RCC_OscConfig+0x280>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc ffd1 	bl	8001f68 <HAL_InitTick>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d043      	beq.n	8005054 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e249      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d023      	beq.n	8005020 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fd f80c 	bl	8002000 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fd f808 	bl	8002000 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e232      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffe:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500a:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	492d      	ldr	r1, [pc, #180]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
 800501e:	e01a      	b.n	8005056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005026:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fc ffe8 	bl	8002000 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005034:	f7fc ffe4 	bl	8002000 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e20e      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x1e0>
 8005052:	e000      	b.n	8005056 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005054:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d041      	beq.n	80050e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01c      	beq.n	80050a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506a:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 800506c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005070:	4a17      	ldr	r2, [pc, #92]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc ffc1 	bl	8002000 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005082:	f7fc ffbd 	bl	8002000 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e1e7      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005094:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ef      	beq.n	8005082 <HAL_RCC_OscConfig+0x22e>
 80050a2:	e020      	b.n	80050e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050aa:	4a09      	ldr	r2, [pc, #36]	@ (80050d0 <HAL_RCC_OscConfig+0x27c>)
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fc ffa4 	bl	8002000 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ba:	e00d      	b.n	80050d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fc ffa0 	bl	8002000 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d906      	bls.n	80050d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e1ca      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050d8:	4b8c      	ldr	r3, [pc, #560]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ea      	bne.n	80050bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80a6 	beq.w	8005240 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f8:	4b84      	ldr	r3, [pc, #528]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x2b4>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x2b6>
 8005108:	2300      	movs	r3, #0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	4b7f      	ldr	r3, [pc, #508]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005112:	4a7e      	ldr	r2, [pc, #504]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6593      	str	r3, [r2, #88]	@ 0x58
 800511a:	4b7c      	ldr	r3, [pc, #496]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005126:	2301      	movs	r3, #1
 8005128:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512a:	4b79      	ldr	r3, [pc, #484]	@ (8005310 <HAL_RCC_OscConfig+0x4bc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d118      	bne.n	8005168 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005136:	4b76      	ldr	r3, [pc, #472]	@ (8005310 <HAL_RCC_OscConfig+0x4bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a75      	ldr	r2, [pc, #468]	@ (8005310 <HAL_RCC_OscConfig+0x4bc>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005142:	f7fc ff5d 	bl	8002000 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fc ff59 	bl	8002000 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e183      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515c:	4b6c      	ldr	r3, [pc, #432]	@ (8005310 <HAL_RCC_OscConfig+0x4bc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d108      	bne.n	8005182 <HAL_RCC_OscConfig+0x32e>
 8005170:	4b66      	ldr	r3, [pc, #408]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	4a65      	ldr	r2, [pc, #404]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005180:	e024      	b.n	80051cc <HAL_RCC_OscConfig+0x378>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d110      	bne.n	80051ac <HAL_RCC_OscConfig+0x358>
 800518a:	4b60      	ldr	r3, [pc, #384]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	4a5e      	ldr	r2, [pc, #376]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800519a:	4b5c      	ldr	r3, [pc, #368]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	4a5a      	ldr	r2, [pc, #360]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051aa:	e00f      	b.n	80051cc <HAL_RCC_OscConfig+0x378>
 80051ac:	4b57      	ldr	r3, [pc, #348]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b2:	4a56      	ldr	r2, [pc, #344]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051bc:	4b53      	ldr	r3, [pc, #332]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c2:	4a52      	ldr	r2, [pc, #328]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051c4:	f023 0304 	bic.w	r3, r3, #4
 80051c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d016      	beq.n	8005202 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fc ff14 	bl	8002000 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fc ff10 	bl	8002000 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e138      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f2:	4b46      	ldr	r3, [pc, #280]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ed      	beq.n	80051dc <HAL_RCC_OscConfig+0x388>
 8005200:	e015      	b.n	800522e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005202:	f7fc fefd 	bl	8002000 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005208:	e00a      	b.n	8005220 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fc fef9 	bl	8002000 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e121      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005220:	4b3a      	ldr	r3, [pc, #232]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1ed      	bne.n	800520a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d105      	bne.n	8005240 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005234:	4b35      	ldr	r3, [pc, #212]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005238:	4a34      	ldr	r2, [pc, #208]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d03c      	beq.n	80052c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01c      	beq.n	800528e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005254:	4b2d      	ldr	r3, [pc, #180]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800525a:	4a2c      	ldr	r2, [pc, #176]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc fecc 	bl	8002000 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526c:	f7fc fec8 	bl	8002000 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0f2      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800527e:	4b23      	ldr	r3, [pc, #140]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <HAL_RCC_OscConfig+0x418>
 800528c:	e01b      	b.n	80052c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005294:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fc feaf 	bl	8002000 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052a6:	f7fc feab 	bl	8002000 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0d5      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80052ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1ef      	bne.n	80052a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80c9 	beq.w	8005462 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	f000 8083 	beq.w	80053e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d15e      	bne.n	80053a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a08      	ldr	r2, [pc, #32]	@ (800530c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fc fe85 	bl	8002000 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f8:	e00c      	b.n	8005314 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fc fe81 	bl	8002000 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d905      	bls.n	8005314 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e0ab      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	4b55      	ldr	r3, [pc, #340]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ec      	bne.n	80052fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005320:	4b52      	ldr	r3, [pc, #328]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4b52      	ldr	r3, [pc, #328]	@ (8005470 <HAL_RCC_OscConfig+0x61c>)
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6a11      	ldr	r1, [r2, #32]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005330:	3a01      	subs	r2, #1
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800533a:	0212      	lsls	r2, r2, #8
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	3a01      	subs	r2, #1
 8005346:	0552      	lsls	r2, r2, #21
 8005348:	4311      	orrs	r1, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800534e:	0852      	lsrs	r2, r2, #1
 8005350:	3a01      	subs	r2, #1
 8005352:	0652      	lsls	r2, r2, #25
 8005354:	4311      	orrs	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800535a:	06d2      	lsls	r2, r2, #27
 800535c:	430a      	orrs	r2, r1
 800535e:	4943      	ldr	r1, [pc, #268]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005360:	4313      	orrs	r3, r2
 8005362:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005364:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005370:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a3d      	ldr	r2, [pc, #244]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800537a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fc fe40 	bl	8002000 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fc fe3c 	bl	8002000 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e066      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005396:	4b35      	ldr	r3, [pc, #212]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x530>
 80053a2:	e05e      	b.n	8005462 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a4:	4b31      	ldr	r3, [pc, #196]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a30      	ldr	r2, [pc, #192]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fc fe26 	bl	8002000 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b8:	f7fc fe22 	bl	8002000 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e04c      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ca:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053d6:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	4924      	ldr	r1, [pc, #144]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053dc:	4b25      	ldr	r3, [pc, #148]	@ (8005474 <HAL_RCC_OscConfig+0x620>)
 80053de:	4013      	ands	r3, r2
 80053e0:	60cb      	str	r3, [r1, #12]
 80053e2:	e03e      	b.n	8005462 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e039      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053f0:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <HAL_RCC_OscConfig+0x618>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 0203 	and.w	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d12c      	bne.n	800545e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540e:	3b01      	subs	r3, #1
 8005410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d123      	bne.n	800545e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d11b      	bne.n	800545e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d113      	bne.n	800545e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	3b01      	subs	r3, #1
 8005444:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d109      	bne.n	800545e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	3b01      	subs	r3, #1
 8005458:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	019f800c 	.word	0x019f800c
 8005474:	feeefffc 	.word	0xfeeefffc

08005478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e11e      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b91      	ldr	r3, [pc, #580]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d910      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b8e      	ldr	r3, [pc, #568]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 020f 	bic.w	r2, r3, #15
 80054a6:	498c      	ldr	r1, [pc, #560]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b8a      	ldr	r3, [pc, #552]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e106      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d073      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d129      	bne.n	8005528 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d4:	4b81      	ldr	r3, [pc, #516]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0f4      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054e4:	f000 f966 	bl	80057b4 <RCC_GetSysClockFreqFromPLLSource>
 80054e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4a7c      	ldr	r2, [pc, #496]	@ (80056e0 <HAL_RCC_ClockConfig+0x268>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d93f      	bls.n	8005572 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054f2:	4b7a      	ldr	r3, [pc, #488]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005506:	2b00      	cmp	r3, #0
 8005508:	d033      	beq.n	8005572 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d12f      	bne.n	8005572 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005512:	4b72      	ldr	r3, [pc, #456]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800551a:	4a70      	ldr	r2, [pc, #448]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 800551c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005520:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005522:	2380      	movs	r3, #128	@ 0x80
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e024      	b.n	8005572 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d107      	bne.n	8005540 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005530:	4b6a      	ldr	r3, [pc, #424]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0c6      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005540:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0be      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005550:	f000 f8ce 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8005554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4a61      	ldr	r2, [pc, #388]	@ (80056e0 <HAL_RCC_ClockConfig+0x268>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d909      	bls.n	8005572 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800555e:	4b5f      	ldr	r3, [pc, #380]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005566:	4a5d      	ldr	r2, [pc, #372]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800556e:	2380      	movs	r3, #128	@ 0x80
 8005570:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b5a      	ldr	r3, [pc, #360]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4957      	ldr	r1, [pc, #348]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fc fd3c 	bl	8002000 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fc fd38 	bl	8002000 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e095      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b4e      	ldr	r3, [pc, #312]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d023      	beq.n	8005608 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055cc:	4b43      	ldr	r3, [pc, #268]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	4a42      	ldr	r2, [pc, #264]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055e4:	4b3d      	ldr	r3, [pc, #244]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055ec:	4a3b      	ldr	r2, [pc, #236]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f4:	4b39      	ldr	r3, [pc, #228]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4936      	ldr	r1, [pc, #216]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	e008      	b.n	800561a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d105      	bne.n	800561a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800560e:	4b33      	ldr	r3, [pc, #204]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4a32      	ldr	r2, [pc, #200]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005614:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005618:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800561a:	4b2f      	ldr	r3, [pc, #188]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d21d      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005628:	4b2b      	ldr	r3, [pc, #172]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 020f 	bic.w	r2, r3, #15
 8005630:	4929      	ldr	r1, [pc, #164]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005638:	f7fc fce2 	bl	8002000 <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	e00a      	b.n	8005656 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005640:	f7fc fcde 	bl	8002000 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e03b      	b.n	80056ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b20      	ldr	r3, [pc, #128]	@ (80056d8 <HAL_RCC_ClockConfig+0x260>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d1ed      	bne.n	8005640 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4917      	ldr	r1, [pc, #92]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568e:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	490f      	ldr	r1, [pc, #60]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a2:	f000 f825 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <HAL_RCC_ClockConfig+0x264>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	490c      	ldr	r1, [pc, #48]	@ (80056e4 <HAL_RCC_ClockConfig+0x26c>)
 80056b4:	5ccb      	ldrb	r3, [r1, r3]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <HAL_RCC_ClockConfig+0x270>)
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056c2:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <HAL_RCC_ClockConfig+0x274>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fc fc4e 	bl	8001f68 <HAL_InitTick>
 80056cc:	4603      	mov	r3, r0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40022000 	.word	0x40022000
 80056dc:	40021000 	.word	0x40021000
 80056e0:	04c4b400 	.word	0x04c4b400
 80056e4:	08007348 	.word	0x08007348
 80056e8:	20000000 	.word	0x20000000
 80056ec:	20000004 	.word	0x20000004

080056f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056f6:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d102      	bne.n	8005708 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005702:	4b2a      	ldr	r3, [pc, #168]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	e047      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005708:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b08      	cmp	r3, #8
 8005712:	d102      	bne.n	800571a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005714:	4b26      	ldr	r3, [pc, #152]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e03e      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800571a:	4b23      	ldr	r3, [pc, #140]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d136      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005726:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	3301      	adds	r3, #1
 800573c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d10c      	bne.n	800575e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005744:	4a1a      	ldr	r2, [pc, #104]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	4a16      	ldr	r2, [pc, #88]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800574e:	68d2      	ldr	r2, [r2, #12]
 8005750:	0a12      	lsrs	r2, r2, #8
 8005752:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	617b      	str	r3, [r7, #20]
      break;
 800575c:	e00c      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800575e:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	4a10      	ldr	r2, [pc, #64]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	0a12      	lsrs	r2, r2, #8
 800576c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005770:	fb02 f303 	mul.w	r3, r2, r3
 8005774:	617b      	str	r3, [r7, #20]
      break;
 8005776:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005778:	4b0b      	ldr	r3, [pc, #44]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	0e5b      	lsrs	r3, r3, #25
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	3301      	adds	r3, #1
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e001      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005798:	693b      	ldr	r3, [r7, #16]
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	00f42400 	.word	0x00f42400
 80057b0:	007a1200 	.word	0x007a1200

080057b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d10c      	bne.n	80057f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d8:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	4a14      	ldr	r2, [pc, #80]	@ (8005834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057e2:	68d2      	ldr	r2, [r2, #12]
 80057e4:	0a12      	lsrs	r2, r2, #8
 80057e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	617b      	str	r3, [r7, #20]
    break;
 80057f0:	e00c      	b.n	800580c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057f2:	4a12      	ldr	r2, [pc, #72]	@ (800583c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	0a12      	lsrs	r2, r2, #8
 8005800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]
    break;
 800580a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800580c:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0e5b      	lsrs	r3, r3, #25
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	3301      	adds	r3, #1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005826:	687b      	ldr	r3, [r7, #4]
}
 8005828:	4618      	mov	r0, r3
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40021000 	.word	0x40021000
 8005838:	007a1200 	.word	0x007a1200
 800583c:	00f42400 	.word	0x00f42400

08005840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005848:	2300      	movs	r3, #0
 800584a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800584c:	2300      	movs	r3, #0
 800584e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8098 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4b40      	ldr	r3, [pc, #256]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005872:	4a3f      	ldr	r2, [pc, #252]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005878:	6593      	str	r3, [r2, #88]	@ 0x58
 800587a:	4b3d      	ldr	r3, [pc, #244]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800588a:	4b3a      	ldr	r3, [pc, #232]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a39      	ldr	r2, [pc, #228]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005896:	f7fc fbb3 	bl	8002000 <HAL_GetTick>
 800589a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800589c:	e009      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589e:	f7fc fbaf 	bl	8002000 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d902      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	74fb      	strb	r3, [r7, #19]
        break;
 80058b0:	e005      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b2:	4b30      	ldr	r3, [pc, #192]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ef      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80058be:	7cfb      	ldrb	r3, [r7, #19]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d159      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d01e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d019      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058e0:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ec:	4b20      	ldr	r3, [pc, #128]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005902:	4a1b      	ldr	r2, [pc, #108]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800590c:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fc fb6f 	bl	8002000 <HAL_GetTick>
 8005922:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005924:	e00b      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fc fb6b 	bl	8002000 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005934:	4293      	cmp	r3, r2
 8005936:	d902      	bls.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	74fb      	strb	r3, [r7, #19]
            break;
 800593c:	e006      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ec      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005952:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	4903      	ldr	r1, [pc, #12]	@ (8005970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005968:	e008      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800596a:	7cfb      	ldrb	r3, [r7, #19]
 800596c:	74bb      	strb	r3, [r7, #18]
 800596e:	e005      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005970:	40021000 	.word	0x40021000
 8005974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800597c:	7c7b      	ldrb	r3, [r7, #17]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d105      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005982:	4ba6      	ldr	r3, [pc, #664]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	4aa5      	ldr	r2, [pc, #660]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800599a:	4ba0      	ldr	r3, [pc, #640]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a0:	f023 0203 	bic.w	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	499c      	ldr	r1, [pc, #624]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059bc:	4b97      	ldr	r3, [pc, #604]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f023 020c 	bic.w	r2, r3, #12
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4994      	ldr	r1, [pc, #592]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059de:	4b8f      	ldr	r3, [pc, #572]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	498b      	ldr	r1, [pc, #556]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a00:	4b86      	ldr	r3, [pc, #536]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4983      	ldr	r1, [pc, #524]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a22:	4b7e      	ldr	r3, [pc, #504]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	497a      	ldr	r1, [pc, #488]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a44:	4b75      	ldr	r3, [pc, #468]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	4972      	ldr	r1, [pc, #456]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a66:	4b6d      	ldr	r3, [pc, #436]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	4969      	ldr	r1, [pc, #420]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a88:	4b64      	ldr	r3, [pc, #400]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4961      	ldr	r1, [pc, #388]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	4958      	ldr	r1, [pc, #352]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005acc:	4b53      	ldr	r3, [pc, #332]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	4950      	ldr	r1, [pc, #320]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d105      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aec:	4b4b      	ldr	r3, [pc, #300]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b04:	4b45      	ldr	r3, [pc, #276]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	4942      	ldr	r1, [pc, #264]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b22:	d105      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b24:	4b3d      	ldr	r3, [pc, #244]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b3c:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	4934      	ldr	r1, [pc, #208]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a2e      	ldr	r2, [pc, #184]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b74:	4b29      	ldr	r3, [pc, #164]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b82:	4926      	ldr	r1, [pc, #152]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b21      	ldr	r3, [pc, #132]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d015      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bac:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	4918      	ldr	r1, [pc, #96]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bca:	d105      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bcc:	4b13      	ldr	r3, [pc, #76]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a12      	ldr	r2, [pc, #72]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d015      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005be4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	490a      	ldr	r1, [pc, #40]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c02:	d105      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a04      	ldr	r2, [pc, #16]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40021000 	.word	0x40021000

08005c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e049      	b.n	8005cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fb ffb2 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f000 fd92 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d001      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e04a      	b.n	8005d7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d12:	d013      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d115      	bne.n	8005d68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d015      	beq.n	8005d7a <HAL_TIM_Base_Start_IT+0xaa>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d54:	d011      	beq.n	8005d7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d66:	e008      	b.n	8005d7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	00010007 	.word	0x00010007

08005da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e049      	b.n	8005e4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f841 	bl	8005e52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f000 fcd0 	bl	8006788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x24>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e03c      	b.n	8005f06 <HAL_TIM_PWM_Start+0x9e>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x3e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e02f      	b.n	8005f06 <HAL_TIM_PWM_Start+0x9e>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e022      	b.n	8005f06 <HAL_TIM_PWM_Start+0x9e>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b0c      	cmp	r3, #12
 8005ec4:	d109      	bne.n	8005eda <HAL_TIM_PWM_Start+0x72>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e015      	b.n	8005f06 <HAL_TIM_PWM_Start+0x9e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d109      	bne.n	8005ef4 <HAL_TIM_PWM_Start+0x8c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e008      	b.n	8005f06 <HAL_TIM_PWM_Start+0x9e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e097      	b.n	800603e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xb6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f1c:	e023      	b.n	8005f66 <HAL_TIM_PWM_Start+0xfe>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0xc6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f2c:	e01b      	b.n	8005f66 <HAL_TIM_PWM_Start+0xfe>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xd6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3c:	e013      	b.n	8005f66 <HAL_TIM_PWM_Start+0xfe>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xe6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f4c:	e00b      	b.n	8005f66 <HAL_TIM_PWM_Start+0xfe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0xf6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f5c:	e003      	b.n	8005f66 <HAL_TIM_PWM_Start+0xfe>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 f838 	bl	8006fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a33      	ldr	r2, [pc, #204]	@ (8006048 <HAL_TIM_PWM_Start+0x1e0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_TIM_PWM_Start+0x13e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a32      	ldr	r2, [pc, #200]	@ (800604c <HAL_TIM_PWM_Start+0x1e4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIM_PWM_Start+0x13e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a30      	ldr	r2, [pc, #192]	@ (8006050 <HAL_TIM_PWM_Start+0x1e8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIM_PWM_Start+0x13e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2f      	ldr	r2, [pc, #188]	@ (8006054 <HAL_TIM_PWM_Start+0x1ec>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIM_PWM_Start+0x13e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8006058 <HAL_TIM_PWM_Start+0x1f0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_PWM_Start+0x142>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_TIM_PWM_Start+0x144>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a20      	ldr	r2, [pc, #128]	@ (8006048 <HAL_TIM_PWM_Start+0x1e0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d018      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x194>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d013      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x194>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a20      	ldr	r2, [pc, #128]	@ (800605c <HAL_TIM_PWM_Start+0x1f4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x194>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <HAL_TIM_PWM_Start+0x1f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x194>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a17      	ldr	r2, [pc, #92]	@ (800604c <HAL_TIM_PWM_Start+0x1e4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIM_PWM_Start+0x194>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	@ (8006050 <HAL_TIM_PWM_Start+0x1e8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d115      	bne.n	8006028 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <HAL_TIM_PWM_Start+0x1fc>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d015      	beq.n	800603a <HAL_TIM_PWM_Start+0x1d2>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006014:	d011      	beq.n	800603a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	e008      	b.n	800603a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e000      	b.n	800603c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d020      	beq.n	80060cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0202 	mvn.w	r2, #2
 800609c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fb4a 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fb3c 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb4d 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d020      	beq.n	8006118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0204 	mvn.w	r2, #4
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fb24 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 8006104:	e005      	b.n	8006112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb16 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fb27 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0208 	mvn.w	r2, #8
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fafe 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 faf0 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb01 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0210 	mvn.w	r2, #16
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2208      	movs	r2, #8
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fad8 	bl	800674c <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 faca 	bl	8006738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fadb 	bl	8006760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0201 	mvn.w	r2, #1
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 faa8 	bl	8006724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f82f 	bl	8007260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00c      	beq.n	8006226 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f827 	bl	8007274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00c      	beq.n	800624a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fa95 	bl	8006774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f06f 0220 	mvn.w	r2, #32
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 ffef 	bl	800724c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fffb 	bl	8007288 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fff3 	bl	800729c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 ffeb 	bl	80072b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 ffe3 	bl	80072c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006322:	2302      	movs	r3, #2
 8006324:	e0ff      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b14      	cmp	r3, #20
 8006332:	f200 80f0 	bhi.w	8006516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006336:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006391 	.word	0x08006391
 8006340:	08006517 	.word	0x08006517
 8006344:	08006517 	.word	0x08006517
 8006348:	08006517 	.word	0x08006517
 800634c:	080063d1 	.word	0x080063d1
 8006350:	08006517 	.word	0x08006517
 8006354:	08006517 	.word	0x08006517
 8006358:	08006517 	.word	0x08006517
 800635c:	08006413 	.word	0x08006413
 8006360:	08006517 	.word	0x08006517
 8006364:	08006517 	.word	0x08006517
 8006368:	08006517 	.word	0x08006517
 800636c:	08006453 	.word	0x08006453
 8006370:	08006517 	.word	0x08006517
 8006374:	08006517 	.word	0x08006517
 8006378:	08006517 	.word	0x08006517
 800637c:	08006495 	.word	0x08006495
 8006380:	08006517 	.word	0x08006517
 8006384:	08006517 	.word	0x08006517
 8006388:	08006517 	.word	0x08006517
 800638c:	080064d5 	.word	0x080064d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fa92 	bl	80068c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e0a5      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fb02 	bl	80069e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e084      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fb6b 	bl	8006af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e064      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fbd3 	bl	8006c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e043      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fc3c 	bl	8006d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064d2:	e023      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fc80 	bl	8006de0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006514:	e002      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
      break;
 800651a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop

08006530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_TIM_ConfigClockSource+0x1c>
 8006548:	2302      	movs	r3, #2
 800654a:	e0de      	b.n	800670a <HAL_TIM_ConfigClockSource+0x1da>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800656a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800656e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a63      	ldr	r2, [pc, #396]	@ (8006714 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 80a9 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 800658c:	4a61      	ldr	r2, [pc, #388]	@ (8006714 <HAL_TIM_ConfigClockSource+0x1e4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f200 80ae 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006594:	4a60      	ldr	r2, [pc, #384]	@ (8006718 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f000 80a1 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 800659c:	4a5e      	ldr	r2, [pc, #376]	@ (8006718 <HAL_TIM_ConfigClockSource+0x1e8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f200 80a6 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065a4:	4a5d      	ldr	r2, [pc, #372]	@ (800671c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f000 8099 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 80065ac:	4a5b      	ldr	r2, [pc, #364]	@ (800671c <HAL_TIM_ConfigClockSource+0x1ec>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f200 809e 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006720 <HAL_TIM_ConfigClockSource+0x1f0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f000 8091 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 80065bc:	4a58      	ldr	r2, [pc, #352]	@ (8006720 <HAL_TIM_ConfigClockSource+0x1f0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f200 8096 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065c8:	f000 8089 	beq.w	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 80065cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065d0:	f200 808e 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d8:	d03e      	beq.n	8006658 <HAL_TIM_ConfigClockSource+0x128>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065de:	f200 8087 	bhi.w	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e6:	f000 8086 	beq.w	80066f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80065ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ee:	d87f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065f0:	2b70      	cmp	r3, #112	@ 0x70
 80065f2:	d01a      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xfa>
 80065f4:	2b70      	cmp	r3, #112	@ 0x70
 80065f6:	d87b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80065f8:	2b60      	cmp	r3, #96	@ 0x60
 80065fa:	d050      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x16e>
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d877      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006600:	2b50      	cmp	r3, #80	@ 0x50
 8006602:	d03c      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x14e>
 8006604:	2b50      	cmp	r3, #80	@ 0x50
 8006606:	d873      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d058      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x18e>
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d86f      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d064      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 8006614:	2b30      	cmp	r3, #48	@ 0x30
 8006616:	d86b      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d060      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d867      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d05a      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x1ae>
 8006628:	e062      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	f000 fcb3 	bl	8006fa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800664c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
      break;
 8006656:	e04f      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006668:	f000 fc9c 	bl	8006fa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800667a:	609a      	str	r2, [r3, #8]
      break;
 800667c:	e03c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fc0e 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2150      	movs	r1, #80	@ 0x50
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fc67 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 800669c:	e02c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fc2d 	bl	8006f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2160      	movs	r1, #96	@ 0x60
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc57 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80066bc:	e01c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fbee 	bl	8006eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2140      	movs	r1, #64	@ 0x40
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fc47 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 fc3e 	bl	8006f6a <TIM_ITRx_SetConfig>
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80066f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	00100070 	.word	0x00100070
 8006718:	00100040 	.word	0x00100040
 800671c:	00100030 	.word	0x00100030
 8006720:	00100020 	.word	0x00100020

08006724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a42      	ldr	r2, [pc, #264]	@ (80068a4 <TIM_Base_SetConfig+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00f      	beq.n	80067c0 <TIM_Base_SetConfig+0x38>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a6:	d00b      	beq.n	80067c0 <TIM_Base_SetConfig+0x38>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3f      	ldr	r2, [pc, #252]	@ (80068a8 <TIM_Base_SetConfig+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_Base_SetConfig+0x38>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3e      	ldr	r2, [pc, #248]	@ (80068ac <TIM_Base_SetConfig+0x124>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x38>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3d      	ldr	r2, [pc, #244]	@ (80068b0 <TIM_Base_SetConfig+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d108      	bne.n	80067d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a33      	ldr	r2, [pc, #204]	@ (80068a4 <TIM_Base_SetConfig+0x11c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01b      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d017      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a30      	ldr	r2, [pc, #192]	@ (80068a8 <TIM_Base_SetConfig+0x120>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	@ (80068ac <TIM_Base_SetConfig+0x124>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2e      	ldr	r2, [pc, #184]	@ (80068b0 <TIM_Base_SetConfig+0x128>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2d      	ldr	r2, [pc, #180]	@ (80068b4 <TIM_Base_SetConfig+0x12c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2c      	ldr	r2, [pc, #176]	@ (80068b8 <TIM_Base_SetConfig+0x130>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0x8a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2b      	ldr	r2, [pc, #172]	@ (80068bc <TIM_Base_SetConfig+0x134>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a16      	ldr	r2, [pc, #88]	@ (80068a4 <TIM_Base_SetConfig+0x11c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00f      	beq.n	8006870 <TIM_Base_SetConfig+0xe8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a17      	ldr	r2, [pc, #92]	@ (80068b0 <TIM_Base_SetConfig+0x128>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_Base_SetConfig+0xe8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a16      	ldr	r2, [pc, #88]	@ (80068b4 <TIM_Base_SetConfig+0x12c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_Base_SetConfig+0xe8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a15      	ldr	r2, [pc, #84]	@ (80068b8 <TIM_Base_SetConfig+0x130>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0xe8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <TIM_Base_SetConfig+0x134>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]
  }
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40012c00 	.word	0x40012c00
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40013400 	.word	0x40013400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800

080068c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f023 0201 	bic.w	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f023 0302 	bic.w	r3, r3, #2
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <TIM_OC1_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC1_SetConfig+0x80>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2b      	ldr	r2, [pc, #172]	@ (80069d0 <TIM_OC1_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC1_SetConfig+0x80>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2a      	ldr	r2, [pc, #168]	@ (80069d4 <TIM_OC1_SetConfig+0x114>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC1_SetConfig+0x80>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a29      	ldr	r2, [pc, #164]	@ (80069d8 <TIM_OC1_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x80>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a28      	ldr	r2, [pc, #160]	@ (80069dc <TIM_OC1_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <TIM_OC1_SetConfig+0x10c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_OC1_SetConfig+0xc2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <TIM_OC1_SetConfig+0x110>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_OC1_SetConfig+0xc2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a19      	ldr	r2, [pc, #100]	@ (80069d4 <TIM_OC1_SetConfig+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_OC1_SetConfig+0xc2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a18      	ldr	r2, [pc, #96]	@ (80069d8 <TIM_OC1_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC1_SetConfig+0xc2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <TIM_OC1_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40013400 	.word	0x40013400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40014400 	.word	0x40014400
 80069dc:	40014800 	.word	0x40014800

080069e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f023 0210 	bic.w	r2, r3, #16
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0320 	bic.w	r3, r3, #32
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a28      	ldr	r2, [pc, #160]	@ (8006ae0 <TIM_OC2_SetConfig+0x100>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC2_SetConfig+0x6c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a27      	ldr	r2, [pc, #156]	@ (8006ae4 <TIM_OC2_SetConfig+0x104>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d10d      	bne.n	8006a68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae0 <TIM_OC2_SetConfig+0x100>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_OC2_SetConfig+0xb0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <TIM_OC2_SetConfig+0x104>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_OC2_SetConfig+0xb0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <TIM_OC2_SetConfig+0x108>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_OC2_SetConfig+0xb0>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <TIM_OC2_SetConfig+0x10c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC2_SetConfig+0xb0>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a19      	ldr	r2, [pc, #100]	@ (8006af0 <TIM_OC2_SetConfig+0x110>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	40014800 	.word	0x40014800

08006af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a27      	ldr	r2, [pc, #156]	@ (8006bf0 <TIM_OC3_SetConfig+0xfc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC3_SetConfig+0x6a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a26      	ldr	r2, [pc, #152]	@ (8006bf4 <TIM_OC3_SetConfig+0x100>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10d      	bne.n	8006b7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf0 <TIM_OC3_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00f      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xae>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf4 <TIM_OC3_SetConfig+0x100>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00b      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xae>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf8 <TIM_OC3_SetConfig+0x104>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xae>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a19      	ldr	r2, [pc, #100]	@ (8006bfc <TIM_OC3_SetConfig+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC3_SetConfig+0xae>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	@ (8006c00 <TIM_OC3_SetConfig+0x10c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d113      	bne.n	8006bca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40013400 	.word	0x40013400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800

08006c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a28      	ldr	r2, [pc, #160]	@ (8006d04 <TIM_OC4_SetConfig+0x100>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_OC4_SetConfig+0x6c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a27      	ldr	r2, [pc, #156]	@ (8006d08 <TIM_OC4_SetConfig+0x104>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10d      	bne.n	8006c8c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <TIM_OC4_SetConfig+0x100>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_OC4_SetConfig+0xb0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <TIM_OC4_SetConfig+0x104>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_OC4_SetConfig+0xb0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8006d0c <TIM_OC4_SetConfig+0x108>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC4_SetConfig+0xb0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d10 <TIM_OC4_SetConfig+0x10c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC4_SetConfig+0xb0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a19      	ldr	r2, [pc, #100]	@ (8006d14 <TIM_OC4_SetConfig+0x110>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d113      	bne.n	8006cdc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	019b      	lsls	r3, r3, #6
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a17      	ldr	r2, [pc, #92]	@ (8006dcc <TIM_OC5_SetConfig+0xb4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00f      	beq.n	8006d92 <TIM_OC5_SetConfig+0x7a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <TIM_OC5_SetConfig+0xb8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_OC5_SetConfig+0x7a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a15      	ldr	r2, [pc, #84]	@ (8006dd4 <TIM_OC5_SetConfig+0xbc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_OC5_SetConfig+0x7a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a14      	ldr	r2, [pc, #80]	@ (8006dd8 <TIM_OC5_SetConfig+0xc0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC5_SetConfig+0x7a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	@ (8006ddc <TIM_OC5_SetConfig+0xc4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d109      	bne.n	8006da6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800

08006de0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	051b      	lsls	r3, r3, #20
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a18      	ldr	r2, [pc, #96]	@ (8006e98 <TIM_OC6_SetConfig+0xb8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_OC6_SetConfig+0x7c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <TIM_OC6_SetConfig+0xbc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_OC6_SetConfig+0x7c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <TIM_OC6_SetConfig+0xc0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_OC6_SetConfig+0x7c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a15      	ldr	r2, [pc, #84]	@ (8006ea4 <TIM_OC6_SetConfig+0xc4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC6_SetConfig+0x7c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <TIM_OC6_SetConfig+0xc8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d109      	bne.n	8006e70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	029b      	lsls	r3, r3, #10
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40013400 	.word	0x40013400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f023 030a 	bic.w	r3, r3, #10
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b087      	sub	sp, #28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f023 0210 	bic.w	r2, r3, #16
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	031b      	lsls	r3, r3, #12
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 0307 	orr.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e065      	b.n	8007114 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2c      	ldr	r2, [pc, #176]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2b      	ldr	r2, [pc, #172]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d108      	bne.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007082:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070be:	d013      	beq.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a18      	ldr	r2, [pc, #96]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a17      	ldr	r2, [pc, #92]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a12      	ldr	r2, [pc, #72]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a13      	ldr	r2, [pc, #76]	@ (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d10c      	bne.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40014000 	.word	0x40014000

08007134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800714c:	2302      	movs	r3, #2
 800714e:	e073      	b.n	8007238 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a19      	ldr	r2, [pc, #100]	@ (8007244 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d11c      	bne.n	8007226 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f6:	051b      	lsls	r3, r3, #20
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40012c00 	.word	0x40012c00
 8007248:	40013400 	.word	0x40013400

0800724c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <memset>:
 80072d8:	4402      	add	r2, r0
 80072da:	4603      	mov	r3, r0
 80072dc:	4293      	cmp	r3, r2
 80072de:	d100      	bne.n	80072e2 <memset+0xa>
 80072e0:	4770      	bx	lr
 80072e2:	f803 1b01 	strb.w	r1, [r3], #1
 80072e6:	e7f9      	b.n	80072dc <memset+0x4>

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007320 <__libc_init_array+0x38>)
 80072ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007324 <__libc_init_array+0x3c>)
 80072ee:	1b64      	subs	r4, r4, r5
 80072f0:	10a4      	asrs	r4, r4, #2
 80072f2:	2600      	movs	r6, #0
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007328 <__libc_init_array+0x40>)
 80072fa:	4c0c      	ldr	r4, [pc, #48]	@ (800732c <__libc_init_array+0x44>)
 80072fc:	f000 f818 	bl	8007330 <_init>
 8007300:	1b64      	subs	r4, r4, r5
 8007302:	10a4      	asrs	r4, r4, #2
 8007304:	2600      	movs	r6, #0
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	f855 3b04 	ldr.w	r3, [r5], #4
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	08007368 	.word	0x08007368
 8007324:	08007368 	.word	0x08007368
 8007328:	08007368 	.word	0x08007368
 800732c:	0800736c 	.word	0x0800736c

08007330 <_init>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr

0800733c <_fini>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr
