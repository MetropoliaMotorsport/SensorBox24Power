
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007604  08007604  00008604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007624  08007624  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007624  08007624  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00008624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800762c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  2000000c  08007638  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08007638  000098a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fba  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b52  00000000  00000000  0001eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00021b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6a  00000000  00000000  00022f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207b4  00000000  00000000  00023eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151cb  00000000  00000000  0004466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da684  00000000  00000000  00059839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133ebd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  00133f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080075ec 	.word	0x080075ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080075ec 	.word	0x080075ec

08000218 <set_pwm_duty_cycle>:
#include "main.h"
#include "functions.h"
#include "string.h"


void set_pwm_duty_cycle(TIM_HandleTypeDef *htim){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(check_bit(PWM_out_enable,1) != 0){
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <set_pwm_duty_cycle+0x84>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f000 ff34 	bl	8001094 <check_bit>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d010      	beq.n	8000254 <set_pwm_duty_cycle+0x3c>
		PWM_speed[0] = (PWM_width[0] * 40)/100;
 8000232:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4613      	mov	r3, r2
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	4a18      	ldr	r2, [pc, #96]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 8000242:	fb82 1203 	smull	r1, r2, r2, r3
 8000246:	1152      	asrs	r2, r2, #5
 8000248:	17db      	asrs	r3, r3, #31
 800024a:	1ad3      	subs	r3, r2, r3
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000250:	801a      	strh	r2, [r3, #0]
 8000252:	e002      	b.n	800025a <set_pwm_duty_cycle+0x42>
	}else{
		PWM_speed[0] = 0;
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
	}
	if(check_bit(PWM_out_enable,0) != 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <set_pwm_duty_cycle+0x84>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f000 ff17 	bl	8001094 <check_bit>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d010      	beq.n	800028e <set_pwm_duty_cycle+0x76>
		PWM_speed[1] = (PWM_width[1] * 40)/100;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <set_pwm_duty_cycle+0x88>)
 800026e:	885b      	ldrh	r3, [r3, #2]
 8000270:	461a      	mov	r2, r3
 8000272:	4613      	mov	r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4413      	add	r3, r2
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <set_pwm_duty_cycle+0x8c>)
 800027c:	fb82 1203 	smull	r1, r2, r2, r3
 8000280:	1152      	asrs	r2, r2, #5
 8000282:	17db      	asrs	r3, r3, #31
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	b29a      	uxth	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 800028a:	805a      	strh	r2, [r3, #2]
	}else{
		PWM_speed[1] = 0;
	}
}
 800028c:	e002      	b.n	8000294 <set_pwm_duty_cycle+0x7c>
		PWM_speed[1] = 0;
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <set_pwm_duty_cycle+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	805a      	strh	r2, [r3, #2]
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000083c 	.word	0x2000083c
 80002a0:	20000840 	.word	0x20000840
 80002a4:	51eb851f 	.word	0x51eb851f
 80002a8:	20000844 	.word	0x20000844

080002ac <Config_Setup>:
#include "functions.h"
#include "commands.h"
#include "config.h"

void Config_Setup(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80002b0:	f000 f802 	bl	80002b8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Config_1>:

void Config_1(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80002be:	af00      	add	r7, sp, #0

	CAN_ID = 17;
 80002c0:	4bdb      	ldr	r3, [pc, #876]	@ (8000630 <Config_1+0x378>)
 80002c2:	2211      	movs	r2, #17
 80002c4:	701a      	strb	r2, [r3, #0]
	CAN_interval = 1000; //in ms
 80002c6:	4bdb      	ldr	r3, [pc, #876]	@ (8000634 <Config_1+0x37c>)
 80002c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002cc:	801a      	strh	r2, [r3, #0]


	Outputs OUT0_1 = {NC, 2050, 1900, 0, OUT0_1_pin};
 80002ce:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80002d2:	224c      	movs	r2, #76	@ 0x4c
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f007 f94e 	bl	8007578 <memset>
 80002dc:	f640 0302 	movw	r3, #2050	@ 0x802
 80002e0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 80002e4:	f240 736c 	movw	r3, #1900	@ 0x76c
 80002e8:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
	Outputs OUT1_1 = {NC, 2050, 1900, 0, OUT1_1_pin};
 80002ec:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80002f0:	224c      	movs	r2, #76	@ 0x4c
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f007 f93f 	bl	8007578 <memset>
 80002fa:	f640 0302 	movw	r3, #2050	@ 0x802
 80002fe:	f8a7 31ca 	strh.w	r3, [r7, #458]	@ 0x1ca
 8000302:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000306:	f8a7 31cc 	strh.w	r3, [r7, #460]	@ 0x1cc
 800030a:	2301      	movs	r3, #1
 800030c:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0
	Outputs OUT2_1 = {NC, 2050, 1900, 0, OUT2_1_pin};
 8000310:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8000314:	224c      	movs	r2, #76	@ 0x4c
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f007 f92d 	bl	8007578 <memset>
 800031e:	f640 0302 	movw	r3, #2050	@ 0x802
 8000322:	f8a7 317e 	strh.w	r3, [r7, #382]	@ 0x17e
 8000326:	f240 736c 	movw	r3, #1900	@ 0x76c
 800032a:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180
 800032e:	2302      	movs	r3, #2
 8000330:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
	Outputs OUT3_1 = {NC, 2050, 1900, 0, OUT3_1_pin};
 8000334:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000338:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800033c:	4618      	mov	r0, r3
 800033e:	234c      	movs	r3, #76	@ 0x4c
 8000340:	461a      	mov	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f007 f918 	bl	8007578 <memset>
 8000348:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800034c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000350:	f640 0202 	movw	r2, #2050	@ 0x802
 8000354:	805a      	strh	r2, [r3, #2]
 8000356:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800035a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800035e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000362:	809a      	strh	r2, [r3, #4]
 8000364:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000368:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800036c:	2203      	movs	r2, #3
 800036e:	721a      	strb	r2, [r3, #8]
	Outputs OUT0_2 = {NC, 2050, 1900, 0, OUT0_2_pin};
 8000370:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000374:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000378:	4618      	mov	r0, r3
 800037a:	234c      	movs	r3, #76	@ 0x4c
 800037c:	461a      	mov	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f007 f8fa 	bl	8007578 <memset>
 8000384:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000388:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800038c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000390:	805a      	strh	r2, [r3, #2]
 8000392:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000396:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800039a:	f240 726c 	movw	r2, #1900	@ 0x76c
 800039e:	809a      	strh	r2, [r3, #4]
 80003a0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003a4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80003a8:	2204      	movs	r2, #4
 80003aa:	721a      	strb	r2, [r3, #8]
	Outputs OUT1_2 = {NC, 2050, 1900, 0, OUT1_2_pin};
 80003ac:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003b0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80003b4:	4618      	mov	r0, r3
 80003b6:	234c      	movs	r3, #76	@ 0x4c
 80003b8:	461a      	mov	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f007 f8dc 	bl	8007578 <memset>
 80003c0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003c4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80003c8:	f640 0202 	movw	r2, #2050	@ 0x802
 80003cc:	805a      	strh	r2, [r3, #2]
 80003ce:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003d2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80003d6:	f240 726c 	movw	r2, #1900	@ 0x76c
 80003da:	809a      	strh	r2, [r3, #4]
 80003dc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003e0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80003e4:	2205      	movs	r2, #5
 80003e6:	721a      	strb	r2, [r3, #8]
	Outputs OUT2_2 = {NC, 2050, 1900, 0, OUT2_2_pin};
 80003e8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80003ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80003f0:	4618      	mov	r0, r3
 80003f2:	234c      	movs	r3, #76	@ 0x4c
 80003f4:	461a      	mov	r2, r3
 80003f6:	2100      	movs	r1, #0
 80003f8:	f007 f8be 	bl	8007578 <memset>
 80003fc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000400:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000404:	f640 0202 	movw	r2, #2050	@ 0x802
 8000408:	805a      	strh	r2, [r3, #2]
 800040a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800040e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000412:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000416:	809a      	strh	r2, [r3, #4]
 8000418:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800041c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000420:	2206      	movs	r2, #6
 8000422:	721a      	strb	r2, [r3, #8]
	Outputs OUT3_2 = {NC, 2050, 1900, 0, OUT3_2_pin};
 8000424:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000428:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800042c:	4618      	mov	r0, r3
 800042e:	234c      	movs	r3, #76	@ 0x4c
 8000430:	461a      	mov	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f007 f8a0 	bl	8007578 <memset>
 8000438:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800043c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000440:	f640 0202 	movw	r2, #2050	@ 0x802
 8000444:	805a      	strh	r2, [r3, #2]
 8000446:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800044a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800044e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000452:	809a      	strh	r2, [r3, #4]
 8000454:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000458:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800045c:	2207      	movs	r2, #7
 800045e:	721a      	strb	r2, [r3, #8]

	outputs[OUT0_1.pin] = OUT0_1;
 8000460:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8000464:	4619      	mov	r1, r3
 8000466:	4a74      	ldr	r2, [pc, #464]	@ (8000638 <Config_1+0x380>)
 8000468:	234c      	movs	r3, #76	@ 0x4c
 800046a:	fb01 f303 	mul.w	r3, r1, r3
 800046e:	4413      	add	r3, r2
 8000470:	4618      	mov	r0, r3
 8000472:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8000476:	224c      	movs	r2, #76	@ 0x4c
 8000478:	4619      	mov	r1, r3
 800047a:	f007 f8a9 	bl	80075d0 <memcpy>
	outputs[OUT1_1.pin] = OUT1_1;
 800047e:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 8000482:	4619      	mov	r1, r3
 8000484:	4a6c      	ldr	r2, [pc, #432]	@ (8000638 <Config_1+0x380>)
 8000486:	234c      	movs	r3, #76	@ 0x4c
 8000488:	fb01 f303 	mul.w	r3, r1, r3
 800048c:	4413      	add	r3, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000494:	224c      	movs	r2, #76	@ 0x4c
 8000496:	4619      	mov	r1, r3
 8000498:	f007 f89a 	bl	80075d0 <memcpy>
	outputs[OUT2_1.pin] = OUT2_1;
 800049c:	f897 3184 	ldrb.w	r3, [r7, #388]	@ 0x184
 80004a0:	4619      	mov	r1, r3
 80004a2:	4a65      	ldr	r2, [pc, #404]	@ (8000638 <Config_1+0x380>)
 80004a4:	234c      	movs	r3, #76	@ 0x4c
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80004b2:	224c      	movs	r2, #76	@ 0x4c
 80004b4:	4619      	mov	r1, r3
 80004b6:	f007 f88b 	bl	80075d0 <memcpy>
	outputs[OUT3_1.pin] = OUT3_1;
 80004ba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80004be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80004c2:	7a1b      	ldrb	r3, [r3, #8]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4a5c      	ldr	r2, [pc, #368]	@ (8000638 <Config_1+0x380>)
 80004c8:	234c      	movs	r3, #76	@ 0x4c
 80004ca:	fb01 f303 	mul.w	r3, r1, r3
 80004ce:	441a      	add	r2, r3
 80004d0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80004d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80004d8:	4610      	mov	r0, r2
 80004da:	4619      	mov	r1, r3
 80004dc:	234c      	movs	r3, #76	@ 0x4c
 80004de:	461a      	mov	r2, r3
 80004e0:	f007 f876 	bl	80075d0 <memcpy>
	outputs[OUT0_2.pin] = OUT0_2;
 80004e4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80004e8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80004ec:	7a1b      	ldrb	r3, [r3, #8]
 80004ee:	4619      	mov	r1, r3
 80004f0:	4a51      	ldr	r2, [pc, #324]	@ (8000638 <Config_1+0x380>)
 80004f2:	234c      	movs	r3, #76	@ 0x4c
 80004f4:	fb01 f303 	mul.w	r3, r1, r3
 80004f8:	441a      	add	r2, r3
 80004fa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80004fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000502:	4610      	mov	r0, r2
 8000504:	4619      	mov	r1, r3
 8000506:	234c      	movs	r3, #76	@ 0x4c
 8000508:	461a      	mov	r2, r3
 800050a:	f007 f861 	bl	80075d0 <memcpy>
	outputs[OUT1_2.pin] = OUT1_2;
 800050e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000512:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	4619      	mov	r1, r3
 800051a:	4a47      	ldr	r2, [pc, #284]	@ (8000638 <Config_1+0x380>)
 800051c:	234c      	movs	r3, #76	@ 0x4c
 800051e:	fb01 f303 	mul.w	r3, r1, r3
 8000522:	441a      	add	r2, r3
 8000524:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000528:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800052c:	4610      	mov	r0, r2
 800052e:	4619      	mov	r1, r3
 8000530:	234c      	movs	r3, #76	@ 0x4c
 8000532:	461a      	mov	r2, r3
 8000534:	f007 f84c 	bl	80075d0 <memcpy>
	outputs[OUT2_2.pin] = OUT2_2;
 8000538:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800053c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000540:	7a1b      	ldrb	r3, [r3, #8]
 8000542:	4619      	mov	r1, r3
 8000544:	4a3c      	ldr	r2, [pc, #240]	@ (8000638 <Config_1+0x380>)
 8000546:	234c      	movs	r3, #76	@ 0x4c
 8000548:	fb01 f303 	mul.w	r3, r1, r3
 800054c:	441a      	add	r2, r3
 800054e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000552:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000556:	4610      	mov	r0, r2
 8000558:	4619      	mov	r1, r3
 800055a:	234c      	movs	r3, #76	@ 0x4c
 800055c:	461a      	mov	r2, r3
 800055e:	f007 f837 	bl	80075d0 <memcpy>
	outputs[OUT3_2.pin] = OUT3_2;
 8000562:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000566:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800056a:	7a1b      	ldrb	r3, [r3, #8]
 800056c:	4619      	mov	r1, r3
 800056e:	4a32      	ldr	r2, [pc, #200]	@ (8000638 <Config_1+0x380>)
 8000570:	234c      	movs	r3, #76	@ 0x4c
 8000572:	fb01 f303 	mul.w	r3, r1, r3
 8000576:	441a      	add	r2, r3
 8000578:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800057c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8000580:	4610      	mov	r0, r2
 8000582:	4619      	mov	r1, r3
 8000584:	234c      	movs	r3, #76	@ 0x4c
 8000586:	461a      	mov	r2, r3
 8000588:	f007 f822 	bl	80075d0 <memcpy>
	//OUTPUT 1 in mA
	Warning_Current[0] = 1900;
 800058c:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <Config_1+0x384>)
 800058e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000592:	801a      	strh	r2, [r3, #0]
	Over_Current[0] = 2050;
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <Config_1+0x388>)
 8000596:	f640 0202 	movw	r2, #2050	@ 0x802
 800059a:	801a      	strh	r2, [r3, #0]
	Under_Current[0] = 00;
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <Config_1+0x38c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	Warning_Current[1] = 1900;
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <Config_1+0x384>)
 80005a4:	f240 726c 	movw	r2, #1900	@ 0x76c
 80005a8:	805a      	strh	r2, [r3, #2]
	Over_Current[1] = 2050;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <Config_1+0x388>)
 80005ac:	f640 0202 	movw	r2, #2050	@ 0x802
 80005b0:	805a      	strh	r2, [r3, #2]
	Under_Current[1] = 00;
 80005b2:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <Config_1+0x38c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	805a      	strh	r2, [r3, #2]

	//OUTPUT 3 in mA
	Warning_Current[2] = 1900;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <Config_1+0x384>)
 80005ba:	f240 726c 	movw	r2, #1900	@ 0x76c
 80005be:	809a      	strh	r2, [r3, #4]
	Over_Current[2] = 2050;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <Config_1+0x388>)
 80005c2:	f640 0202 	movw	r2, #2050	@ 0x802
 80005c6:	809a      	strh	r2, [r3, #4]
	Under_Current[2] = 00;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <Config_1+0x38c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	809a      	strh	r2, [r3, #4]

	//OUTPUT 4 in mA
	Warning_Current[3] = 1900;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <Config_1+0x384>)
 80005d0:	f240 726c 	movw	r2, #1900	@ 0x76c
 80005d4:	80da      	strh	r2, [r3, #6]
	Over_Current[3] = 2050;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <Config_1+0x388>)
 80005d8:	f640 0202 	movw	r2, #2050	@ 0x802
 80005dc:	80da      	strh	r2, [r3, #6]
	Under_Current[3] = 00;
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <Config_1+0x38c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	80da      	strh	r2, [r3, #6]

	//OUTPUT 5 in mA
	Warning_Current[4] = 1900;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <Config_1+0x384>)
 80005e6:	f240 726c 	movw	r2, #1900	@ 0x76c
 80005ea:	811a      	strh	r2, [r3, #8]
	Over_Current[4] = 2050;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <Config_1+0x388>)
 80005ee:	f640 0202 	movw	r2, #2050	@ 0x802
 80005f2:	811a      	strh	r2, [r3, #8]
	Under_Current[4] = 00;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <Config_1+0x38c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	811a      	strh	r2, [r3, #8]

	//OUTPUT 6 in mA
	Warning_Current[5] = 1900;
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <Config_1+0x384>)
 80005fc:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000600:	815a      	strh	r2, [r3, #10]
	Over_Current[5] = 2050;
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <Config_1+0x388>)
 8000604:	f640 0202 	movw	r2, #2050	@ 0x802
 8000608:	815a      	strh	r2, [r3, #10]
	Under_Current[5] = 00;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <Config_1+0x38c>)
 800060c:	2200      	movs	r2, #0
 800060e:	815a      	strh	r2, [r3, #10]

	//OUTPUT 7 in mA
	Warning_Current[6] = 1900;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <Config_1+0x384>)
 8000612:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000616:	819a      	strh	r2, [r3, #12]
	Over_Current[6] = 2050;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <Config_1+0x388>)
 800061a:	f640 0202 	movw	r2, #2050	@ 0x802
 800061e:	819a      	strh	r2, [r3, #12]
	Under_Current[6] = 00;
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <Config_1+0x38c>)
 8000622:	2200      	movs	r2, #0
 8000624:	819a      	strh	r2, [r3, #12]

	//OUTPUT 8 in mA
	Warning_Current[7] = 1900;
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <Config_1+0x384>)
 8000628:	f240 726c 	movw	r2, #1900	@ 0x76c
 800062c:	e00c      	b.n	8000648 <Config_1+0x390>
 800062e:	bf00      	nop
 8000630:	20000848 	.word	0x20000848
 8000634:	2000084a 	.word	0x2000084a
 8000638:	2000059c 	.word	0x2000059c
 800063c:	200007fc 	.word	0x200007fc
 8000640:	2000080c 	.word	0x2000080c
 8000644:	2000081c 	.word	0x2000081c
 8000648:	81da      	strh	r2, [r3, #14]
	Over_Current[7] = 2050;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <Config_1+0x3dc>)
 800064c:	f640 0202 	movw	r2, #2050	@ 0x802
 8000650:	81da      	strh	r2, [r3, #14]
	Under_Current[7] = 00;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <Config_1+0x3e0>)
 8000654:	2200      	movs	r2, #0
 8000656:	81da      	strh	r2, [r3, #14]

	//For analog node
	Warning_Current[8] = 2000;
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <Config_1+0x3e4>)
 800065a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800065e:	821a      	strh	r2, [r3, #16]
	Over_Current[8] = 2000;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <Config_1+0x3dc>)
 8000662:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000666:	821a      	strh	r2, [r3, #16]
	Under_Current[8] = 0;
 8000668:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <Config_1+0x3e0>)
 800066a:	2200      	movs	r2, #0
 800066c:	821a      	strh	r2, [r3, #16]

	Default_Switch_State = 0b00000000; //each bit represent one output [8,7,6,5,4,3,2,1]
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <Config_1+0x3e8>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]

	PWM_out_enable = 0b11;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <Config_1+0x3ec>)
 8000676:	2203      	movs	r2, #3
 8000678:	701a      	strb	r2, [r3, #0]

	//Duty cycle 0-100%
	PWM_width[0] = 10;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <Config_1+0x3f0>)
 800067c:	220a      	movs	r2, #10
 800067e:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 10;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <Config_1+0x3f0>)
 8000682:	220a      	movs	r2, #10
 8000684:	805a      	strh	r2, [r3, #2]


	//set_pwm_freq(&htim1);
	//set_pwm_freq(&htim2);

	switch_output();
 8000686:	f000 f8c1 	bl	800080c <switch_output>

}
 800068a:	bf00      	nop
 800068c:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000080c 	.word	0x2000080c
 8000698:	2000081c 	.word	0x2000081c
 800069c:	200007fc 	.word	0x200007fc
 80006a0:	20000832 	.word	0x20000832
 80006a4:	2000083c 	.word	0x2000083c
 80006a8:	20000840 	.word	0x20000840

080006ac <HAL_FDCAN_RxFifo0Callback>:
uint8_t TxData[8];
uint8_t toggle = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d01d      	beq.n	80006fc <HAL_FDCAN_RxFifo0Callback+0x50>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80006c2:	4a11      	ldr	r2, [pc, #68]	@ (8000708 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80006c4:	2140      	movs	r1, #64	@ 0x40
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f003 fe66 	bl	8004398 <HAL_FDCAN_GetRxMessage>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 80006d2:	f001 fa59 	bl	8001b88 <Error_Handler>
 80006d6:	e007      	b.n	80006e8 <HAL_FDCAN_RxFifo0Callback+0x3c>
		}else{
			if(RxHeader.Identifier == CAN_ID){
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <HAL_FDCAN_RxFifo0Callback+0x60>)
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d101      	bne.n	80006e8 <HAL_FDCAN_RxFifo0Callback+0x3c>
				decode();
 80006e4:	f000 f936 	bl	8000954 <decode>
			}
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f003 ff6d 	bl	80045cc <HAL_FDCAN_ActivateNotification>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_FDCAN_RxFifo0Callback+0x50>
		{
			/* Notification Error */
			Error_Handler();
 80006f8:	f001 fa46 	bl	8001b88 <Error_Handler>
		}
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	20000870 	.word	0x20000870
 800070c:	20000848 	.word	0x20000848

08000710 <CanSend>:

void CanSend(uint8_t *TxData){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000718:	e006      	b.n	8000728 <CanSend+0x18>
		Error_Handler();
 800071a:	f001 fa35 	bl	8001b88 <Error_Handler>
		HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	480a      	ldr	r0, [pc, #40]	@ (800074c <CanSend+0x3c>)
 8000724:	f004 fc1a 	bl	8004f5c <HAL_GPIO_WritePin>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <CanSend+0x40>)
 800072a:	f003 ff3d 	bl	80045a8 <HAL_FDCAN_GetTxFifoFreeLevel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d007      	beq.n	8000744 <CanSend+0x34>
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4907      	ldr	r1, [pc, #28]	@ (8000754 <CanSend+0x44>)
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <CanSend+0x40>)
 800073a:	f003 fde9 	bl	8004310 <HAL_FDCAN_AddMessageToTxFifoQ>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1ea      	bne.n	800071a <CanSend+0xa>
	}
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	48000400 	.word	0x48000400
 8000750:	20000110 	.word	0x20000110
 8000754:	2000084c 	.word	0x2000084c

08000758 <CAN_switch_state>:


void CAN_switch_state(uint8_t values){
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData1[5];
	uint8_t TxData2[5];

	if(can_select == 0){
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <CAN_switch_state+0xac>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d121      	bne.n	80007ae <CAN_switch_state+0x56>
		TxData1[0] = 11;
 800076a:	230b      	movs	r3, #11
 800076c:	743b      	strb	r3, [r7, #16]
		for(int i = 1; i < 5;i++){
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	e014      	b.n	800079e <CAN_switch_state+0x46>
			TxData1[i] = check_bit(Default_Switch_State,i-1);
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <CAN_switch_state+0xb0>)
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	3b01      	subs	r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4619      	mov	r1, r3
 8000782:	4610      	mov	r0, r2
 8000784:	f000 fc86 	bl	8001094 <check_bit>
 8000788:	4603      	mov	r3, r0
 800078a:	4619      	mov	r1, r3
 800078c:	f107 0210 	add.w	r2, r7, #16
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	4413      	add	r3, r2
 8000794:	460a      	mov	r2, r1
 8000796:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	3301      	adds	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	dde7      	ble.n	8000774 <CAN_switch_state+0x1c>
		}
		CanSend(TxData1);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb1 	bl	8000710 <CanSend>
	}
	if(can_select == 1){
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <CAN_switch_state+0xac>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d121      	bne.n	80007fa <CAN_switch_state+0xa2>
		TxData2[0] = 12;
 80007b6:	230c      	movs	r3, #12
 80007b8:	723b      	strb	r3, [r7, #8]
		for(int i = 1; i < 5;i++){
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	e014      	b.n	80007ea <CAN_switch_state+0x92>
			TxData2[i] = check_bit(Default_Switch_State,i+3);
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <CAN_switch_state+0xb0>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3303      	adds	r3, #3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f000 fc60 	bl	8001094 <check_bit>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4619      	mov	r1, r3
 80007d8:	f107 0208 	add.w	r2, r7, #8
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4413      	add	r3, r2
 80007e0:	460a      	mov	r2, r1
 80007e2:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i < 5;i++){
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	3301      	adds	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	dde7      	ble.n	80007c0 <CAN_switch_state+0x68>
		}
		CanSend(TxData2);
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff8b 	bl	8000710 <CanSend>
	}
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000082e 	.word	0x2000082e
 8000808:	20000832 	.word	0x20000832

0800080c <switch_output>:



void switch_output(){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
	uint8_t bit = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	71bb      	strb	r3, [r7, #6]
	for(i = 0; i < 8;i++){
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e065      	b.n	80008ec <switch_output+0xe0>
		bit = check_bit(Default_Switch_State, i);
 8000820:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <switch_output+0xf0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fc33 	bl	8001094 <check_bit>
 800082e:	4603      	mov	r3, r0
 8000830:	71bb      	strb	r3, [r7, #6]
		switch(i){
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b07      	cmp	r3, #7
 8000836:	d853      	bhi.n	80008e0 <switch_output+0xd4>
 8000838:	a201      	add	r2, pc, #4	@ (adr r2, 8000840 <switch_output+0x34>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000861 	.word	0x08000861
 8000844:	0800086f 	.word	0x0800086f
 8000848:	08000881 	.word	0x08000881
 800084c:	08000893 	.word	0x08000893
 8000850:	080008a5 	.word	0x080008a5
 8000854:	080008b5 	.word	0x080008b5
 8000858:	080008c5 	.word	0x080008c5
 800085c:	080008d3 	.word	0x080008d3
		case 0:
			HAL_GPIO_WritePin(GPIOB,IN0_Pin,bit);
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	2108      	movs	r1, #8
 8000866:	4826      	ldr	r0, [pc, #152]	@ (8000900 <switch_output+0xf4>)
 8000868:	f004 fb78 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 800086c:	e03b      	b.n	80008e6 <switch_output+0xda>
		case 1:
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,bit);
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	461a      	mov	r2, r3
 8000872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f004 fb6f 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 800087e:	e032      	b.n	80008e6 <switch_output+0xda>
		case 2:
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,bit);
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	461a      	mov	r2, r3
 8000884:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f004 fb66 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 8000890:	e029      	b.n	80008e6 <switch_output+0xda>
		case 3:
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,bit);
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	461a      	mov	r2, r3
 8000896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f004 fb5d 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 80008a2:	e020      	b.n	80008e6 <switch_output+0xda>
		case 4:
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,bit);
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2110      	movs	r1, #16
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ae:	f004 fb55 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 80008b2:	e018      	b.n	80008e6 <switch_output+0xda>
		case 5:
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,bit);
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	2102      	movs	r1, #2
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f004 fb4d 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 80008c2:	e010      	b.n	80008e6 <switch_output+0xda>
		case 6:
			HAL_GPIO_WritePin(GPIOB,IN2_2_Pin,bit);
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <switch_output+0xf4>)
 80008cc:	f004 fb46 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 80008d0:	e009      	b.n	80008e6 <switch_output+0xda>
		case 7:
			HAL_GPIO_WritePin(GPIOB,IN3_2_Pin,bit);
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	461a      	mov	r2, r3
 80008d6:	2110      	movs	r1, #16
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <switch_output+0xf4>)
 80008da:	f004 fb3f 	bl	8004f5c <HAL_GPIO_WritePin>
			break;
 80008de:	e002      	b.n	80008e6 <switch_output+0xda>
		default:
			Error_Handler();
 80008e0:	f001 f952 	bl	8001b88 <Error_Handler>
			break;
 80008e4:	bf00      	nop
	for(i = 0; i < 8;i++){
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	3301      	adds	r3, #1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d996      	bls.n	8000820 <switch_output+0x14>
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000832 	.word	0x20000832
 8000900:	48000400 	.word	0x48000400

08000904 <Over_current>:

void Over_current(uint8_t output_pin){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 15;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <Over_current+0x24>)
 8000910:	220f      	movs	r2, #15
 8000912:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <Over_current+0x24>)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <Over_current+0x24>)
 800091c:	f7ff fef8 	bl	8000710 <CanSend>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000030 	.word	0x20000030

0800092c <Warning_current>:

void Warning_current(uint8_t output_pin){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	TxData[0] = 14;
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <Warning_current+0x24>)
 8000938:	220e      	movs	r2, #14
 800093a:	701a      	strb	r2, [r3, #0]
	TxData[1] = output_pin;
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <Warning_current+0x24>)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	7053      	strb	r3, [r2, #1]
	CanSend(TxData);
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <Warning_current+0x24>)
 8000944:	f7ff fee4 	bl	8000710 <CanSend>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000030 	.word	0x20000030

08000954 <decode>:
	TxData[0] = 13;
	TxData[1] = output_pin;
	CanSend(TxData);
}

void decode(){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	switch(RxData[0]){
 800095a:	4b36      	ldr	r3, [pc, #216]	@ (8000a34 <decode+0xe0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b03      	cmp	r3, #3
 8000962:	d860      	bhi.n	8000a26 <decode+0xd2>
 8000964:	a201      	add	r2, pc, #4	@ (adr r2, 800096c <decode+0x18>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	0800097d 	.word	0x0800097d
 8000970:	080009b7 	.word	0x080009b7
 8000974:	080009d7 	.word	0x080009d7
 8000978:	080009e9 	.word	0x080009e9
	case 1:							//Set PWM RxData[1] -> which PWM, RxData[2] = 1 -> Duty Cycle || RxData[2] = 2 -> Frequency, RxData[3] -> value
		switch(RxData[1]){
 800097c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <decode+0xe0>)
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d002      	beq.n	800098a <decode+0x36>
 8000984:	2b02      	cmp	r3, #2
 8000986:	d009      	beq.n	800099c <decode+0x48>
 8000988:	e011      	b.n	80009ae <decode+0x5a>
		case 1:										//PUMPS
			PWM_width[0] = RxData[2];
 800098a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <decode+0xe0>)
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	461a      	mov	r2, r3
 8000990:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <decode+0xe4>)
 8000992:	801a      	strh	r2, [r3, #0]
			set_pwm_duty_cycle(&htim1);
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <decode+0xe8>)
 8000996:	f7ff fc3f 	bl	8000218 <set_pwm_duty_cycle>
			break;
 800099a:	e00b      	b.n	80009b4 <decode+0x60>
		case 2:										//FANS
			PWM_width[1] = RxData[2];
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <decode+0xe0>)
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <decode+0xe4>)
 80009a4:	805a      	strh	r2, [r3, #2]
			set_pwm_duty_cycle(&htim2);
 80009a6:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <decode+0xec>)
 80009a8:	f7ff fc36 	bl	8000218 <set_pwm_duty_cycle>
			break;
 80009ac:	e002      	b.n	80009b4 <decode+0x60>
		default:
			Error_Handler();
 80009ae:	f001 f8eb 	bl	8001b88 <Error_Handler>
			break;
 80009b2:	bf00      	nop
		}
		break;
 80009b4:	e03a      	b.n	8000a2c <decode+0xd8>
	case 2:							//Switch output on/off
		Default_Switch_State = set_bit(Default_Switch_State,RxData[1],RxData[2]); //if RxData[2] is 0 -> OFF, if RxData[2] is 1 -> ON
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <decode+0xf0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <decode+0xe0>)
 80009bc:	7851      	ldrb	r1, [r2, #1]
 80009be:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <decode+0xe0>)
 80009c0:	7892      	ldrb	r2, [r2, #2]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fb82 	bl	80010cc <set_bit>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <decode+0xf0>)
 80009ce:	701a      	strb	r2, [r3, #0]
		switch_output();
 80009d0:	f7ff ff1c 	bl	800080c <switch_output>
		break;
 80009d4:	e02a      	b.n	8000a2c <decode+0xd8>
	case 3:							// turning analog node on and off, RxData[1] -> 0 is off 1 is on
		HAL_GPIO_WritePin(GPIOA,LED2_Pin,RxData[1]);
 80009d6:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <decode+0xe0>)
 80009d8:	785b      	ldrb	r3, [r3, #1]
 80009da:	461a      	mov	r2, r3
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f004 fabb 	bl	8004f5c <HAL_GPIO_WritePin>
		break;
 80009e6:	e021      	b.n	8000a2c <decode+0xd8>
	case 4:							//switch BRAKE_LIGHT	RxData[1] --> 0 for off and 1 for on
		for(int i = 0; i < 8; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	e017      	b.n	8000a1e <decode+0xca>
			if(output_list[i] == BRAKE_LIGHT){
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <decode+0xf4>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10e      	bne.n	8000a18 <decode+0xc4>
				Default_Switch_State = set_bit(Default_Switch_State,i,RxData[1]);
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <decode+0xf0>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	b2d1      	uxtb	r1, r2
 8000a02:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <decode+0xe0>)
 8000a04:	7852      	ldrb	r2, [r2, #1]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fb60 	bl	80010cc <set_bit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <decode+0xf0>)
 8000a12:	701a      	strb	r2, [r3, #0]
				switch_output();
 8000a14:	f7ff fefa 	bl	800080c <switch_output>
		for(int i = 0; i < 8; i++){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	dde4      	ble.n	80009ee <decode+0x9a>
			}
		}
		break;
 8000a24:	e002      	b.n	8000a2c <decode+0xd8>
	default:
		//decode_error(); //TODO: IMPLEMENT
		Error_Handler();
 8000a26:	f001 f8af 	bl	8001b88 <Error_Handler>
		break;
 8000a2a:	bf00      	nop
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000028 	.word	0x20000028
 8000a38:	20000840 	.word	0x20000840
 8000a3c:	20000174 	.word	0x20000174
 8000a40:	200001c0 	.word	0x200001c0
 8000a44:	20000832 	.word	0x20000832
 8000a48:	20000834 	.word	0x20000834

08000a4c <Current_Sense_process>:



void Current_Sense_process(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, have to pick shunt resistor according to this
	for(int i = 0; i < 8; i++){
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e013      	b.n	8000a80 <Current_Sense_process+0x34>
		outputs[i].actual_current = outputs[i].Current_Sense[0];
 8000a58:	4a6e      	ldr	r2, [pc, #440]	@ (8000c14 <Current_Sense_process+0x1c8>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	214c      	movs	r1, #76	@ 0x4c
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	330c      	adds	r3, #12
 8000a66:	8818      	ldrh	r0, [r3, #0]
 8000a68:	4a6a      	ldr	r2, [pc, #424]	@ (8000c14 <Current_Sense_process+0x1c8>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	214c      	movs	r1, #76	@ 0x4c
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	330a      	adds	r3, #10
 8000a76:	4602      	mov	r2, r0
 8000a78:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b07      	cmp	r3, #7
 8000a84:	dde8      	ble.n	8000a58 <Current_Sense_process+0xc>
	}
	for(int i = 1; i < I_AVERAGE; i++){
 8000a86:	2301      	movs	r3, #1
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	e072      	b.n	8000b72 <Current_Sense_process+0x126>
		PROC[0] = (PROC[0] + IN1_1_Current_Sense[i])/2;
 8000a8c:	4b62      	ldr	r3, [pc, #392]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4a62      	ldr	r2, [pc, #392]	@ (8000c1c <Current_Sense_process+0x1d0>)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	440b      	add	r3, r1
 8000a9c:	0fda      	lsrs	r2, r3, #31
 8000a9e:	4413      	add	r3, r2
 8000aa0:	105b      	asrs	r3, r3, #1
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000aa6:	801a      	strh	r2, [r3, #0]
		PROC[1] = (PROC[1] + IN2_1_Current_Sense[i])/2;
 8000aa8:	4b5b      	ldr	r3, [pc, #364]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000aaa:	885b      	ldrh	r3, [r3, #2]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4a5c      	ldr	r2, [pc, #368]	@ (8000c20 <Current_Sense_process+0x1d4>)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab6:	440b      	add	r3, r1
 8000ab8:	0fda      	lsrs	r2, r3, #31
 8000aba:	4413      	add	r3, r2
 8000abc:	105b      	asrs	r3, r3, #1
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b55      	ldr	r3, [pc, #340]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000ac2:	805a      	strh	r2, [r3, #2]
		PROC[2] = (PROC[2] + IN3_1_Current_Sense[i])/2;
 8000ac4:	4b54      	ldr	r3, [pc, #336]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a56      	ldr	r2, [pc, #344]	@ (8000c24 <Current_Sense_process+0x1d8>)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	440b      	add	r3, r1
 8000ad4:	0fda      	lsrs	r2, r3, #31
 8000ad6:	4413      	add	r3, r2
 8000ad8:	105b      	asrs	r3, r3, #1
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b4e      	ldr	r3, [pc, #312]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000ade:	809a      	strh	r2, [r3, #4]
		PROC[3] = (PROC[3] + IN4_1_Current_Sense[i])/2;
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000ae2:	88db      	ldrh	r3, [r3, #6]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4a50      	ldr	r2, [pc, #320]	@ (8000c28 <Current_Sense_process+0x1dc>)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aee:	440b      	add	r3, r1
 8000af0:	0fda      	lsrs	r2, r3, #31
 8000af2:	4413      	add	r3, r2
 8000af4:	105b      	asrs	r3, r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b47      	ldr	r3, [pc, #284]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000afa:	80da      	strh	r2, [r3, #6]
		PROC[4] = (PROC[4] + IN1_2_Current_Sense[i])/2;
 8000afc:	4b46      	ldr	r3, [pc, #280]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000afe:	891b      	ldrh	r3, [r3, #8]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4a4a      	ldr	r2, [pc, #296]	@ (8000c2c <Current_Sense_process+0x1e0>)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	0fda      	lsrs	r2, r3, #31
 8000b0e:	4413      	add	r3, r2
 8000b10:	105b      	asrs	r3, r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b16:	811a      	strh	r2, [r3, #8]
		PROC[5] = (PROC[5] + IN2_2_Current_Sense[i])/2;
 8000b18:	4b3f      	ldr	r3, [pc, #252]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b1a:	895b      	ldrh	r3, [r3, #10]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4a44      	ldr	r2, [pc, #272]	@ (8000c30 <Current_Sense_process+0x1e4>)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b26:	440b      	add	r3, r1
 8000b28:	0fda      	lsrs	r2, r3, #31
 8000b2a:	4413      	add	r3, r2
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b32:	815a      	strh	r2, [r3, #10]
		PROC[6] = (PROC[6] + IN3_2_Current_Sense[i])/2;
 8000b34:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b36:	899b      	ldrh	r3, [r3, #12]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c34 <Current_Sense_process+0x1e8>)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	440b      	add	r3, r1
 8000b44:	0fda      	lsrs	r2, r3, #31
 8000b46:	4413      	add	r3, r2
 8000b48:	105b      	asrs	r3, r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b32      	ldr	r3, [pc, #200]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b4e:	819a      	strh	r2, [r3, #12]
		PROC[7] = (PROC[7] + IN4_2_Current_Sense[i])/2;
 8000b50:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b52:	89db      	ldrh	r3, [r3, #14]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4a38      	ldr	r2, [pc, #224]	@ (8000c38 <Current_Sense_process+0x1ec>)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5e:	440b      	add	r3, r1
 8000b60:	0fda      	lsrs	r2, r3, #31
 8000b62:	4413      	add	r3, r2
 8000b64:	105b      	asrs	r3, r3, #1
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b6a:	81da      	strh	r2, [r3, #14]
	for(int i = 1; i < I_AVERAGE; i++){
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	dd89      	ble.n	8000a8c <Current_Sense_process+0x40>
	}
	PROC[0] = Current_Sense_Raw_to_mA(PROC[0]);
 8000b78:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 facb 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b88:	801a      	strh	r2, [r3, #0]
	PROC[1] = Current_Sense_Raw_to_mA(PROC[1]);
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fac2 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b9a:	805a      	strh	r2, [r3, #2]
	PROC[2] = Current_Sense_Raw_to_mA(PROC[2]);
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000b9e:	889b      	ldrh	r3, [r3, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fab9 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bac:	809a      	strh	r2, [r3, #4]
	PROC[3] = Current_Sense_Raw_to_mA(PROC[3]);
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bb0:	88db      	ldrh	r3, [r3, #6]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fab0 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bbe:	80da      	strh	r2, [r3, #6]
	PROC[4] = Current_Sense_Raw_to_mA(PROC[4]);
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bc2:	891b      	ldrh	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 faa7 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bd0:	811a      	strh	r2, [r3, #8]
	PROC[5] = Current_Sense_Raw_to_mA(PROC[5]);
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bd4:	895b      	ldrh	r3, [r3, #10]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa9e 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000be2:	815a      	strh	r2, [r3, #10]
	PROC[6] = Current_Sense_Raw_to_mA(PROC[6]);
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000be6:	899b      	ldrh	r3, [r3, #12]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fa95 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bf4:	819a      	strh	r2, [r3, #12]
	PROC[7] = Current_Sense_Raw_to_mA(PROC[7]);
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000bf8:	89db      	ldrh	r3, [r3, #14]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fa8c 	bl	8001118 <Current_Sense_Raw_to_mA>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <Current_Sense_process+0x1cc>)
 8000c06:	81da      	strh	r2, [r3, #14]
	check_warnings();
 8000c08:	f000 f818 	bl	8000c3c <check_warnings>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000059c 	.word	0x2000059c
 8000c18:	20000588 	.word	0x20000588
 8000c1c:	20000388 	.word	0x20000388
 8000c20:	200003c8 	.word	0x200003c8
 8000c24:	20000408 	.word	0x20000408
 8000c28:	20000448 	.word	0x20000448
 8000c2c:	20000488 	.word	0x20000488
 8000c30:	200004c8 	.word	0x200004c8
 8000c34:	20000508 	.word	0x20000508
 8000c38:	20000548 	.word	0x20000548

08000c3c <check_warnings>:

void check_warnings(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	for(uint8_t x = 0; x < 7; x++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	e041      	b.n	8000ccc <check_warnings+0x90>
		if(outputs[x].actual_current >= outputs[x].Warning_Current){
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <check_warnings+0xa4>)
 8000c4c:	214c      	movs	r1, #76	@ 0x4c
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	330a      	adds	r3, #10
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4921      	ldr	r1, [pc, #132]	@ (8000ce0 <check_warnings+0xa4>)
 8000c5c:	204c      	movs	r0, #76	@ 0x4c
 8000c5e:	fb00 f303 	mul.w	r3, r0, r3
 8000c62:	440b      	add	r3, r1
 8000c64:	3304      	adds	r3, #4
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d32c      	bcc.n	8000cc6 <check_warnings+0x8a>
			if(outputs[x].actual_current >= outputs[x].Over_Current){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce0 <check_warnings+0xa4>)
 8000c70:	214c      	movs	r1, #76	@ 0x4c
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	330a      	adds	r3, #10
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4918      	ldr	r1, [pc, #96]	@ (8000ce0 <check_warnings+0xa4>)
 8000c80:	204c      	movs	r0, #76	@ 0x4c
 8000c82:	fb00 f303 	mul.w	r3, r0, r3
 8000c86:	440b      	add	r3, r1
 8000c88:	3302      	adds	r3, #2
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d316      	bcc.n	8000cbe <check_warnings+0x82>
				Default_Switch_State = set_bit(Default_Switch_State, outputs[x].pin, 0);
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <check_warnings+0xa8>)
 8000c92:	7818      	ldrb	r0, [r3, #0]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <check_warnings+0xa4>)
 8000c98:	214c      	movs	r1, #76	@ 0x4c
 8000c9a:	fb01 f303 	mul.w	r3, r1, r3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f000 fa10 	bl	80010cc <set_bit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <check_warnings+0xa8>)
 8000cb2:	701a      	strb	r2, [r3, #0]
				Over_current(x);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe24 	bl	8000904 <Over_current>
 8000cbc:	e003      	b.n	8000cc6 <check_warnings+0x8a>
			}else{
				Warning_current(x);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe33 	bl	800092c <Warning_current>
	for(uint8_t x = 0; x < 7; x++){
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d9ba      	bls.n	8000c48 <check_warnings+0xc>
		}
	/*	if(PROC[x] < Under_Current[x]){
			Under_current(x);
		}*/
	}
	switch_output();
 8000cd2:	f7ff fd9b 	bl	800080c <switch_output>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000059c 	.word	0x2000059c
 8000ce4:	20000832 	.word	0x20000832

08000ce8 <Current_Sense_read>:

void Current_Sense_read(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
	for(int x = 0; x < 5; x++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e1be      	b.n	8001072 <Current_Sense_read+0x38a>
		switch(x){
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	f200 81b8 	bhi.w	800106c <Current_Sense_read+0x384>
 8000cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000d04 <Current_Sense_read+0x1c>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000de5 	.word	0x08000de5
 8000d0c:	08000eb5 	.word	0x08000eb5
 8000d10:	08000f85 	.word	0x08000f85
		case 0:
			Current_Sense_SEL[0] = 0;
 8000d14:	4ba7      	ldr	r3, [pc, #668]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 0;
 8000d1a:	4ba6      	ldr	r3, [pc, #664]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000d20:	4ba4      	ldr	r3, [pc, #656]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2140      	movs	r1, #64	@ 0x40
 8000d28:	48a3      	ldr	r0, [pc, #652]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000d2a:	f004 f917 	bl	8004f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000d2e:	4ba1      	ldr	r3, [pc, #644]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000d30:	785b      	ldrb	r3, [r3, #1]
 8000d32:	461a      	mov	r2, r3
 8000d34:	2120      	movs	r1, #32
 8000d36:	48a0      	ldr	r0, [pc, #640]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000d38:	f004 f910 	bl	8004f5c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	e04c      	b.n	8000ddc <Current_Sense_read+0xf4>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000d42:	489e      	ldr	r0, [pc, #632]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000d44:	f001 feb6 	bl	8002ab4 <HAL_ADC_Start>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <Current_Sense_read+0x6a>
 8000d4e:	f000 ff1b 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000d52:	489b      	ldr	r0, [pc, #620]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000d54:	f001 feae 	bl	8002ab4 <HAL_ADC_Start>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <Current_Sense_read+0x7a>
 8000d5e:	f000 ff13 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000d62:	2164      	movs	r1, #100	@ 0x64
 8000d64:	4895      	ldr	r0, [pc, #596]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000d66:	f001 ff95 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <Current_Sense_read+0x8c>
 8000d70:	f000 ff0a 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000d74:	2164      	movs	r1, #100	@ 0x64
 8000d76:	4892      	ldr	r0, [pc, #584]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000d78:	f001 ff8c 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <Current_Sense_read+0x9e>
 8000d82:	f000 ff01 	bl	8001b88 <Error_Handler>
				outputs[0].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000d86:	488d      	ldr	r0, [pc, #564]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000d88:	f002 f9c7 	bl	800311a <HAL_ADC_GetValue>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	4a8c      	ldr	r2, [pc, #560]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	3304      	adds	r3, #4
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	809a      	strh	r2, [r3, #4]
				outputs[4].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000d9e:	4888      	ldr	r0, [pc, #544]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000da0:	f002 f9bb 	bl	800311a <HAL_ADC_GetValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b299      	uxth	r1, r3
 8000da8:	4a86      	ldr	r2, [pc, #536]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	339c      	adds	r3, #156	@ 0x9c
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	460a      	mov	r2, r1
 8000db4:	809a      	strh	r2, [r3, #4]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000db6:	4881      	ldr	r0, [pc, #516]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000db8:	f001 ff38 	bl	8002c2c <HAL_ADC_Stop>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <Current_Sense_read+0xde>
 8000dc2:	f000 fee1 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000dc6:	487e      	ldr	r0, [pc, #504]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000dc8:	f001 ff30 	bl	8002c2c <HAL_ADC_Stop>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <Current_Sense_read+0xee>
 8000dd2:	f000 fed9 	bl	8001b88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b1f      	cmp	r3, #31
 8000de0:	ddaf      	ble.n	8000d42 <Current_Sense_read+0x5a>
			}
			break;
 8000de2:	e143      	b.n	800106c <Current_Sense_read+0x384>
		case 1:
			Current_Sense_SEL[0] = 0;
 8000de4:	4b73      	ldr	r3, [pc, #460]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 1;
 8000dea:	4b72      	ldr	r3, [pc, #456]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000df0:	4b70      	ldr	r3, [pc, #448]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	2140      	movs	r1, #64	@ 0x40
 8000df8:	486f      	ldr	r0, [pc, #444]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000dfa:	f004 f8af 	bl	8004f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2120      	movs	r1, #32
 8000e06:	486c      	ldr	r0, [pc, #432]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000e08:	f004 f8a8 	bl	8004f5c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e04c      	b.n	8000eac <Current_Sense_read+0x1c4>
				if(HAL_ADC_Start(&hadc1)!=HAL_OK){Error_Handler();}
 8000e12:	486a      	ldr	r0, [pc, #424]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000e14:	f001 fe4e 	bl	8002ab4 <HAL_ADC_Start>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <Current_Sense_read+0x13a>
 8000e1e:	f000 feb3 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Start(&hadc2)!=HAL_OK){Error_Handler();}
 8000e22:	4867      	ldr	r0, [pc, #412]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000e24:	f001 fe46 	bl	8002ab4 <HAL_ADC_Start>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Current_Sense_read+0x14a>
 8000e2e:	f000 feab 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000e32:	2164      	movs	r1, #100	@ 0x64
 8000e34:	4861      	ldr	r0, [pc, #388]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000e36:	f001 ff2d 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <Current_Sense_read+0x15c>
 8000e40:	f000 fea2 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000e44:	2164      	movs	r1, #100	@ 0x64
 8000e46:	485e      	ldr	r0, [pc, #376]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000e48:	f001 ff24 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <Current_Sense_read+0x16e>
 8000e52:	f000 fe99 	bl	8001b88 <Error_Handler>
				outputs[1].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000e56:	4859      	ldr	r0, [pc, #356]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000e58:	f002 f95f 	bl	800311a <HAL_ADC_GetValue>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b299      	uxth	r1, r3
 8000e60:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	332a      	adds	r3, #42	@ 0x2a
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	809a      	strh	r2, [r3, #4]
				outputs[5].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000e6e:	4854      	ldr	r0, [pc, #336]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000e70:	f002 f953 	bl	800311a <HAL_ADC_GetValue>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b299      	uxth	r1, r3
 8000e78:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	33c2      	adds	r3, #194	@ 0xc2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	460a      	mov	r2, r1
 8000e84:	809a      	strh	r2, [r3, #4]
				if(HAL_ADC_Stop(&hadc1)!=HAL_OK){Error_Handler();}
 8000e86:	484d      	ldr	r0, [pc, #308]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000e88:	f001 fed0 	bl	8002c2c <HAL_ADC_Stop>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <Current_Sense_read+0x1ae>
 8000e92:	f000 fe79 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Stop(&hadc2)!=HAL_OK){Error_Handler();}
 8000e96:	484a      	ldr	r0, [pc, #296]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000e98:	f001 fec8 	bl	8002c2c <HAL_ADC_Stop>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <Current_Sense_read+0x1be>
 8000ea2:	f000 fe71 	bl	8001b88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b1f      	cmp	r3, #31
 8000eb0:	ddaf      	ble.n	8000e12 <Current_Sense_read+0x12a>
			}
			break;
 8000eb2:	e0db      	b.n	800106c <Current_Sense_read+0x384>
		case 2:
			//chip_select_read();
			Current_Sense_SEL[0] = 1;
 8000eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 0;
 8000eba:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2140      	movs	r1, #64	@ 0x40
 8000ec8:	483b      	ldr	r0, [pc, #236]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000eca:	f004 f847 	bl	8004f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000ece:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4838      	ldr	r0, [pc, #224]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000ed8:	f004 f840 	bl	8004f5c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	e04c      	b.n	8000f7c <Current_Sense_read+0x294>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000ee2:	4836      	ldr	r0, [pc, #216]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000ee4:	f001 ffae 	bl	8002e44 <HAL_ADC_Start_IT>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <Current_Sense_read+0x20a>
 8000eee:	f000 fe4b 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ef2:	4833      	ldr	r0, [pc, #204]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000ef4:	f001 ffa6 	bl	8002e44 <HAL_ADC_Start_IT>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <Current_Sense_read+0x21a>
 8000efe:	f000 fe43 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000f02:	2164      	movs	r1, #100	@ 0x64
 8000f04:	482d      	ldr	r0, [pc, #180]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000f06:	f001 fec5 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <Current_Sense_read+0x22c>
 8000f10:	f000 fe3a 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000f14:	2164      	movs	r1, #100	@ 0x64
 8000f16:	482a      	ldr	r0, [pc, #168]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000f18:	f001 febc 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <Current_Sense_read+0x23e>
 8000f22:	f000 fe31 	bl	8001b88 <Error_Handler>
				outputs[3].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000f26:	4825      	ldr	r0, [pc, #148]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000f28:	f002 f8f7 	bl	800311a <HAL_ADC_GetValue>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	4a24      	ldr	r2, [pc, #144]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	3376      	adds	r3, #118	@ 0x76
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	809a      	strh	r2, [r3, #4]
				outputs[6].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000f3e:	4820      	ldr	r0, [pc, #128]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000f40:	f002 f8eb 	bl	800311a <HAL_ADC_GetValue>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b299      	uxth	r1, r3
 8000f48:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc4 <Current_Sense_read+0x2dc>)
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	33e8      	adds	r3, #232	@ 0xe8
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	460a      	mov	r2, r1
 8000f54:	809a      	strh	r2, [r3, #4]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000f56:	4819      	ldr	r0, [pc, #100]	@ (8000fbc <Current_Sense_read+0x2d4>)
 8000f58:	f002 f8a4 	bl	80030a4 <HAL_ADC_Stop_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <Current_Sense_read+0x27e>
 8000f62:	f000 fe11 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <Current_Sense_read+0x2d8>)
 8000f68:	f002 f89c 	bl	80030a4 <HAL_ADC_Stop_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <Current_Sense_read+0x28e>
 8000f72:	f000 fe09 	bl	8001b88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b1f      	cmp	r3, #31
 8000f80:	ddaf      	ble.n	8000ee2 <Current_Sense_read+0x1fa>
			}
			break;
 8000f82:	e073      	b.n	800106c <Current_Sense_read+0x384>
		case 3:
			Current_Sense_SEL[0] = 1;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
			Current_Sense_SEL[1] = 1;
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,Current_Sense_SEL[0]);
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	2140      	movs	r1, #64	@ 0x40
 8000f98:	4807      	ldr	r0, [pc, #28]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000f9a:	f003 ffdf 	bl	8004f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,Current_Sense_SEL[1]);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Current_Sense_read+0x2cc>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <Current_Sense_read+0x2d0>)
 8000fa8:	f003 ffd8 	bl	8004f5c <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e058      	b.n	8001064 <Current_Sense_read+0x37c>
 8000fb2:	bf00      	nop
 8000fb4:	20000830 	.word	0x20000830
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	20000038 	.word	0x20000038
 8000fc0:	200000a4 	.word	0x200000a4
 8000fc4:	2000059c 	.word	0x2000059c
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000fc8:	482f      	ldr	r0, [pc, #188]	@ (8001088 <Current_Sense_read+0x3a0>)
 8000fca:	f001 ff3b 	bl	8002e44 <HAL_ADC_Start_IT>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <Current_Sense_read+0x2f0>
 8000fd4:	f000 fdd8 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000fd8:	482c      	ldr	r0, [pc, #176]	@ (800108c <Current_Sense_read+0x3a4>)
 8000fda:	f001 ff33 	bl	8002e44 <HAL_ADC_Start_IT>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <Current_Sense_read+0x300>
 8000fe4:	f000 fdd0 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK){Error_Handler();}
 8000fe8:	2164      	movs	r1, #100	@ 0x64
 8000fea:	4827      	ldr	r0, [pc, #156]	@ (8001088 <Current_Sense_read+0x3a0>)
 8000fec:	f001 fe52 	bl	8002c94 <HAL_ADC_PollForConversion>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <Current_Sense_read+0x312>
 8000ff6:	f000 fdc7 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,100)!=HAL_OK){Error_Handler();}
 8000ffa:	2164      	movs	r1, #100	@ 0x64
 8000ffc:	4823      	ldr	r0, [pc, #140]	@ (800108c <Current_Sense_read+0x3a4>)
 8000ffe:	f001 fe49 	bl	8002c94 <HAL_ADC_PollForConversion>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <Current_Sense_read+0x324>
 8001008:	f000 fdbe 	bl	8001b88 <Error_Handler>
				outputs[4].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 800100c:	481e      	ldr	r0, [pc, #120]	@ (8001088 <Current_Sense_read+0x3a0>)
 800100e:	f002 f884 	bl	800311a <HAL_ADC_GetValue>
 8001012:	4603      	mov	r3, r0
 8001014:	b299      	uxth	r1, r3
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <Current_Sense_read+0x3a8>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	339c      	adds	r3, #156	@ 0x9c
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	460a      	mov	r2, r1
 8001022:	809a      	strh	r2, [r3, #4]
				outputs[7].Current_Sense[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8001024:	4819      	ldr	r0, [pc, #100]	@ (800108c <Current_Sense_read+0x3a4>)
 8001026:	f002 f878 	bl	800311a <HAL_ADC_GetValue>
 800102a:	4603      	mov	r3, r0
 800102c:	b299      	uxth	r1, r3
 800102e:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <Current_Sense_read+0x3a8>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	809a      	strh	r2, [r3, #4]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <Current_Sense_read+0x3a0>)
 8001040:	f002 f830 	bl	80030a4 <HAL_ADC_Stop_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <Current_Sense_read+0x366>
 800104a:	f000 fd9d 	bl	8001b88 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <Current_Sense_read+0x3a4>)
 8001050:	f002 f828 	bl	80030a4 <HAL_ADC_Stop_IT>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <Current_Sense_read+0x376>
 800105a:	f000 fd95 	bl	8001b88 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3301      	adds	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b1f      	cmp	r3, #31
 8001068:	ddae      	ble.n	8000fc8 <Current_Sense_read+0x2e0>
			}
			break;
 800106a:	bf00      	nop
	for(int x = 0; x < 5; x++){
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b04      	cmp	r3, #4
 8001076:	f77f ae3d 	ble.w	8000cf4 <Current_Sense_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	Current_Sense_process();
 800107a:	f7ff fce7 	bl	8000a4c <Current_Sense_process>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000038 	.word	0x20000038
 800108c:	200000a4 	.word	0x200000a4
 8001090:	2000059c 	.word	0x2000059c

08001094 <check_bit>:


uint8_t check_bit(uint8_t byte, uint8_t bitn){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	2201      	movs	r2, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4013      	ands	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <check_bit+0x2a>
		return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <check_bit+0x2c>
	}else{
		return 0;
 80010be:	2300      	movs	r3, #0
	}
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <set_bit>:

uint8_t set_bit(uint8_t byte, uint8_t pos, uint8_t new_bit){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	460b      	mov	r3, r1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	4613      	mov	r3, r2
 80010dc:	717b      	strb	r3, [r7, #5]
	uint8_t mask = 1 << pos;
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2201      	movs	r2, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
	if(new_bit == 1){
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d104      	bne.n	80010f8 <set_bit+0x2c>
		byte |= mask;
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e008      	b.n	800110a <set_bit+0x3e>
	}else{
		byte &= ~mask;
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4013      	ands	r3, r2
 8001106:	b25b      	sxtb	r3, r3
 8001108:	71fb      	strb	r3, [r7, #7]
	}
	return byte;
 800110a:	79fb      	ldrb	r3, [r7, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <Current_Sense_Raw_to_mA>:

uint16_t Current_Sense_Raw_to_mA(uint16_t raw){
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	//4095 is the max, depending on resistors we will find the current values		3.3 V == 4,95 A
	uint32_t max_mA = 4950;
 8001122:	f241 3356 	movw	r3, #4950	@ 0x1356
 8001126:	60fb      	str	r3, [r7, #12]
	uint16_t current = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	817b      	strh	r3, [r7, #10]

	//current = raw*max_mA / 4095;
	current = raw*3300 / 4095;
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <Current_Sense_Raw_to_mA+0x3c>)
 8001138:	fb82 1203 	smull	r1, r2, r2, r3
 800113c:	441a      	add	r2, r3
 800113e:	12d2      	asrs	r2, r2, #11
 8001140:	17db      	asrs	r3, r3, #31
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	817b      	strh	r3, [r7, #10]

	return current;
 8001146:	897b      	ldrh	r3, [r7, #10]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	80080081 	.word	0x80080081

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f001 f819 	bl	8002192 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8001160:	f7ff f8a4 	bl	80002ac <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001164:	f000 f880 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001168:	f000 fcac 	bl	8001ac4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800116c:	f000 f8c6 	bl	80012fc <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001170:	f000 f9c6 	bl	8001500 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001174:	f000 fa2c 	bl	80015d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001178:	f000 fada 	bl	8001730 <MX_TIM2_Init>
  MX_TIM3_Init();
 800117c:	f000 fb4e 	bl	800181c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001180:	f000 fb9a 	bl	80018b8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001184:	f000 fc0c 	bl	80019a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001188:	f000 fc40 	bl	8001a0c <MX_TIM7_Init>
  MX_TIM16_Init();
 800118c:	f000 fc74 	bl	8001a78 <MX_TIM16_Init>
  MX_ADC2_Init();
 8001190:	f000 f950 	bl	8001434 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,0);
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f003 fede 	bl	8004f5c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Init(&htim1);
 80011a0:	4829      	ldr	r0, [pc, #164]	@ (8001248 <main+0xf0>)
 80011a2:	f004 ff4f 	bl	8006044 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 80011a6:	4829      	ldr	r0, [pc, #164]	@ (800124c <main+0xf4>)
 80011a8:	f004 ff4c 	bl	8006044 <HAL_TIM_PWM_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80011ac:	4828      	ldr	r0, [pc, #160]	@ (8001250 <main+0xf8>)
 80011ae:	f004 fedf 	bl	8005f70 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80011b2:	2100      	movs	r1, #0
 80011b4:	4824      	ldr	r0, [pc, #144]	@ (8001248 <main+0xf0>)
 80011b6:	f004 ffa7 	bl	8006108 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4823      	ldr	r0, [pc, #140]	@ (800124c <main+0xf4>)
 80011be:	f004 ffa3 	bl	8006108 <HAL_TIM_PWM_Start>

  set_pwm_duty_cycle(&htim1);
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <main+0xf0>)
 80011c4:	f7ff f828 	bl	8000218 <set_pwm_duty_cycle>
  set_pwm_duty_cycle(&htim2);
 80011c8:	4820      	ldr	r0, [pc, #128]	@ (800124c <main+0xf4>)
 80011ca:	f7ff f825 	bl	8000218 <set_pwm_duty_cycle>

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{HAL_GPIO_WritePin(GPIOB,LED1_Pin,1); }
 80011ce:	4821      	ldr	r0, [pc, #132]	@ (8001254 <main+0xfc>)
 80011d0:	f003 f876 	bl	80042c0 <HAL_FDCAN_Start>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <main+0x88>
 80011da:	f000 fcd5 	bl	8001b88 <Error_Handler>
 80011de:	e004      	b.n	80011ea <main+0x92>
 80011e0:	2201      	movs	r2, #1
 80011e2:	2101      	movs	r1, #1
 80011e4:	481c      	ldr	r0, [pc, #112]	@ (8001258 <main+0x100>)
 80011e6:	f003 feb9 	bl	8004f5c <HAL_GPIO_WritePin>
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <main+0xfc>)
 80011f0:	f003 f9ec 	bl	80045cc <HAL_FDCAN_ActivateNotification>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <main+0xa6>
 80011fa:	f000 fcc5 	bl	8001b88 <Error_Handler>

  HAL_Delay(2000);
 80011fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001202:	f001 f837 	bl	8002274 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,LED2_Pin,1);
 8001206:	2201      	movs	r2, #1
 8001208:	2180      	movs	r1, #128	@ 0x80
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f003 fea5 	bl	8004f5c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <main+0x104>)
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <main+0xf0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34

		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,PWM_speed[1]);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <main+0x104>)
 800121e:	885a      	ldrh	r2, [r3, #2]
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <main+0xf4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	635a      	str	r2, [r3, #52]	@ 0x34
	  if(millis % 100 == 0){
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <main+0x108>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <main+0x10c>)
 800122c:	fba2 1203 	umull	r1, r2, r2, r3
 8001230:	0952      	lsrs	r2, r2, #5
 8001232:	2164      	movs	r1, #100	@ 0x64
 8001234:	fb01 f202 	mul.w	r2, r1, r2
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <main+0xba>

		  Current_Sense_read();
 8001240:	f7ff fd52 	bl	8000ce8 <Current_Sense_read>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,PWM_speed[0]);
 8001244:	e7e5      	b.n	8001212 <main+0xba>
 8001246:	bf00      	nop
 8001248:	20000174 	.word	0x20000174
 800124c:	200001c0 	.word	0x200001c0
 8001250:	2000020c 	.word	0x2000020c
 8001254:	20000110 	.word	0x20000110
 8001258:	48000400 	.word	0x48000400
 800125c:	20000844 	.word	0x20000844
 8001260:	2000082c 	.word	0x2000082c
 8001264:	51eb851f 	.word	0x51eb851f

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2238      	movs	r2, #56	@ 0x38
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 f97e 	bl	8007578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800128e:	f003 fe7d 	bl	8004f8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001296:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a0:	2303      	movs	r3, #3
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80012a8:	230c      	movs	r3, #12
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80012b0:	2306      	movs	r3, #6
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 ff19 	bl	80050f4 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012c8:	f000 fc5e 	bl	8001b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2303      	movs	r3, #3
 80012d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fa17 	bl	8005718 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012f0:	f000 fc4a 	bl	8001b88 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	@ 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	@ 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 f92f 	bl	8007578 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <MX_ADC1_Init+0x128>)
 800131c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001322:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001324:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <MX_ADC1_Init+0x128>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800133c:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <MX_ADC1_Init+0x128>)
 800133e:	2201      	movs	r2, #1
 8001340:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001344:	2204      	movs	r2, #4
 8001346:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001348:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <MX_ADC1_Init+0x128>)
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800134e:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001350:	2200      	movs	r2, #0
 8001352:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001356:	2203      	movs	r2, #3
 8001358:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <MX_ADC1_Init+0x128>)
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8001362:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001364:	2201      	movs	r2, #1
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <MX_ADC1_Init+0x128>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <MX_ADC1_Init+0x128>)
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <MX_ADC1_Init+0x128>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	4826      	ldr	r0, [pc, #152]	@ (8001424 <MX_ADC1_Init+0x128>)
 800138c:	f001 fa0e 	bl	80027ac <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001396:	f000 fbf7 	bl	8001b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	481f      	ldr	r0, [pc, #124]	@ (8001424 <MX_ADC1_Init+0x128>)
 80013a6:	f002 fc7d 	bl	8003ca4 <HAL_ADCEx_MultiModeConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80013b0:	f000 fbea 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC1_Init+0x12c>)
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80013bc:	2302      	movs	r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c0:	237f      	movs	r3, #127	@ 0x7f
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c4:	2304      	movs	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4814      	ldr	r0, [pc, #80]	@ (8001424 <MX_ADC1_Init+0x128>)
 80013d2:	f001 feaf 	bl	8003134 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80013dc:	f000 fbd4 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_ADC1_Init+0x130>)
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013e4:	230c      	movs	r3, #12
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_ADC1_Init+0x128>)
 80013ee:	f001 fea1 	bl	8003134 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80013f8:	f000 fbc6 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_ADC1_Init+0x134>)
 80013fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001400:	2312      	movs	r3, #18
 8001402:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_ADC1_Init+0x128>)
 800140e:	f001 fe91 	bl	8003134 <HAL_ADC_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001418:	f000 fbb6 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	@ 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000038 	.word	0x20000038
 8001428:	04300002 	.word	0x04300002
 800142c:	0c900008 	.word	0x0c900008
 8001430:	10c00010 	.word	0x10c00010

08001434 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2220      	movs	r2, #32
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f006 f899 	bl	8007578 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001448:	4a2b      	ldr	r2, [pc, #172]	@ (80014f8 <MX_ADC2_Init+0xc4>)
 800144a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800144c:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800144e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001452:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800146e:	2204      	movs	r2, #4
 8001470:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800147a:	2200      	movs	r2, #0
 800147c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001480:	2201      	movs	r2, #1
 8001482:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800148e:	2200      	movs	r2, #0
 8001490:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 8001494:	2200      	movs	r2, #0
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014ae:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 80014b0:	f001 f97c 	bl	80027ac <HAL_ADC_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80014ba:	f000 fb65 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_ADC2_Init+0xc8>)
 80014c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c2:	2306      	movs	r3, #6
 80014c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80014c6:	2302      	movs	r3, #2
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ca:	237f      	movs	r3, #127	@ 0x7f
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ce:	2304      	movs	r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_ADC2_Init+0xc0>)
 80014dc:	f001 fe2a 	bl	8003134 <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80014e6:	f000 fb4f 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  //if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_DIFFERENTIAL_ENDED)!= HAL_OK){ Error_Handler(); }
  /* USER CODE END ADC2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000a4 	.word	0x200000a4
 80014f8:	50000100 	.word	0x50000100
 80014fc:	0c900008 	.word	0x0c900008

08001500 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001504:	4b2e      	ldr	r3, [pc, #184]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001506:	4a2f      	ldr	r2, [pc, #188]	@ (80015c4 <MX_FDCAN1_Init+0xc4>)
 8001508:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001516:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800151e:	2200      	movs	r2, #0
 8001520:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001524:	2200      	movs	r2, #0
 8001526:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800152a:	2200      	movs	r2, #0
 800152c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001530:	2201      	movs	r2, #1
 8001532:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001536:	2201      	movs	r2, #1
 8001538:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800153c:	220d      	movs	r2, #13
 800153e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001542:	2202      	movs	r2, #2
 8001544:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001548:	2201      	movs	r2, #1
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800154e:	2201      	movs	r2, #1
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001554:	2201      	movs	r2, #1
 8001556:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800155a:	2201      	movs	r2, #1
 800155c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001560:	221c      	movs	r2, #28
 8001562:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001566:	2200      	movs	r2, #0
 8001568:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 800156c:	2200      	movs	r2, #0
 800156e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001570:	4813      	ldr	r0, [pc, #76]	@ (80015c0 <MX_FDCAN1_Init+0xc0>)
 8001572:	f002 fd4b 	bl	800400c <HAL_FDCAN_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800157c:	f000 fb04 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.Identifier = CAN_ID; // Modify this with your identifier
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_FDCAN1_Init+0xc8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 8001588:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = 5;
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 8001598:	2205      	movs	r2, #5
 800159a:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <MX_FDCAN1_Init+0xcc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000110 	.word	0x20000110
 80015c4:	40006400 	.word	0x40006400
 80015c8:	20000848 	.word	0x20000848
 80015cc:	2000084c 	.word	0x2000084c

080015d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09c      	sub	sp, #112	@ 0x70
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2234      	movs	r2, #52	@ 0x34
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f005 ffb4 	bl	8007578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001610:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001612:	4a46      	ldr	r2, [pc, #280]	@ (800172c <MX_TIM1_Init+0x15c>)
 8001614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001618:	220f      	movs	r2, #15
 800161a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <MX_TIM1_Init+0x158>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001624:	2227      	movs	r2, #39	@ 0x27
 8001626:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <MX_TIM1_Init+0x158>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163a:	483b      	ldr	r0, [pc, #236]	@ (8001728 <MX_TIM1_Init+0x158>)
 800163c:	f004 fc40 	bl	8005ec0 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001646:	f000 fa9f 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001654:	4619      	mov	r1, r3
 8001656:	4834      	ldr	r0, [pc, #208]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001658:	f005 f8ba 	bl	80067d0 <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001662:	f000 fa91 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001666:	4830      	ldr	r0, [pc, #192]	@ (8001728 <MX_TIM1_Init+0x158>)
 8001668:	f004 fcec 	bl	8006044 <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001672:	f000 fa89 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001682:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001686:	4619      	mov	r1, r3
 8001688:	4827      	ldr	r0, [pc, #156]	@ (8001728 <MX_TIM1_Init+0x158>)
 800168a:	f005 fe21 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001694:	f000 fa78 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	@ 0x60
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	481a      	ldr	r0, [pc, #104]	@ (8001728 <MX_TIM1_Init+0x158>)
 80016be:	f004 ff73 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80016c8:	f000 fa5e 	bl	8001b88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	@ (8001728 <MX_TIM1_Init+0x158>)
 800170a:	f005 fe63 	bl	80073d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001714:	f000 fa38 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001718:	4803      	ldr	r0, [pc, #12]	@ (8001728 <MX_TIM1_Init+0x158>)
 800171a:	f000 fc19 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3770      	adds	r7, #112	@ 0x70
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000174 	.word	0x20000174
 800172c:	40012c00 	.word	0x40012c00

08001730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	@ 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <MX_TIM2_Init+0xe8>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001768:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <MX_TIM2_Init+0xe8>)
 800176c:	220f      	movs	r2, #15
 800176e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <MX_TIM2_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <MX_TIM2_Init+0xe8>)
 8001778:	2227      	movs	r2, #39	@ 0x27
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <MX_TIM2_Init+0xe8>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <MX_TIM2_Init+0xe8>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	4823      	ldr	r0, [pc, #140]	@ (8001818 <MX_TIM2_Init+0xe8>)
 800178a:	f004 fb99 	bl	8005ec0 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001794:	f000 f9f8 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a2:	4619      	mov	r1, r3
 80017a4:	481c      	ldr	r0, [pc, #112]	@ (8001818 <MX_TIM2_Init+0xe8>)
 80017a6:	f005 f813 	bl	80067d0 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017b0:	f000 f9ea 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b4:	4818      	ldr	r0, [pc, #96]	@ (8001818 <MX_TIM2_Init+0xe8>)
 80017b6:	f004 fc45 	bl	8006044 <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017c0:	f000 f9e2 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4811      	ldr	r0, [pc, #68]	@ (8001818 <MX_TIM2_Init+0xe8>)
 80017d4:	f005 fd7c 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017de:	f000 f9d3 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e2:	2360      	movs	r3, #96	@ 0x60
 80017e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	@ (8001818 <MX_TIM2_Init+0xe8>)
 80017fa:	f004 fed5 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001804:	f000 f9c0 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <MX_TIM2_Init+0xe8>)
 800180a:	f000 fba1 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 800180e:	bf00      	nop
 8001810:	3738      	adds	r7, #56	@ 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001c0 	.word	0x200001c0

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <MX_TIM3_Init+0x98>)
 800183e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001842:	223f      	movs	r2, #63	@ 0x3f
 8001844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800184e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001860:	4813      	ldr	r0, [pc, #76]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001862:	f004 fb2d 	bl	8005ec0 <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800186c:	f000 f98c 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001874:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800187e:	f004 ffa7 	bl	80067d0 <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001888:	f000 f97e 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800189a:	f005 fd19 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018a4:	f000 f970 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000020c 	.word	0x2000020c
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <MX_TIM4_Init+0xe0>)
 80018ec:	4a2b      	ldr	r2, [pc, #172]	@ (800199c <MX_TIM4_Init+0xe4>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <MX_TIM4_Init+0xe0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <MX_TIM4_Init+0xe0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <MX_TIM4_Init+0xe0>)
 80018fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <MX_TIM4_Init+0xe0>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <MX_TIM4_Init+0xe0>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001910:	4821      	ldr	r0, [pc, #132]	@ (8001998 <MX_TIM4_Init+0xe0>)
 8001912:	f004 fad5 	bl	8005ec0 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800191c:	f000 f934 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	4619      	mov	r1, r3
 800192c:	481a      	ldr	r0, [pc, #104]	@ (8001998 <MX_TIM4_Init+0xe0>)
 800192e:	f004 ff4f 	bl	80067d0 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001938:	f000 f926 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800193c:	4816      	ldr	r0, [pc, #88]	@ (8001998 <MX_TIM4_Init+0xe0>)
 800193e:	f004 fb81 	bl	8006044 <HAL_TIM_PWM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001948:	f000 f91e 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	480f      	ldr	r0, [pc, #60]	@ (8001998 <MX_TIM4_Init+0xe0>)
 800195c:	f005 fcb8 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001966:	f000 f90f 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	@ 0x60
 800196c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_TIM4_Init+0xe0>)
 8001982:	f004 fe11 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800198c:	f000 f8fc 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	3738      	adds	r7, #56	@ 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000258 	.word	0x20000258
 800199c:	40000800 	.word	0x40000800

080019a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019b2:	4a15      	ldr	r2, [pc, #84]	@ (8001a08 <MX_TIM6_Init+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019d2:	f004 fa75 	bl	8005ec0 <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019dc:	f000 f8d4 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_TIM6_Init+0x64>)
 80019ee:	f005 fc6f 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019f8:	f000 f8c6 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200002a4 	.word	0x200002a4
 8001a08:	40001000 	.word	0x40001000

08001a0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	@ (8001a74 <MX_TIM7_Init+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a3e:	f004 fa3f 	bl	8005ec0 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001a48:	f000 f89e 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_TIM7_Init+0x64>)
 8001a5a:	f005 fc39 	bl	80072d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001a64:	f000 f890 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002f0 	.word	0x200002f0
 8001a74:	40001400 	.word	0x40001400

08001a78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <MX_TIM16_Init+0x48>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <MX_TIM16_Init+0x44>)
 8001aaa:	f004 fa09 	bl	8005ec0 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ab4:	f000 f868 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000033c 	.word	0x2000033c
 8001ac0:	40014400 	.word	0x40014400

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001ae0:	f043 0320 	orr.w	r3, r3, #32
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a22      	ldr	r2, [pc, #136]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <MX_GPIO_Init+0xbc>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 8001b22:	2200      	movs	r2, #0
 8001b24:	f248 6192 	movw	r1, #34450	@ 0x8692
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2c:	f003 fa16 	bl	8004f5c <HAL_GPIO_WritePin>
                          |IN2_Pin|IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b30:	2200      	movs	r2, #0
 8001b32:	21f9      	movs	r1, #249	@ 0xf9
 8001b34:	4813      	ldr	r0, [pc, #76]	@ (8001b84 <MX_GPIO_Init+0xc0>)
 8001b36:	f003 fa11 	bl	8004f5c <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_2_Pin IN0_2_Pin LED2_Pin IN3_Pin
                           IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN0_2_Pin|LED2_Pin|IN3_Pin
 8001b3a:	f248 6392 	movw	r3, #34450	@ 0x8692
 8001b3e:	60fb      	str	r3, [r7, #12]
                          |IN2_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f003 f87f 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b5a:	23f9      	movs	r3, #249	@ 0xf9
 8001b5c:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_GPIO_Init+0xc0>)
 8001b72:	f003 f871 	bl	8004c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48000400 	.word	0x48000400

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <Error_Handler+0x8>

08001b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_MspInit+0x44>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bca:	f003 fa83 	bl	80050d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09c      	sub	sp, #112	@ 0x70
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	2244      	movs	r2, #68	@ 0x44
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 fcbb 	bl	8007578 <memset>
  if(hadc->Instance==ADC1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c0a:	d13e      	bne.n	8001c8a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c10:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 ff5f 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c28:	f7ff ffae 	bl	8001b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a39      	ldr	r2, [pc, #228]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001c34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c36:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10b      	bne.n	8001c56 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	4a36      	ldr	r2, [pc, #216]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	4a30      	ldr	r2, [pc, #192]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c62:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001c6e:	230d      	movs	r3, #13
 8001c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c84:	f002 ffe8 	bl	8004c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c88:	e042      	b.n	8001d10 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a24      	ldr	r2, [pc, #144]	@ (8001d20 <HAL_ADC_MspInit+0x144>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d13d      	bne.n	8001d10 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c9e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 ff1b 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001cb0:	f7ff ff6a 	bl	8001b88 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001cbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_ADC_MspInit+0x13c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10b      	bne.n	8001cde <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001ccc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_ADC_MspInit+0x140>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cf6:	2340      	movs	r3, #64	@ 0x40
 8001cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0c:	f002 ffa4 	bl	8004c58 <HAL_GPIO_Init>
}
 8001d10:	bf00      	nop
 8001d12:	3770      	adds	r7, #112	@ 0x70
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000898 	.word	0x20000898
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	50000100 	.word	0x50000100

08001d24 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b09a      	sub	sp, #104	@ 0x68
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2244      	movs	r2, #68	@ 0x44
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 fc17 	bl	8007578 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <HAL_FDCAN_MspInit+0xbc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d141      	bne.n	8001dd8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d5e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 febb 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d70:	f7ff ff0a 	bl	8001b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	4a1a      	ldr	r2, [pc, #104]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d80:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_FDCAN_MspInit+0xc0>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001da4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001da8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001db6:	2309      	movs	r3, #9
 8001db8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc4:	f002 ff48 	bl	8004c58 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2015      	movs	r0, #21
 8001dce:	f002 f8e8 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001dd2:	2015      	movs	r0, #21
 8001dd4:	f002 f8ff 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3768      	adds	r7, #104	@ 0x68
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40006400 	.word	0x40006400
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f34 <HAL_TIM_Base_MspInit+0x14c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10c      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfe:	4a4e      	ldr	r2, [pc, #312]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e06:	4b4c      	ldr	r3, [pc, #304]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e12:	e08a      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1c:	d114      	bne.n	8001e48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1e:	4b46      	ldr	r3, [pc, #280]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	4a45      	ldr	r2, [pc, #276]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2a:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	201c      	movs	r0, #28
 8001e3c:	f002 f8b1 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e40:	201c      	movs	r0, #28
 8001e42:	f002 f8c8 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 8001e46:	e070      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f3c <HAL_TIM_Base_MspInit+0x154>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d114      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e52:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a38      	ldr	r2, [pc, #224]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5e:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	201d      	movs	r0, #29
 8001e70:	f002 f897 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e74:	201d      	movs	r0, #29
 8001e76:	f002 f8ae 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 8001e7a:	e056      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2f      	ldr	r2, [pc, #188]	@ (8001f40 <HAL_TIM_Base_MspInit+0x158>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d114      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	201e      	movs	r0, #30
 8001ea4:	f002 f87d 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ea8:	201e      	movs	r0, #30
 8001eaa:	f002 f894 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 8001eae:	e03c      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <HAL_TIM_Base_MspInit+0x15c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
}
 8001ed2:	e02a      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_TIM_Base_MspInit+0x160>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d114      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2037      	movs	r0, #55	@ 0x37
 8001efc:	f002 f851 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f00:	2037      	movs	r0, #55	@ 0x37
 8001f02:	f002 f868 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
}
 8001f06:	e010      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_TIM_Base_MspInit+0x164>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10b      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f16:	4a08      	ldr	r2, [pc, #32]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_TIM_Base_MspInit+0x150>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40012c00 	.word	0x40012c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40001000 	.word	0x40001000
 8001f48:	40001400 	.word	0x40001400
 8001f4c:	40014400 	.word	0x40014400

08001f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	@ (8001ffc <HAL_TIM_MspPostInit+0xac>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11e      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001faa:	f002 fe55 	bl	8004c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fae:	e021      	b.n	8001ff4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_TIM_MspPostInit+0xb0>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f002 fe32 	bl	8004c58 <HAL_GPIO_Init>
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40021000 	.word	0x40021000

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <NMI_Handler+0x4>

0800200c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <HardFault_Handler+0x4>

08002014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <MemManage_Handler+0x4>

0800201c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <UsageFault_Handler+0x4>

0800202c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205a:	f000 f8ed 	bl	8002238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <FDCAN1_IT0_IRQHandler+0x10>)
 800206a:	f002 fb95 	bl	8004798 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000110 	.word	0x20000110

08002078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM2_IRQHandler+0x10>)
 800207e:	f004 f943 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200001c0 	.word	0x200001c0

0800208c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	millis++;
 8002090:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <TIM3_IRQHandler+0x58>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <TIM3_IRQHandler+0x58>)
 800209a:	801a      	strh	r2, [r3, #0]
	if(millis % (CAN_interval/2) == 0){
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <TIM3_IRQHandler+0x58>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <TIM3_IRQHandler+0x5c>)
 80020a2:	8812      	ldrh	r2, [r2, #0]
 80020a4:	0852      	lsrs	r2, r2, #1
 80020a6:	b292      	uxth	r2, r2
 80020a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020ac:	fb01 f202 	mul.w	r2, r1, r2
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <TIM3_IRQHandler+0x4c>
		  CAN_switch_state(can_select);
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <TIM3_IRQHandler+0x60>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fb4b 	bl	8000758 <CAN_switch_state>
		  if(can_select == 0){
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <TIM3_IRQHandler+0x60>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <TIM3_IRQHandler+0x46>
			  can_select = 1;
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <TIM3_IRQHandler+0x60>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e002      	b.n	80020d8 <TIM3_IRQHandler+0x4c>
		  }else{
			  can_select = 0;
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <TIM3_IRQHandler+0x60>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
		  }
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d8:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <TIM3_IRQHandler+0x64>)
 80020da:	f004 f915 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000082c 	.word	0x2000082c
 80020e8:	2000084a 	.word	0x2000084a
 80020ec:	2000082e 	.word	0x2000082e
 80020f0:	2000020c 	.word	0x2000020c

080020f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <TIM4_IRQHandler+0x10>)
 80020fa:	f004 f905 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000258 	.word	0x20000258

08002108 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <TIM7_IRQHandler+0x10>)
 800210e:	f004 f8fb 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002f0 	.word	0x200002f0

0800211c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <SystemInit+0x20>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	4a05      	ldr	r2, [pc, #20]	@ (800213c <SystemInit+0x20>)
 8002128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800212c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002140:	480d      	ldr	r0, [pc, #52]	@ (8002178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002142:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480d      	ldr	r0, [pc, #52]	@ (800217c <LoopForever+0x6>)
  ldr r1, =_edata
 8002146:	490e      	ldr	r1, [pc, #56]	@ (8002180 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002148:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <LoopForever+0xe>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <LoopForever+0x12>)
  ldr r4, =_ebss
 800215c:	4c0b      	ldr	r4, [pc, #44]	@ (800218c <LoopForever+0x16>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800216a:	f7ff ffd7 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216e:	f005 fa0b 	bl	8007588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002172:	f7fe fff1 	bl	8001158 <main>

08002176 <LoopForever>:

LoopForever:
    b LoopForever
 8002176:	e7fe      	b.n	8002176 <LoopForever>
  ldr   r0, =_estack
 8002178:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800217c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002180:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002184:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 8002188:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800218c:	200008a0 	.word	0x200008a0

08002190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002190:	e7fe      	b.n	8002190 <ADC1_2_IRQHandler>

08002192 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f001 fef5 	bl	8003f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f80e 	bl	80021c4 <HAL_InitTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	71fb      	strb	r3, [r7, #7]
 80021b2:	e001      	b.n	80021b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021b4:	f7ff fcee 	bl	8001b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b8:	79fb      	ldrb	r3, [r7, #7]

}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_InitTick+0x68>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d022      	beq.n	800221e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_InitTick+0x6c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_InitTick+0x68>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 ff00 	bl	8003ff2 <HAL_SYSTICK_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10f      	bne.n	8002218 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	d809      	bhi.n	8002212 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fe:	2200      	movs	r2, #0
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	f001 fecc 	bl	8003fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <HAL_InitTick+0x70>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e007      	b.n	8002222 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e004      	b.n	8002222 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e001      	b.n	8002222 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000008 	.word	0x20000008
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_IncTick+0x1c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_IncTick+0x20>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4413      	add	r3, r2
 8002246:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_IncTick+0x1c>)
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	2000089c 	.word	0x2000089c
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000089c 	.word	0x2000089c

08002274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff ffee 	bl	800225c <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d004      	beq.n	8002298 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_Delay+0x40>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002298:	bf00      	nop
 800229a:	f7ff ffdf 	bl	800225c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d8f7      	bhi.n	800229a <HAL_Delay+0x26>
  {
  }
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000008 	.word	0x20000008

080022b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3360      	adds	r3, #96	@ 0x60
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <LL_ADC_SetOffset+0x44>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	4313      	orrs	r3, r2
 8002350:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	03fff000 	.word	0x03fff000

08002368 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3360      	adds	r3, #96	@ 0x60
 8002376:	461a      	mov	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3360      	adds	r3, #96	@ 0x60
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3360      	adds	r3, #96	@ 0x60
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	615a      	str	r2, [r3, #20]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002482:	b480      	push	{r7}
 8002484:	b087      	sub	sp, #28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3330      	adds	r3, #48	@ 0x30
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	211f      	movs	r1, #31
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 011f 	and.w	r1, r3, #31
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3314      	adds	r3, #20
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	0e5b      	lsrs	r3, r3, #25
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0d1b      	lsrs	r3, r3, #20
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2107      	movs	r1, #7
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0d1b      	lsrs	r3, r3, #20
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0318 	and.w	r3, r3, #24
 8002552:	4908      	ldr	r1, [pc, #32]	@ (8002574 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002554:	40d9      	lsrs	r1, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	400b      	ands	r3, r1
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	431a      	orrs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	0007ffff 	.word	0x0007ffff

08002578 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 031f 	and.w	r3, r3, #31
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6093      	str	r3, [r2, #8]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e8:	d101      	bne.n	80025ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800260c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002638:	d101      	bne.n	800263e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800265c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <LL_ADC_IsEnabled+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_ADC_IsEnabled+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsDisableOngoing+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsDisableOngoing+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002724:	f043 0210 	orr.w	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d101      	bne.n	8002750 <LL_ADC_REG_IsConversionOngoing+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800276e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b08      	cmp	r3, #8
 8002798:	d101      	bne.n	800279e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e167      	b.n	8002a96 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fa01 	bl	8001bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fef1 	bl	80025d4 <LL_ADC_IsDeepPowerDownEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fed7 	bl	80025b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff0c 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d115      	bne.n	800283e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fef0 	bl	80025fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa0 <HAL_ADC_Init+0x2f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4aa0      	ldr	r2, [pc, #640]	@ (8002aa4 <HAL_ADC_Init+0x2f8>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff feee 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff62 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 8002874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8100 	bne.w	8002a84 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 80fc 	bne.w	8002a84 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002894:	f043 0202 	orr.w	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fefb 	bl	800269c <LL_ADC_IsEnabled>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028b0:	f7ff fef4 	bl	800269c <LL_ADC_IsEnabled>
 80028b4:	4604      	mov	r4, r0
 80028b6:	487c      	ldr	r0, [pc, #496]	@ (8002aa8 <HAL_ADC_Init+0x2fc>)
 80028b8:	f7ff fef0 	bl	800269c <LL_ADC_IsEnabled>
 80028bc:	4603      	mov	r3, r0
 80028be:	4323      	orrs	r3, r4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4878      	ldr	r0, [pc, #480]	@ (8002aac <HAL_ADC_Init+0x300>)
 80028cc:	f7ff fcf4 	bl	80022b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7f5b      	ldrb	r3, [r3, #29]
 80028d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	045b      	lsls	r3, r3, #17
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <HAL_ADC_Init+0x304>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	69b9      	ldr	r1, [r7, #24]
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff15 	bl	8002786 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d16d      	bne.n	8002a40 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d16a      	bne.n	8002a40 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800296e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002976:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002986:	f023 0302 	bic.w	r3, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6911      	ldr	r1, [r2, #16]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029ca:	e013      	b.n	80029f4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d118      	bne.n	8002a30 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a20:	430a      	orrs	r2, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	e007      	b.n	8002a40 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10c      	bne.n	8002a62 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f023 010f 	bic.w	r1, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a60:	e007      	b.n	8002a72 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020f 	bic.w	r2, r2, #15
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a82:	e007      	b.n	8002a94 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	053e2d63 	.word	0x053e2d63
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000300 	.word	0x50000300
 8002ab0:	fff04007 	.word	0xfff04007

08002ab4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002abc:	4859      	ldr	r0, [pc, #356]	@ (8002c24 <HAL_ADC_Start+0x170>)
 8002abe:	f7ff fd5b 	bl	8002578 <LL_ADC_GetMultimode>
 8002ac2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe35 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 809f 	bne.w	8002c14 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_Start+0x30>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e09a      	b.n	8002c1a <HAL_ADC_Start+0x166>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 ffcd 	bl	8003a8c <ADC_Enable>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 8086 	bne.w	8002c0a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a44      	ldr	r2, [pc, #272]	@ (8002c28 <HAL_ADC_Start+0x174>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_Start+0x6e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	e001      	b.n	8002b26 <HAL_ADC_Start+0x72>
 8002b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	f023 0206 	bic.w	r2, r3, #6
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b5a:	e002      	b.n	8002b62 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	221c      	movs	r2, #28
 8002b68:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2c      	ldr	r2, [pc, #176]	@ (8002c28 <HAL_ADC_Start+0x174>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d002      	beq.n	8002b82 <HAL_ADC_Start+0xce>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e001      	b.n	8002b86 <HAL_ADC_Start+0xd2>
 8002b82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d008      	beq.n	8002ba0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d002      	beq.n	8002ba0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b09      	cmp	r3, #9
 8002b9e:	d114      	bne.n	8002bca <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fd90 	bl	80026e8 <LL_ADC_REG_StartConversion>
 8002bc8:	e026      	b.n	8002c18 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <HAL_ADC_Start+0x174>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d002      	beq.n	8002be6 <HAL_ADC_Start+0x132>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e001      	b.n	8002bea <HAL_ADC_Start+0x136>
 8002be6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00f      	beq.n	8002c18 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c08:	e006      	b.n	8002c18 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c12:	e001      	b.n	8002c18 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	50000300 	.word	0x50000300
 8002c28:	50000100 	.word	0x50000100

08002c2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Stop+0x16>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e023      	b.n	8002c8a <HAL_ADC_Stop+0x5e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fe61 	bl	8003914 <ADC_ConversionStop>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 ff9b 	bl	8003b98 <ADC_Disable>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	4867      	ldr	r0, [pc, #412]	@ (8002e3c <HAL_ADC_PollForConversion+0x1a8>)
 8002ca0:	f7ff fc6a 	bl	8002578 <LL_ADC_GetMultimode>
 8002ca4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d102      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cae:	2308      	movs	r3, #8
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e02a      	b.n	8002d0a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d002      	beq.n	8002cc6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	d111      	bne.n	8002cea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0a6      	b.n	8002e32 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ce8:	e00f      	b.n	8002d0a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cea:	4854      	ldr	r0, [pc, #336]	@ (8002e3c <HAL_ADC_PollForConversion+0x1a8>)
 8002cec:	f7ff fc52 	bl	8002594 <LL_ADC_GetMultiDMATransfer>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e095      	b.n	8002e32 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d06:	2304      	movs	r3, #4
 8002d08:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d0a:	f7ff faa7 	bl	800225c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d10:	e021      	b.n	8002d56 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d01d      	beq.n	8002d56 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d1a:	f7ff fa9f 	bl	800225c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <HAL_ADC_PollForConversion+0x9c>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d112      	bne.n	8002d56 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e06d      	b.n	8002e32 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0d6      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fb71 	bl	800245c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7f5b      	ldrb	r3, [r3, #29]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d118      	bne.n	8002dba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d111      	bne.n	8002dba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a20      	ldr	r2, [pc, #128]	@ (8002e40 <HAL_ADC_PollForConversion+0x1ac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d002      	beq.n	8002dca <HAL_ADC_PollForConversion+0x136>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	e001      	b.n	8002dce <HAL_ADC_PollForConversion+0x13a>
 8002dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d008      	beq.n	8002de8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d002      	beq.n	8002de8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d104      	bne.n	8002df2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e00d      	b.n	8002e0e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <HAL_ADC_PollForConversion+0x1ac>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d002      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x16e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e001      	b.n	8002e06 <HAL_ADC_PollForConversion+0x172>
 8002e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e008      	b.n	8002e30 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	50000300 	.word	0x50000300
 8002e40:	50000100 	.word	0x50000100

08002e44 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e4c:	4893      	ldr	r0, [pc, #588]	@ (800309c <HAL_ADC_Start_IT+0x258>)
 8002e4e:	f7ff fb93 	bl	8002578 <LL_ADC_GetMultimode>
 8002e52:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fc6d 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8113 	bne.w	800308c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_Start_IT+0x30>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e10e      	b.n	8003092 <HAL_ADC_Start_IT+0x24e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fe05 	bl	8003a8c <ADC_Enable>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80fa 	bne.w	8003082 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80030a0 <HAL_ADC_Start_IT+0x25c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d002      	beq.n	8002eb2 <HAL_ADC_Start_IT+0x6e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	e001      	b.n	8002eb6 <HAL_ADC_Start_IT+0x72>
 8002eb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d002      	beq.n	8002ec4 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee0:	f023 0206 	bic.w	r2, r3, #6
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ee8:	e002      	b.n	8002ef0 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 021c 	bic.w	r2, r2, #28
 8002f0e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d108      	bne.n	8002f2a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	605a      	str	r2, [r3, #4]
          break;
 8002f28:	e008      	b.n	8002f3c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0204 	orr.w	r2, r2, #4
 8002f38:	605a      	str	r2, [r3, #4]
          break;
 8002f3a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0210 	orr.w	r2, r2, #16
 8002f52:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a51      	ldr	r2, [pc, #324]	@ (80030a0 <HAL_ADC_Start_IT+0x25c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d002      	beq.n	8002f64 <HAL_ADC_Start_IT+0x120>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	e001      	b.n	8002f68 <HAL_ADC_Start_IT+0x124>
 8002f64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d008      	beq.n	8002f82 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d002      	beq.n	8002f82 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d13a      	bne.n	8002ff8 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02d      	beq.n	8002fec <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d110      	bne.n	8002fca <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0220 	bic.w	r2, r2, #32
 8002fb6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc6:	605a      	str	r2, [r3, #4]
              break;
 8002fc8:	e010      	b.n	8002fec <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	605a      	str	r2, [r3, #4]
              break;
 8002fea:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fb79 	bl	80026e8 <LL_ADC_REG_StartConversion>
 8002ff6:	e04b      	b.n	8003090 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a25      	ldr	r2, [pc, #148]	@ (80030a0 <HAL_ADC_Start_IT+0x25c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d002      	beq.n	8003014 <HAL_ADC_Start_IT+0x1d0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e001      	b.n	8003018 <HAL_ADC_Start_IT+0x1d4>
 8003014:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003018:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d034      	beq.n	8003090 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800302e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d110      	bne.n	8003060 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0220 	bic.w	r2, r2, #32
 800304c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305c:	605a      	str	r2, [r3, #4]
              break;
 800305e:	e017      	b.n	8003090 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800306e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0220 	orr.w	r2, r2, #32
 800307e:	605a      	str	r2, [r3, #4]
              break;
 8003080:	e006      	b.n	8003090 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800308a:	e001      	b.n	8003090 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800308c:	2302      	movs	r3, #2
 800308e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	50000300 	.word	0x50000300
 80030a0:	50000100 	.word	0x50000100

080030a4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Stop_IT+0x16>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e02b      	b.n	8003112 <HAL_ADC_Stop_IT+0x6e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030c2:	2103      	movs	r1, #3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fc25 	bl	8003914 <ADC_ConversionStop>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d119      	bne.n	8003108 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 021c 	bic.w	r2, r2, #28
 80030e2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fd57 	bl	8003b98 <ADC_Disable>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0b6      	sub	sp, #216	@ 0xd8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x22>
 8003152:	2302      	movs	r3, #2
 8003154:	e3c8      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x7b4>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fae8 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 83ad 	bne.w	80038ca <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff f980 	bl	8002482 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fad6 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 800318c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff faf6 	bl	8002786 <LL_ADC_INJ_IsConversionOngoing>
 800319a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800319e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 81d9 	bne.w	800355a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 81d4 	bne.w	800355a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031ba:	d10f      	bne.n	80031dc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	4619      	mov	r1, r3
 80031c8:	f7ff f987 	bl	80024da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f92e 	bl	8002436 <LL_ADC_SetSamplingTimeCommonConfig>
 80031da:	e00e      	b.n	80031fa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff f976 	bl	80024da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f91e 	bl	8002436 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d022      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6919      	ldr	r1, [r3, #16]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800322c:	f7ff f878 	bl	8002320 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6919      	ldr	r1, [r3, #16]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	461a      	mov	r2, r3
 800323e:	f7ff f8c4 	bl	80023ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x124>
 8003252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003256:	e000      	b.n	800325a <HAL_ADC_ConfigChannel+0x126>
 8003258:	2300      	movs	r3, #0
 800325a:	461a      	mov	r2, r3
 800325c:	f7ff f8d0 	bl	8002400 <LL_ADC_SetOffsetSaturation>
 8003260:	e17b      	b.n	800355a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f87d 	bl	8002368 <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_ADC_ConfigChannel+0x15a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f872 	bl	8002368 <LL_ADC_GetOffsetChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	e01e      	b.n	80032cc <HAL_ADC_ConfigChannel+0x198>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f867 	bl	8002368 <LL_ADC_GetOffsetChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e004      	b.n	80032ca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80032c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1b0>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	e018      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1e2>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e004      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800330c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003316:	429a      	cmp	r2, r3
 8003318:	d106      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f836 	bl	8002394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f81a 	bl	8002368 <LL_ADC_GetOffsetChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x220>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff f80f 	bl	8002368 <LL_ADC_GetOffsetChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	0e9b      	lsrs	r3, r3, #26
 800334e:	f003 021f 	and.w	r2, r3, #31
 8003352:	e01e      	b.n	8003392 <HAL_ADC_ConfigChannel+0x25e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f804 	bl	8002368 <LL_ADC_GetOffsetChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800337a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003382:	2320      	movs	r3, #32
 8003384:	e004      	b.n	8003390 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x276>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	e018      	b.n	80033dc <HAL_ADC_ConfigChannel+0x2a8>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80033be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80033c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e004      	b.n	80033dc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80033d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033dc:	429a      	cmp	r2, r3
 80033de:	d106      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe ffd3 	bl	8002394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ffb7 	bl	8002368 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x2e6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe ffac 	bl	8002368 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	0e9b      	lsrs	r3, r3, #26
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	e01e      	b.n	8003458 <HAL_ADC_ConfigChannel+0x324>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe ffa1 	bl	8002368 <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800343c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e004      	b.n	8003456 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800344c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x33c>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	e016      	b.n	800349e <HAL_ADC_ConfigChannel+0x36a>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e004      	b.n	800349e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800349e:	429a      	cmp	r2, r3
 80034a0:	d106      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2102      	movs	r1, #2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe ff72 	bl	8002394 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2103      	movs	r1, #3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe ff56 	bl	8002368 <LL_ADC_GetOffsetChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x3a8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2103      	movs	r1, #3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ff4b 	bl	8002368 <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	f003 021f 	and.w	r2, r3, #31
 80034da:	e017      	b.n	800350c <HAL_ADC_ConfigChannel+0x3d8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2103      	movs	r1, #3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff40 	bl	8002368 <LL_ADC_GetOffsetChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80034fe:	2320      	movs	r3, #32
 8003500:	e003      	b.n	800350a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x3f0>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e011      	b.n	8003548 <HAL_ADC_ConfigChannel+0x414>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003548:	429a      	cmp	r2, r3
 800354a:	d106      	bne.n	800355a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	2103      	movs	r1, #3
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe ff1d 	bl	8002394 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f89c 	bl	800269c <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 8140 	bne.w	80037ec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f7fe ffd9 	bl	8002530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4a8f      	ldr	r2, [pc, #572]	@ (80037c0 <HAL_ADC_ConfigChannel+0x68c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	f040 8131 	bne.w	80037ec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x47e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	3301      	adds	r3, #1
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	2b09      	cmp	r3, #9
 80035a8:	bf94      	ite	ls
 80035aa:	2301      	movls	r3, #1
 80035ac:	2300      	movhi	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	e019      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x4b2>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80035c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80035c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80035ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2b09      	cmp	r3, #9
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d079      	beq.n	80036de <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x4d2>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	3301      	adds	r3, #1
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003604:	e015      	b.n	8003632 <HAL_ADC_ConfigChannel+0x4fe>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003616:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800361e:	2320      	movs	r3, #32
 8003620:	e003      	b.n	800362a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3301      	adds	r3, #1
 800362c:	069b      	lsls	r3, r3, #26
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x51e>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	0e9b      	lsrs	r3, r3, #26
 8003644:	3301      	adds	r3, #1
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	e017      	b.n	8003682 <HAL_ADC_ConfigChannel+0x54e>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800366a:	2320      	movs	r3, #32
 800366c:	e003      	b.n	8003676 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3301      	adds	r3, #1
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	ea42 0103 	orr.w	r1, r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x574>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	3301      	adds	r3, #1
 800369a:	f003 021f 	and.w	r2, r3, #31
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	051b      	lsls	r3, r3, #20
 80036a6:	e018      	b.n	80036da <HAL_ADC_ConfigChannel+0x5a6>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e003      	b.n	80036cc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80036c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036da:	430b      	orrs	r3, r1
 80036dc:	e081      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x5c6>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0e9b      	lsrs	r3, r3, #26
 80036f0:	3301      	adds	r3, #1
 80036f2:	069b      	lsls	r3, r3, #26
 80036f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036f8:	e015      	b.n	8003726 <HAL_ADC_ConfigChannel+0x5f2>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e003      	b.n	800371e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	3301      	adds	r3, #1
 8003720:	069b      	lsls	r3, r3, #26
 8003722:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x612>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	0e9b      	lsrs	r3, r3, #26
 8003738:	3301      	adds	r3, #1
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	e017      	b.n	8003776 <HAL_ADC_ConfigChannel+0x642>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
  return result;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e003      	b.n	800376a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	3301      	adds	r3, #1
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	ea42 0103 	orr.w	r1, r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x66e>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	3301      	adds	r3, #1
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	3b1e      	subs	r3, #30
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	e01e      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x6ac>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	613b      	str	r3, [r7, #16]
  return result;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e006      	b.n	80037cc <HAL_ADC_ConfigChannel+0x698>
 80037be:	bf00      	nop
 80037c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 021f 	and.w	r2, r3, #31
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	3b1e      	subs	r3, #30
 80037da:	051b      	lsls	r3, r3, #20
 80037dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fe fe77 	bl	80024da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d071      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f8:	483e      	ldr	r0, [pc, #248]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80037fa:	f7fe fd83 	bl	8002304 <LL_ADC_GetCommonPathInternalCh>
 80037fe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3c      	ldr	r2, [pc, #240]	@ (80038f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x6e2>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3a      	ldr	r2, [pc, #232]	@ (80038fc <HAL_ADC_ConfigChannel+0x7c8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d127      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800381a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382a:	d157      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800382c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003830:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003834:	4619      	mov	r1, r3
 8003836:	482f      	ldr	r0, [pc, #188]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003838:	f7fe fd51 	bl	80022de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800383c:	4b30      	ldr	r3, [pc, #192]	@ (8003900 <HAL_ADC_ConfigChannel+0x7cc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <HAL_ADC_ConfigChannel+0x7d0>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003856:	e002      	b.n	800385e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3b01      	subs	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003864:	e03a      	b.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a27      	ldr	r2, [pc, #156]	@ (8003908 <HAL_ADC_ConfigChannel+0x7d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a22      	ldr	r2, [pc, #136]	@ (800390c <HAL_ADC_ConfigChannel+0x7d8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02a      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800388e:	4619      	mov	r1, r3
 8003890:	4818      	ldr	r0, [pc, #96]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003892:	f7fe fd24 	bl	80022de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003896:	e021      	b.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1c      	ldr	r2, [pc, #112]	@ (8003910 <HAL_ADC_ConfigChannel+0x7dc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11c      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <HAL_ADC_ConfigChannel+0x7d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d011      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038c0:	4619      	mov	r1, r3
 80038c2:	480c      	ldr	r0, [pc, #48]	@ (80038f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80038c4:	f7fe fd0b 	bl	80022de <LL_ADC_SetCommonPathInternalCh>
 80038c8:	e008      	b.n	80038dc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	37d8      	adds	r7, #216	@ 0xd8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	80080000 	.word	0x80080000
 80038f4:	50000300 	.word	0x50000300
 80038f8:	c3210000 	.word	0xc3210000
 80038fc:	90c00010 	.word	0x90c00010
 8003900:	20000000 	.word	0x20000000
 8003904:	053e2d63 	.word	0x053e2d63
 8003908:	c7520000 	.word	0xc7520000
 800390c:	50000100 	.word	0x50000100
 8003910:	cb840000 	.word	0xcb840000

08003914 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe ff04 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 8003930:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe ff25 	bl	8002786 <LL_ADC_INJ_IsConversionOngoing>
 800393c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8098 	beq.w	8003a7c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02a      	beq.n	80039b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7f5b      	ldrb	r3, [r3, #29]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d126      	bne.n	80039b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7f1b      	ldrb	r3, [r3, #28]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d122      	bne.n	80039b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800396e:	e014      	b.n	800399a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4a45      	ldr	r2, [pc, #276]	@ (8003a88 <ADC_ConversionStop+0x174>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d90d      	bls.n	8003994 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e074      	b.n	8003a7e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a4:	2b40      	cmp	r3, #64	@ 0x40
 80039a6:	d1e3      	bne.n	8003970 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2240      	movs	r2, #64	@ 0x40
 80039ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d014      	beq.n	80039e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe febc 	bl	8002738 <LL_ADC_REG_IsConversionOngoing>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fe79 	bl	80026c2 <LL_ADC_IsDisableOngoing>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d104      	bne.n	80039e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fe98 	bl	8002710 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d014      	beq.n	8003a10 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fecb 	bl	8002786 <LL_ADC_INJ_IsConversionOngoing>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fe61 	bl	80026c2 <LL_ADC_IsDisableOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fea7 	bl	800275e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d005      	beq.n	8003a22 <ADC_ConversionStop+0x10e>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d105      	bne.n	8003a28 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	617b      	str	r3, [r7, #20]
        break;
 8003a20:	e005      	b.n	8003a2e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a22:	2308      	movs	r3, #8
 8003a24:	617b      	str	r3, [r7, #20]
        break;
 8003a26:	e002      	b.n	8003a2e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a28:	2304      	movs	r3, #4
 8003a2a:	617b      	str	r3, [r7, #20]
        break;
 8003a2c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe fc15 	bl	800225c <HAL_GetTick>
 8003a32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a34:	e01b      	b.n	8003a6e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a36:	f7fe fc11 	bl	800225c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d914      	bls.n	8003a6e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e007      	b.n	8003a7e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1dc      	bne.n	8003a36 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	a33fffff 	.word	0xa33fffff

08003a8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fdfd 	bl	800269c <LL_ADC_IsEnabled>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d169      	bne.n	8003b7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <ADC_Enable+0xfc>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f043 0210 	orr.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e055      	b.n	8003b7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fdb8 	bl	800264c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003adc:	482b      	ldr	r0, [pc, #172]	@ (8003b8c <ADC_Enable+0x100>)
 8003ade:	f7fe fc11 	bl	8002304 <LL_ADC_GetCommonPathInternalCh>
 8003ae2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aec:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <ADC_Enable+0x104>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <ADC_Enable+0x108>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b06:	e002      	b.n	8003b0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f9      	bne.n	8003b08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b14:	f7fe fba2 	bl	800225c <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b1a:	e028      	b.n	8003b6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fdbb 	bl	800269c <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fd8b 	bl	800264c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b36:	f7fe fb91 	bl	800225c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d914      	bls.n	8003b6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d00d      	beq.n	8003b6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d1cf      	bne.n	8003b1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	8000003f 	.word	0x8000003f
 8003b8c:	50000300 	.word	0x50000300
 8003b90:	20000000 	.word	0x20000000
 8003b94:	053e2d63 	.word	0x053e2d63

08003b98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fd8c 	bl	80026c2 <LL_ADC_IsDisableOngoing>
 8003baa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fd73 	bl	800269c <LL_ADC_IsEnabled>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d047      	beq.n	8003c4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d144      	bne.n	8003c4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030d 	and.w	r3, r3, #13
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d10c      	bne.n	8003bea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe fd4d 	bl	8002674 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2203      	movs	r2, #3
 8003be0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003be2:	f7fe fb3b 	bl	800225c <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003be8:	e029      	b.n	8003c3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e023      	b.n	8003c4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c06:	f7fe fb29 	bl	800225c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d914      	bls.n	8003c3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1dc      	bne.n	8003c06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <LL_ADC_IsEnabled>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_IsEnabled+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_IsEnabled+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_REG_IsConversionOngoing>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b0a1      	sub	sp, #132	@ 0x84
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e08b      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cda:	d102      	bne.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	e001      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e06a      	b.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ffb8 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 8003d0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ffb2 	bl	8003c7c <LL_ADC_REG_IsConversionOngoing>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d14c      	bne.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d149      	bne.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d24:	4b30      	ldr	r3, [pc, #192]	@ (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d26:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d028      	beq.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d42:	035b      	lsls	r3, r3, #13
 8003d44:	430b      	orrs	r3, r1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d50:	f7ff ff81 	bl	8003c56 <LL_ADC_IsEnabled>
 8003d54:	4604      	mov	r4, r0
 8003d56:	4823      	ldr	r0, [pc, #140]	@ (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d58:	f7ff ff7d 	bl	8003c56 <LL_ADC_IsEnabled>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d133      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d6c:	f023 030f 	bic.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	6811      	ldr	r1, [r2, #0]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	e024      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d8e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d92:	f7ff ff60 	bl	8003c56 <LL_ADC_IsEnabled>
 8003d96:	4604      	mov	r4, r0
 8003d98:	4812      	ldr	r0, [pc, #72]	@ (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d9a:	f7ff ff5c 	bl	8003c56 <LL_ADC_IsEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4323      	orrs	r3, r4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d112      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dae:	f023 030f 	bic.w	r3, r3, #15
 8003db2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003db4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db6:	e009      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003dca:	e000      	b.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3784      	adds	r7, #132	@ 0x84
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	bf00      	nop
 8003de4:	50000100 	.word	0x50000100
 8003de8:	50000300 	.word	0x50000300

08003dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1e:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	60d3      	str	r3, [r2, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e38:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <__NVIC_GetPriorityGrouping+0x18>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 0307 	and.w	r3, r3, #7
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	db0b      	blt.n	8003e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	4907      	ldr	r1, [pc, #28]	@ (8003e88 <__NVIC_EnableIRQ+0x38>)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2001      	movs	r0, #1
 8003e72:	fa00 f202 	lsl.w	r2, r0, r2
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000e100 	.word	0xe000e100

08003e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	db0a      	blt.n	8003eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	490c      	ldr	r1, [pc, #48]	@ (8003ed8 <__NVIC_SetPriority+0x4c>)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	0112      	lsls	r2, r2, #4
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb4:	e00a      	b.n	8003ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4908      	ldr	r1, [pc, #32]	@ (8003edc <__NVIC_SetPriority+0x50>)
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	440b      	add	r3, r1
 8003eca:	761a      	strb	r2, [r3, #24]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000e100 	.word	0xe000e100
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	@ 0x24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f1c3 0307 	rsb	r3, r3, #7
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	bf28      	it	cs
 8003efe:	2304      	movcs	r3, #4
 8003f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d902      	bls.n	8003f10 <NVIC_EncodePriority+0x30>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3b03      	subs	r3, #3
 8003f0e:	e000      	b.n	8003f12 <NVIC_EncodePriority+0x32>
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	401a      	ands	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f28:	f04f 31ff 	mov.w	r1, #4294967295
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	43d9      	mvns	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	4313      	orrs	r3, r2
         );
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	@ 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f58:	d301      	bcc.n	8003f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00f      	b.n	8003f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <SysTick_Config+0x40>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f66:	210f      	movs	r1, #15
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	f7ff ff8e 	bl	8003e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <SysTick_Config+0x40>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f76:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <SysTick_Config+0x40>)
 8003f78:	2207      	movs	r2, #7
 8003f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000e010 	.word	0xe000e010

08003f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ff29 	bl	8003dec <__NVIC_SetPriorityGrouping>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff40 	bl	8003e34 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff90 	bl	8003ee0 <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5f 	bl	8003e8c <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff33 	bl	8003e50 <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa4 	bl	8003f48 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e147      	b.n	80042ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fe76 	bl	8001d24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0210 	bic.w	r2, r2, #16
 8004046:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004048:	f7fe f908 	bl	800225c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800404e:	e012      	b.n	8004076 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004050:	f7fe f904 	bl	800225c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b0a      	cmp	r3, #10
 800405c:	d90b      	bls.n	8004076 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e11b      	b.n	80042ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d0e5      	beq.n	8004050 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004094:	f7fe f8e2 	bl	800225c <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800409a:	e012      	b.n	80040c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800409c:	f7fe f8de 	bl	800225c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b0a      	cmp	r3, #10
 80040a8:	d90b      	bls.n	80040c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2203      	movs	r2, #3
 80040ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0f5      	b.n	80042ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0e5      	beq.n	800409c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0202 	orr.w	r2, r2, #2
 80040de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a74      	ldr	r2, [pc, #464]	@ (80042b8 <HAL_FDCAN_Init+0x2ac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d103      	bne.n	80040f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80040ea:	4a74      	ldr	r2, [pc, #464]	@ (80042bc <HAL_FDCAN_Init+0x2b0>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	7c1b      	ldrb	r3, [r3, #16]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004108:	619a      	str	r2, [r3, #24]
 800410a:	e007      	b.n	800411c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800411a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7c5b      	ldrb	r3, [r3, #17]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d108      	bne.n	8004136 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004132:	619a      	str	r2, [r3, #24]
 8004134:	e007      	b.n	8004146 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004144:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7c9b      	ldrb	r3, [r3, #18]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d108      	bne.n	8004160 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800415c:	619a      	str	r2, [r3, #24]
 800415e:	e007      	b.n	8004170 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800416e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004194:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0210 	bic.w	r2, r2, #16
 80041a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d108      	bne.n	80041c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0204 	orr.w	r2, r2, #4
 80041bc:	619a      	str	r2, [r3, #24]
 80041be:	e02c      	b.n	800421a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d01c      	beq.n	800420a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0210 	orr.w	r2, r2, #16
 80041ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d110      	bne.n	800421a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	619a      	str	r2, [r3, #24]
 8004208:	e007      	b.n	800421a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	3b01      	subs	r3, #1
 8004220:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	3b01      	subs	r3, #1
 8004228:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800422a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004232:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	3b01      	subs	r3, #1
 800423c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004242:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004244:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424e:	d115      	bne.n	800427c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	3b01      	subs	r3, #1
 800425c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800425e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	3b01      	subs	r3, #1
 8004266:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004268:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	3b01      	subs	r3, #1
 8004272:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004278:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800427a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fc0e 	bl	8004ab4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40006400 	.word	0x40006400
 80042bc:	40006500 	.word	0x40006500

080042c0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d110      	bne.n	80042f6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e006      	b.n	8004304 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fa:	f043 0204 	orr.w	r2, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d12c      	bne.n	8004382 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e023      	b.n	8004390 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fbfe 	bl	8004b60 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004374:	2201      	movs	r2, #1
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e006      	b.n	8004390 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004386:	f043 0208 	orr.w	r2, r3, #8
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004398:	b480      	push	{r7}
 800439a:	b08b      	sub	sp, #44	@ 0x2c
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80043b2:	7efb      	ldrb	r3, [r7, #27]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f040 80e8 	bne.w	800458a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d137      	bne.n	8004430 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d107      	bne.n	80043e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0db      	b.n	8004598 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e8:	0e1b      	lsrs	r3, r3, #24
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10a      	bne.n	8004408 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fa:	0a5b      	lsrs	r3, r3, #9
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	0a1b      	lsrs	r3, r3, #8
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
 800442e:	e036      	b.n	800449e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2b00      	cmp	r3, #0
 800443e:	d107      	bne.n	8004450 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004444:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0a3      	b.n	8004598 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10a      	bne.n	8004478 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	440b      	add	r3, r1
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0c9b      	lsrs	r3, r3, #18
 80044b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e005      	b.n	80044ce <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	3304      	adds	r3, #4
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e1b      	lsrs	r3, r3, #24
 8004522:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0fda      	lsrs	r2, r3, #31
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	3304      	adds	r3, #4
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	e00a      	b.n	800455a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	441a      	add	r2, r3
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	440b      	add	r3, r1
 8004550:	7812      	ldrb	r2, [r2, #0]
 8004552:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	3301      	adds	r3, #1
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	4a11      	ldr	r2, [pc, #68]	@ (80045a4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	461a      	mov	r2, r3
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	4293      	cmp	r3, r2
 8004568:	d3ec      	bcc.n	8004544 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b40      	cmp	r3, #64	@ 0x40
 800456e:	d105      	bne.n	800457c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800457a:	e004      	b.n	8004586 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e006      	b.n	8004598 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	f043 0208 	orr.w	r2, r3, #8
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	372c      	adds	r7, #44	@ 0x2c
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	08007614 	.word	0x08007614

080045a8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045de:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d003      	beq.n	80045ee <HAL_FDCAN_ActivateNotification+0x22>
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	f040 80c8 	bne.w	800477e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03b      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d031      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d027      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004638:	2b00      	cmp	r3, #0
 800463a:	d004      	beq.n	8004646 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	d013      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00c      	beq.n	8004692 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d13b      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d131      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d127      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d113      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0202 	orr.w	r2, r2, #2
 800472c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	430a      	orrs	r2, r1
 8004748:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	430a      	orrs	r2, r1
 8004766:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	430a      	orrs	r2, r1
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e006      	b.n	800478c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	@ 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b4:	4013      	ands	r3, r2
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047cc:	4013      	ands	r3, r2
 80047ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e4:	4013      	ands	r3, r2
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ee:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80047f2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	4013      	ands	r3, r2
 80047fe:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004806:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800480a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	4013      	ands	r3, r2
 8004816:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004826:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d006      	beq.n	800484a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2240      	movs	r2, #64	@ 0x40
 8004842:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f916 	bl	8004a76 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d019      	beq.n	8004888 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004866:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4013      	ands	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800487e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004880:	6939      	ldr	r1, [r7, #16]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8d8 	bl	8004a38 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004894:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f8a2 	bl	80049e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80048ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fb fefc 	bl	80006ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80048c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f897 	bl	80049f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00c      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f890 	bl	8004a0e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d018      	beq.n	800492a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800490a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4013      	ands	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2280      	movs	r2, #128	@ 0x80
 8004920:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f87c 	bl	8004a22 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004946:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f880 	bl	8004a4e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00c      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800496a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f878 	bl	8004a62 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00f      	beq.n	800499c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004994:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f876 	bl	8004a9e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f858 	bl	8004a8a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049da:	bf00      	nop
 80049dc:	3730      	adds	r7, #48	@ 0x30
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004abc:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004abe:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ace:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	041a      	lsls	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	061a      	lsls	r2, r3, #24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e005      	b.n	8004b42 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3f3      	bcc.n	8004b36 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	4000a400 	.word	0x4000a400

08004b60 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004b7e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	e00a      	b.n	8004ba2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004b94:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004b9a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ba0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004bac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004bb2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004bb8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	440b      	add	r3, r1
 8004bd4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	3304      	adds	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	3304      	adds	r3, #4
 8004bec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e020      	b.n	8004c36 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3303      	adds	r3, #3
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3302      	adds	r3, #2
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	440b      	add	r3, r1
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c0c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	3301      	adds	r3, #1
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	440b      	add	r3, r1
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004c1a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	440a      	add	r2, r1
 8004c22:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004c24:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3304      	adds	r3, #4
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4a06      	ldr	r2, [pc, #24]	@ (8004c54 <FDCAN_CopyMessageToRAM+0xf4>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d3d6      	bcc.n	8004bf4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	3724      	adds	r7, #36	@ 0x24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	08007614 	.word	0x08007614

08004c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c66:	e15a      	b.n	8004f1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	4013      	ands	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 814c 	beq.w	8004f18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d005      	beq.n	8004c98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d130      	bne.n	8004cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cce:	2201      	movs	r2, #1
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0201 	and.w	r2, r3, #1
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d017      	beq.n	8004d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d123      	bne.n	8004d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	08da      	lsrs	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3208      	adds	r2, #8
 8004d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	220f      	movs	r2, #15
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	08da      	lsrs	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3208      	adds	r2, #8
 8004d84:	6939      	ldr	r1, [r7, #16]
 8004d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	2203      	movs	r2, #3
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0203 	and.w	r2, r3, #3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f3c <HAL_GPIO_Init+0x2e4>)
 8004dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f3c <HAL_GPIO_Init+0x2e4>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dd8:	4b58      	ldr	r3, [pc, #352]	@ (8004f3c <HAL_GPIO_Init+0x2e4>)
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004de4:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	3302      	adds	r3, #2
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	220f      	movs	r2, #15
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e0e:	d01f      	beq.n	8004e50 <HAL_GPIO_Init+0x1f8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a4c      	ldr	r2, [pc, #304]	@ (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d019      	beq.n	8004e4c <HAL_GPIO_Init+0x1f4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8004f48 <HAL_GPIO_Init+0x2f0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <HAL_GPIO_Init+0x1f0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a4a      	ldr	r2, [pc, #296]	@ (8004f4c <HAL_GPIO_Init+0x2f4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00d      	beq.n	8004e44 <HAL_GPIO_Init+0x1ec>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a49      	ldr	r2, [pc, #292]	@ (8004f50 <HAL_GPIO_Init+0x2f8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d007      	beq.n	8004e40 <HAL_GPIO_Init+0x1e8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a48      	ldr	r2, [pc, #288]	@ (8004f54 <HAL_GPIO_Init+0x2fc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_GPIO_Init+0x1e4>
 8004e38:	2305      	movs	r3, #5
 8004e3a:	e00a      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e3c:	2306      	movs	r3, #6
 8004e3e:	e008      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e006      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e44:	2303      	movs	r3, #3
 8004e46:	e004      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e002      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e50:	2300      	movs	r3, #0
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	f002 0203 	and.w	r2, r2, #3
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	4093      	lsls	r3, r2
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e62:	4937      	ldr	r1, [pc, #220]	@ (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3302      	adds	r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e70:	4b39      	ldr	r3, [pc, #228]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e94:	4a30      	ldr	r2, [pc, #192]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ebe:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ec4:	4b24      	ldr	r3, [pc, #144]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eee:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f12:	4a11      	ldr	r2, [pc, #68]	@ (8004f58 <HAL_GPIO_Init+0x300>)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f47f ae9d 	bne.w	8004c68 <HAL_GPIO_Init+0x10>
  }
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40010000 	.word	0x40010000
 8004f44:	48000400 	.word	0x48000400
 8004f48:	48000800 	.word	0x48000800
 8004f4c:	48000c00 	.word	0x48000c00
 8004f50:	48001000 	.word	0x48001000
 8004f54:	48001400 	.word	0x48001400
 8004f58:	40010400 	.word	0x40010400

08004f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f6c:	787b      	ldrb	r3, [r7, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f78:	e002      	b.n	8004f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d141      	bne.n	800501e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d131      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa8:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fae:	4a46      	ldr	r2, [pc, #280]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb8:	4b43      	ldr	r3, [pc, #268]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fc0:	4a41      	ldr	r2, [pc, #260]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc8:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2232      	movs	r2, #50	@ 0x32
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80050d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fde:	e002      	b.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fe6:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d102      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f2      	bne.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ffa:	4b33      	ldr	r3, [pc, #204]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d158      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e057      	b.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800500c:	4b2e      	ldr	r3, [pc, #184]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	4a2d      	ldr	r2, [pc, #180]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800501c:	e04d      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005024:	d141      	bne.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005026:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d131      	bne.n	8005098 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503a:	4a23      	ldr	r2, [pc, #140]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005044:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800504c:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005054:	4b1d      	ldr	r3, [pc, #116]	@ (80050cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2232      	movs	r2, #50	@ 0x32
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0c9b      	lsrs	r3, r3, #18
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506a:	e002      	b.n	8005072 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005072:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507e:	d102      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f2      	bne.n	800506c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005092:	d112      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e011      	b.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005098:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509e:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050a8:	e007      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050aa:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b2:	4a05      	ldr	r2, [pc, #20]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40007000 	.word	0x40007000
 80050cc:	20000000 	.word	0x20000000
 80050d0:	431bde83 	.word	0x431bde83

080050d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a04      	ldr	r2, [pc, #16]	@ (80050f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e2:	6093      	str	r3, [r2, #8]
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40007000 	.word	0x40007000

080050f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e2fe      	b.n	8005704 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d075      	beq.n	80051fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005112:	4b97      	ldr	r3, [pc, #604]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800511c:	4b94      	ldr	r3, [pc, #592]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d102      	bne.n	8005132 <HAL_RCC_OscConfig+0x3e>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d002      	beq.n	8005138 <HAL_RCC_OscConfig+0x44>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d10b      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	4b8d      	ldr	r3, [pc, #564]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05b      	beq.n	80051fc <HAL_RCC_OscConfig+0x108>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d157      	bne.n	80051fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e2d9      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x74>
 800515a:	4b85      	ldr	r3, [pc, #532]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a84      	ldr	r2, [pc, #528]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e01d      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x98>
 8005172:	4b7f      	ldr	r3, [pc, #508]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7e      	ldr	r2, [pc, #504]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b7c      	ldr	r3, [pc, #496]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7b      	ldr	r2, [pc, #492]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 800518c:	4b78      	ldr	r3, [pc, #480]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a77      	ldr	r2, [pc, #476]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b75      	ldr	r3, [pc, #468]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a74      	ldr	r2, [pc, #464]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800519e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd f856 	bl	800225c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fd f852 	bl	800225c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e29e      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0xc0>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd f842 	bl	800225c <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fd f83e 	bl	800225c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	@ 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e28a      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ee:	4b60      	ldr	r3, [pc, #384]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0xe8>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d075      	beq.n	80052f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520a:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005214:	4b56      	ldr	r3, [pc, #344]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d102      	bne.n	800522a <HAL_RCC_OscConfig+0x136>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d002      	beq.n	8005230 <HAL_RCC_OscConfig+0x13c>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d11f      	bne.n	8005270 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	4b4f      	ldr	r3, [pc, #316]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_OscConfig+0x154>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e25d      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	4b49      	ldr	r3, [pc, #292]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	4946      	ldr	r1, [pc, #280]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800525c:	4b45      	ldr	r3, [pc, #276]	@ (8005374 <HAL_RCC_OscConfig+0x280>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fc ffaf 	bl	80021c4 <HAL_InitTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d043      	beq.n	80052f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e249      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d023      	beq.n	80052c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005278:	4b3d      	ldr	r3, [pc, #244]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3c      	ldr	r2, [pc, #240]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc ffea 	bl	800225c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528c:	f7fc ffe6 	bl	800225c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e232      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800529e:	4b34      	ldr	r3, [pc, #208]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	061b      	lsls	r3, r3, #24
 80052b8:	492d      	ldr	r1, [pc, #180]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
 80052be:	e01a      	b.n	80052f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc ffc6 	bl	800225c <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fc ffc2 	bl	800225c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e20e      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e6:	4b22      	ldr	r3, [pc, #136]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1e0>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d041      	beq.n	8005386 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01c      	beq.n	8005344 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530a:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	4a17      	ldr	r2, [pc, #92]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fc ff9f 	bl	800225c <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fc ff9b 	bl	800225c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1e7      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005334:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0ef      	beq.n	8005322 <HAL_RCC_OscConfig+0x22e>
 8005342:	e020      	b.n	8005386 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 8005346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534a:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <HAL_RCC_OscConfig+0x27c>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fc ff82 	bl	800225c <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800535a:	e00d      	b.n	8005378 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535c:	f7fc ff7e 	bl	800225c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d906      	bls.n	8005378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1ca      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005378:	4b8c      	ldr	r3, [pc, #560]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800537a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ea      	bne.n	800535c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a6 	beq.w	80054e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005398:	4b84      	ldr	r3, [pc, #528]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_OscConfig+0x2b4>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x2b6>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	4b7f      	ldr	r3, [pc, #508]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ba:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d118      	bne.n	8005408 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d6:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e2:	f7fc ff3b 	bl	800225c <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fc ff37 	bl	800225c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e183      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053fc:	4b6c      	ldr	r3, [pc, #432]	@ (80055b0 <HAL_RCC_OscConfig+0x4bc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d108      	bne.n	8005422 <HAL_RCC_OscConfig+0x32e>
 8005410:	4b66      	ldr	r3, [pc, #408]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005416:	4a65      	ldr	r2, [pc, #404]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005420:	e024      	b.n	800546c <HAL_RCC_OscConfig+0x378>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d110      	bne.n	800544c <HAL_RCC_OscConfig+0x358>
 800542a:	4b60      	ldr	r3, [pc, #384]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	4a5e      	ldr	r2, [pc, #376]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800543a:	4b5c      	ldr	r3, [pc, #368]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005440:	4a5a      	ldr	r2, [pc, #360]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800544a:	e00f      	b.n	800546c <HAL_RCC_OscConfig+0x378>
 800544c:	4b57      	ldr	r3, [pc, #348]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	4a56      	ldr	r2, [pc, #344]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800545c:	4b53      	ldr	r3, [pc, #332]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a52      	ldr	r2, [pc, #328]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fc fef2 	bl	800225c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fc feee 	bl	800225c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e138      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005492:	4b46      	ldr	r3, [pc, #280]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ed      	beq.n	800547c <HAL_RCC_OscConfig+0x388>
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fc fedb 	bl	800225c <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fc fed7 	bl	800225c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e121      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054c0:	4b3a      	ldr	r3, [pc, #232]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1ed      	bne.n	80054aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054ce:	7ffb      	ldrb	r3, [r7, #31]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	4a34      	ldr	r2, [pc, #208]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03c      	beq.n	8005566 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f4:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054fa:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fc feaa 	bl	800225c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800550c:	f7fc fea6 	bl	800225c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0f2      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800551e:	4b23      	ldr	r3, [pc, #140]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ef      	beq.n	800550c <HAL_RCC_OscConfig+0x418>
 800552c:	e01b      	b.n	8005566 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800552e:	4b1f      	ldr	r3, [pc, #124]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005534:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fc fe8d 	bl	800225c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005546:	f7fc fe89 	bl	800225c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e0d5      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005558:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800555a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ef      	bne.n	8005546 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80c9 	beq.w	8005702 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005570:	4b0e      	ldr	r3, [pc, #56]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b0c      	cmp	r3, #12
 800557a:	f000 8083 	beq.w	8005684 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d15e      	bne.n	8005644 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc fe63 	bl	800225c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005598:	e00c      	b.n	80055b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fe5f 	bl	800225c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d905      	bls.n	80055b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0ab      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b4:	4b55      	ldr	r3, [pc, #340]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1ec      	bne.n	800559a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c0:	4b52      	ldr	r3, [pc, #328]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	4b52      	ldr	r3, [pc, #328]	@ (8005710 <HAL_RCC_OscConfig+0x61c>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a11      	ldr	r1, [r2, #32]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055d0:	3a01      	subs	r2, #1
 80055d2:	0112      	lsls	r2, r2, #4
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80055da:	0212      	lsls	r2, r2, #8
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055e2:	0852      	lsrs	r2, r2, #1
 80055e4:	3a01      	subs	r2, #1
 80055e6:	0552      	lsls	r2, r2, #21
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0652      	lsls	r2, r2, #25
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055fa:	06d2      	lsls	r2, r2, #27
 80055fc:	430a      	orrs	r2, r1
 80055fe:	4943      	ldr	r1, [pc, #268]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005600:	4313      	orrs	r3, r2
 8005602:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005604:	4b41      	ldr	r3, [pc, #260]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a40      	ldr	r2, [pc, #256]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800560a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005610:	4b3e      	ldr	r3, [pc, #248]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a3d      	ldr	r2, [pc, #244]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800561a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fc fe1e 	bl	800225c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fc fe1a 	bl	800225c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e066      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005636:	4b35      	ldr	r3, [pc, #212]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x530>
 8005642:	e05e      	b.n	8005702 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005644:	4b31      	ldr	r3, [pc, #196]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a30      	ldr	r2, [pc, #192]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800564a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800564e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005650:	f7fc fe04 	bl	800225c <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fc fe00 	bl	800225c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e04c      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566a:	4b28      	ldr	r3, [pc, #160]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005676:	4b25      	ldr	r3, [pc, #148]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	4924      	ldr	r1, [pc, #144]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <HAL_RCC_OscConfig+0x620>)
 800567e:	4013      	ands	r3, r2
 8005680:	60cb      	str	r3, [r1, #12]
 8005682:	e03e      	b.n	8005702 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e039      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005690:	4b1e      	ldr	r3, [pc, #120]	@ (800570c <HAL_RCC_OscConfig+0x618>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0203 	and.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d12c      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d123      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d11b      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d113      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	3b01      	subs	r3, #1
 80056e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d109      	bne.n	80056fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	3b01      	subs	r3, #1
 80056f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d001      	beq.n	8005702 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	019f800c 	.word	0x019f800c
 8005714:	feeefffc 	.word	0xfeeefffc

08005718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e11e      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005730:	4b91      	ldr	r3, [pc, #580]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d910      	bls.n	8005760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b8e      	ldr	r3, [pc, #568]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 020f 	bic.w	r2, r3, #15
 8005746:	498c      	ldr	r1, [pc, #560]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b8a      	ldr	r3, [pc, #552]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e106      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d073      	beq.n	8005854 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d129      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005774:	4b81      	ldr	r3, [pc, #516]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0f4      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005784:	f000 f966 	bl	8005a54 <RCC_GetSysClockFreqFromPLLSource>
 8005788:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4a7c      	ldr	r2, [pc, #496]	@ (8005980 <HAL_RCC_ClockConfig+0x268>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d93f      	bls.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005792:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d033      	beq.n	8005812 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d12f      	bne.n	8005812 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057b2:	4b72      	ldr	r3, [pc, #456]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ba:	4a70      	ldr	r2, [pc, #448]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057c2:	2380      	movs	r3, #128	@ 0x80
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e024      	b.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d0:	4b6a      	ldr	r3, [pc, #424]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0c6      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e0:	4b66      	ldr	r3, [pc, #408]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0be      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057f0:	f000 f8ce 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4a61      	ldr	r2, [pc, #388]	@ (8005980 <HAL_RCC_ClockConfig+0x268>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d909      	bls.n	8005812 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fe:	4b5f      	ldr	r3, [pc, #380]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005806:	4a5d      	ldr	r2, [pc, #372]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800580e:	2380      	movs	r3, #128	@ 0x80
 8005810:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005812:	4b5a      	ldr	r3, [pc, #360]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4957      	ldr	r1, [pc, #348]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fc fd1a 	bl	800225c <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	e00a      	b.n	8005842 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582c:	f7fc fd16 	bl	800225c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e095      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	4b4e      	ldr	r3, [pc, #312]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 020c 	and.w	r2, r3, #12
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d1eb      	bne.n	800582c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d023      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800586c:	4b43      	ldr	r3, [pc, #268]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a42      	ldr	r2, [pc, #264]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005872:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005876:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005884:	4b3d      	ldr	r3, [pc, #244]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800588c:	4a3b      	ldr	r2, [pc, #236]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800588e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	4b39      	ldr	r3, [pc, #228]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4936      	ldr	r1, [pc, #216]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	e008      	b.n	80058ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b80      	cmp	r3, #128	@ 0x80
 80058ac:	d105      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ae:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	4a32      	ldr	r2, [pc, #200]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 80058b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d21d      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 020f 	bic.w	r2, r3, #15
 80058d0:	4929      	ldr	r1, [pc, #164]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058d8:	f7fc fcc0 	bl	800225c <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fc fcbc 	bl	800225c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e03b      	b.n	800596e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <HAL_RCC_ClockConfig+0x260>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d1ed      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4917      	ldr	r1, [pc, #92]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b13      	ldr	r3, [pc, #76]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	490f      	ldr	r1, [pc, #60]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005942:	f000 f825 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 8005946:	4602      	mov	r2, r0
 8005948:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_RCC_ClockConfig+0x264>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	490c      	ldr	r1, [pc, #48]	@ (8005984 <HAL_RCC_ClockConfig+0x26c>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <HAL_RCC_ClockConfig+0x270>)
 8005960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <HAL_RCC_ClockConfig+0x274>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fc fc2c 	bl	80021c4 <HAL_InitTick>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40022000 	.word	0x40022000
 800597c:	40021000 	.word	0x40021000
 8005980:	04c4b400 	.word	0x04c4b400
 8005984:	08007604 	.word	0x08007604
 8005988:	20000000 	.word	0x20000000
 800598c:	20000004 	.word	0x20000004

08005990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005996:	4b2c      	ldr	r3, [pc, #176]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d102      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059a2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e047      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059a8:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 030c 	and.w	r3, r3, #12
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e03e      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059ba:	4b23      	ldr	r3, [pc, #140]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d136      	bne.n	8005a34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059c6:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	3301      	adds	r3, #1
 80059dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ee:	68d2      	ldr	r2, [r2, #12]
 80059f0:	0a12      	lsrs	r2, r2, #8
 80059f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	617b      	str	r3, [r7, #20]
      break;
 80059fc:	e00c      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fe:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	4a10      	ldr	r2, [pc, #64]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a08:	68d2      	ldr	r2, [r2, #12]
 8005a0a:	0a12      	lsrs	r2, r2, #8
 8005a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
      break;
 8005a16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	0e5b      	lsrs	r3, r3, #25
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e001      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	007a1200 	.word	0x007a1200

08005a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a64:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d10c      	bne.n	8005a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a78:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	4a14      	ldr	r2, [pc, #80]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a82:	68d2      	ldr	r2, [r2, #12]
 8005a84:	0a12      	lsrs	r2, r2, #8
 8005a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]
    break;
 8005a90:	e00c      	b.n	8005aac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a92:	4a12      	ldr	r2, [pc, #72]	@ (8005adc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a9c:	68d2      	ldr	r2, [r2, #12]
 8005a9e:	0a12      	lsrs	r2, r2, #8
 8005aa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    break;
 8005aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	0e5b      	lsrs	r3, r3, #25
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ac6:	687b      	ldr	r3, [r7, #4]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	007a1200 	.word	0x007a1200
 8005adc:	00f42400 	.word	0x00f42400

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aec:	2300      	movs	r3, #0
 8005aee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8098 	beq.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005afe:	2300      	movs	r3, #0
 8005b00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b02:	4b43      	ldr	r3, [pc, #268]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b0e:	4b40      	ldr	r3, [pc, #256]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	4a3f      	ldr	r2, [pc, #252]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b26:	2301      	movs	r3, #1
 8005b28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a39      	ldr	r2, [pc, #228]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b36:	f7fc fb91 	bl	800225c <HAL_GetTick>
 8005b3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3c:	e009      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b3e:	f7fc fb8d 	bl	800225c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d902      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8005b50:	e005      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b52:	4b30      	ldr	r3, [pc, #192]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d159      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b64:	4b2a      	ldr	r3, [pc, #168]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01e      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d019      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b80:	4b23      	ldr	r3, [pc, #140]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b8c:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b92:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bac:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc fb4d 	bl	800225c <HAL_GetTick>
 8005bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc4:	e00b      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc6:	f7fc fb49 	bl	800225c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d902      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	74fb      	strb	r3, [r7, #19]
            break;
 8005bdc:	e006      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0ec      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	4903      	ldr	r1, [pc, #12]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c0a:	7cfb      	ldrb	r3, [r7, #19]
 8005c0c:	74bb      	strb	r3, [r7, #18]
 8005c0e:	e005      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c1c:	7c7b      	ldrb	r3, [r7, #17]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c22:	4ba6      	ldr	r3, [pc, #664]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	4aa5      	ldr	r2, [pc, #660]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c3a:	4ba0      	ldr	r3, [pc, #640]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f023 0203 	bic.w	r2, r3, #3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	499c      	ldr	r1, [pc, #624]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c5c:	4b97      	ldr	r3, [pc, #604]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c62:	f023 020c 	bic.w	r2, r3, #12
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4994      	ldr	r1, [pc, #592]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	498b      	ldr	r1, [pc, #556]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ca0:	4b86      	ldr	r3, [pc, #536]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4983      	ldr	r1, [pc, #524]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	497a      	ldr	r1, [pc, #488]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ce4:	4b75      	ldr	r3, [pc, #468]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	4972      	ldr	r1, [pc, #456]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d06:	4b6d      	ldr	r3, [pc, #436]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	4969      	ldr	r1, [pc, #420]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d28:	4b64      	ldr	r3, [pc, #400]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4961      	ldr	r1, [pc, #388]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	4958      	ldr	r1, [pc, #352]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d6c:	4b53      	ldr	r3, [pc, #332]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	4950      	ldr	r1, [pc, #320]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a4a      	ldr	r2, [pc, #296]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005da4:	4b45      	ldr	r3, [pc, #276]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	4942      	ldr	r1, [pc, #264]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ddc:	4b37      	ldr	r3, [pc, #220]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	4934      	ldr	r1, [pc, #208]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a2e      	ldr	r2, [pc, #184]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e14:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e22:	4926      	ldr	r1, [pc, #152]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e32:	d105      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e34:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a20      	ldr	r2, [pc, #128]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d015      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	4918      	ldr	r1, [pc, #96]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e6c:	4b13      	ldr	r3, [pc, #76]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a12      	ldr	r2, [pc, #72]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e84:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	490a      	ldr	r1, [pc, #40]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ea2:	d105      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e049      	b.n	8005f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fb ff7e 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fd92 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e04a      	b.n	800601e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a21      	ldr	r2, [pc, #132]	@ (800602c <HAL_TIM_Base_Start_IT+0xbc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x6c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d013      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x6c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x6c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006034 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x6c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006038 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x6c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a19      	ldr	r2, [pc, #100]	@ (800603c <HAL_TIM_Base_Start_IT+0xcc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d115      	bne.n	8006008 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	4b17      	ldr	r3, [pc, #92]	@ (8006040 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b06      	cmp	r3, #6
 8005fec:	d015      	beq.n	800601a <HAL_TIM_Base_Start_IT+0xaa>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d011      	beq.n	800601a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	e008      	b.n	800601a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e000      	b.n	800601c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40013400 	.word	0x40013400
 800603c:	40014000 	.word	0x40014000
 8006040:	00010007 	.word	0x00010007

08006044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e049      	b.n	80060ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f841 	bl	80060f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f000 fcd0 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start+0x24>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e03c      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b04      	cmp	r3, #4
 8006130:	d109      	bne.n	8006146 <HAL_TIM_PWM_Start+0x3e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e02f      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x58>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e022      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b0c      	cmp	r3, #12
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start+0x72>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e015      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b10      	cmp	r3, #16
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x8c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e008      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e097      	b.n	80062de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Start+0xb6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061bc:	e023      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start+0xc6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061cc:	e01b      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0xd6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061dc:	e013      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xe6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xf6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fc:	e003      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f838 	bl	8007284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a33      	ldr	r2, [pc, #204]	@ (80062e8 <HAL_TIM_PWM_Start+0x1e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_TIM_PWM_Start+0x13e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a32      	ldr	r2, [pc, #200]	@ (80062ec <HAL_TIM_PWM_Start+0x1e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIM_PWM_Start+0x13e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a30      	ldr	r2, [pc, #192]	@ (80062f0 <HAL_TIM_PWM_Start+0x1e8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_TIM_PWM_Start+0x13e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2f      	ldr	r2, [pc, #188]	@ (80062f4 <HAL_TIM_PWM_Start+0x1ec>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIM_PWM_Start+0x13e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <HAL_TIM_PWM_Start+0x1f0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_TIM_PWM_Start+0x142>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_TIM_PWM_Start+0x144>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800625e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <HAL_TIM_PWM_Start+0x1e0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_TIM_PWM_Start+0x194>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d013      	beq.n	800629c <HAL_TIM_PWM_Start+0x194>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a20      	ldr	r2, [pc, #128]	@ (80062fc <HAL_TIM_PWM_Start+0x1f4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_TIM_PWM_Start+0x194>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <HAL_TIM_PWM_Start+0x1f8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_TIM_PWM_Start+0x194>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <HAL_TIM_PWM_Start+0x1e4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIM_PWM_Start+0x194>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <HAL_TIM_PWM_Start+0x1e8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d115      	bne.n	80062c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	4b18      	ldr	r3, [pc, #96]	@ (8006304 <HAL_TIM_PWM_Start+0x1fc>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d015      	beq.n	80062da <HAL_TIM_PWM_Start+0x1d2>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b4:	d011      	beq.n	80062da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	e008      	b.n	80062da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e000      	b.n	80062dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	00010007 	.word	0x00010007

08006308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01b      	beq.n	800636c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0202 	mvn.w	r2, #2
 800633c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fb4a 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fb3c 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fb4d 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d020      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0204 	mvn.w	r2, #4
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fb24 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fb16 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fb27 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d020      	beq.n	8006404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0208 	mvn.w	r2, #8
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2204      	movs	r2, #4
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fafe 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 faf0 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fb01 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d020      	beq.n	8006450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0210 	mvn.w	r2, #16
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2208      	movs	r2, #8
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fad8 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 faca 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fadb 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0201 	mvn.w	r2, #1
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 faa8 	bl	80069c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f82f 	bl	8007500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f827 	bl	8007514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa95 	bl	8006a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f06f 0220 	mvn.w	r2, #32
 8006506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ffef 	bl	80074ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fffb 	bl	8007528 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800654e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fff3 	bl	800753c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00c      	beq.n	800657a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 ffeb 	bl	8007550 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ffe3 	bl	8007564 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0ff      	b.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b14      	cmp	r3, #20
 80065d2:	f200 80f0 	bhi.w	80067b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006631 	.word	0x08006631
 80065e0:	080067b7 	.word	0x080067b7
 80065e4:	080067b7 	.word	0x080067b7
 80065e8:	080067b7 	.word	0x080067b7
 80065ec:	08006671 	.word	0x08006671
 80065f0:	080067b7 	.word	0x080067b7
 80065f4:	080067b7 	.word	0x080067b7
 80065f8:	080067b7 	.word	0x080067b7
 80065fc:	080066b3 	.word	0x080066b3
 8006600:	080067b7 	.word	0x080067b7
 8006604:	080067b7 	.word	0x080067b7
 8006608:	080067b7 	.word	0x080067b7
 800660c:	080066f3 	.word	0x080066f3
 8006610:	080067b7 	.word	0x080067b7
 8006614:	080067b7 	.word	0x080067b7
 8006618:	080067b7 	.word	0x080067b7
 800661c:	08006735 	.word	0x08006735
 8006620:	080067b7 	.word	0x080067b7
 8006624:	080067b7 	.word	0x080067b7
 8006628:	080067b7 	.word	0x080067b7
 800662c:	08006775 	.word	0x08006775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa92 	bl	8006b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	619a      	str	r2, [r3, #24]
      break;
 800666e:	e0a5      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb02 	bl	8006c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	619a      	str	r2, [r3, #24]
      break;
 80066b0:	e084      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fb6b 	bl	8006d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0208 	orr.w	r2, r2, #8
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0204 	bic.w	r2, r2, #4
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	61da      	str	r2, [r3, #28]
      break;
 80066f0:	e064      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fbd3 	bl	8006ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	021a      	lsls	r2, r3, #8
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	61da      	str	r2, [r3, #28]
      break;
 8006732:	e043      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fc3c 	bl	8006fb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0208 	orr.w	r2, r2, #8
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0204 	bic.w	r2, r2, #4
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006772:	e023      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fc80 	bl	8007080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067b4:	e002      	b.n	80067bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop

080067d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIM_ConfigClockSource+0x1c>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e0de      	b.n	80069aa <HAL_TIM_ConfigClockSource+0x1da>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800680a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800680e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a63      	ldr	r2, [pc, #396]	@ (80069b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f000 80a9 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 800682c:	4a61      	ldr	r2, [pc, #388]	@ (80069b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f200 80ae 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006834:	4a60      	ldr	r2, [pc, #384]	@ (80069b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f000 80a1 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 800683c:	4a5e      	ldr	r2, [pc, #376]	@ (80069b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f200 80a6 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006844:	4a5d      	ldr	r2, [pc, #372]	@ (80069bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 8099 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 800684c:	4a5b      	ldr	r2, [pc, #364]	@ (80069bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800684e:	4293      	cmp	r3, r2
 8006850:	f200 809e 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006854:	4a5a      	ldr	r2, [pc, #360]	@ (80069c0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	f000 8091 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 800685c:	4a58      	ldr	r2, [pc, #352]	@ (80069c0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f200 8096 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006864:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006868:	f000 8089 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 800686c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006870:	f200 808e 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006878:	d03e      	beq.n	80068f8 <HAL_TIM_ConfigClockSource+0x128>
 800687a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800687e:	f200 8087 	bhi.w	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006886:	f000 8086 	beq.w	8006996 <HAL_TIM_ConfigClockSource+0x1c6>
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688e:	d87f      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006890:	2b70      	cmp	r3, #112	@ 0x70
 8006892:	d01a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0xfa>
 8006894:	2b70      	cmp	r3, #112	@ 0x70
 8006896:	d87b      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 8006898:	2b60      	cmp	r3, #96	@ 0x60
 800689a:	d050      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x16e>
 800689c:	2b60      	cmp	r3, #96	@ 0x60
 800689e:	d877      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 80068a0:	2b50      	cmp	r3, #80	@ 0x50
 80068a2:	d03c      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x14e>
 80068a4:	2b50      	cmp	r3, #80	@ 0x50
 80068a6:	d873      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 80068a8:	2b40      	cmp	r3, #64	@ 0x40
 80068aa:	d058      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x18e>
 80068ac:	2b40      	cmp	r3, #64	@ 0x40
 80068ae:	d86f      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 80068b0:	2b30      	cmp	r3, #48	@ 0x30
 80068b2:	d064      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 80068b4:	2b30      	cmp	r3, #48	@ 0x30
 80068b6:	d86b      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d060      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d867      	bhi.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d05c      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d05a      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x1ae>
 80068c8:	e062      	b.n	8006990 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068da:	f000 fcb3 	bl	8007244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	609a      	str	r2, [r3, #8]
      break;
 80068f6:	e04f      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006908:	f000 fc9c 	bl	8007244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800691a:	609a      	str	r2, [r3, #8]
      break;
 800691c:	e03c      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	461a      	mov	r2, r3
 800692c:	f000 fc0e 	bl	800714c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2150      	movs	r1, #80	@ 0x50
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fc67 	bl	800720a <TIM_ITRx_SetConfig>
      break;
 800693c:	e02c      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800694a:	461a      	mov	r2, r3
 800694c:	f000 fc2d 	bl	80071aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2160      	movs	r1, #96	@ 0x60
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fc57 	bl	800720a <TIM_ITRx_SetConfig>
      break;
 800695c:	e01c      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696a:	461a      	mov	r2, r3
 800696c:	f000 fbee 	bl	800714c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2140      	movs	r1, #64	@ 0x40
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fc47 	bl	800720a <TIM_ITRx_SetConfig>
      break;
 800697c:	e00c      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f000 fc3e 	bl	800720a <TIM_ITRx_SetConfig>
      break;
 800698e:	e003      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      break;
 8006994:	e000      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	00100070 	.word	0x00100070
 80069b8:	00100040 	.word	0x00100040
 80069bc:	00100030 	.word	0x00100030
 80069c0:	00100020 	.word	0x00100020

080069c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a42      	ldr	r2, [pc, #264]	@ (8006b44 <TIM_Base_SetConfig+0x11c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00f      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d00b      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006b48 <TIM_Base_SetConfig+0x120>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a3e      	ldr	r2, [pc, #248]	@ (8006b4c <TIM_Base_SetConfig+0x124>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b50 <TIM_Base_SetConfig+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a33      	ldr	r2, [pc, #204]	@ (8006b44 <TIM_Base_SetConfig+0x11c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01b      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a80:	d017      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a30      	ldr	r2, [pc, #192]	@ (8006b48 <TIM_Base_SetConfig+0x120>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8006b4c <TIM_Base_SetConfig+0x124>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00f      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a2e      	ldr	r2, [pc, #184]	@ (8006b50 <TIM_Base_SetConfig+0x128>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8006b58 <TIM_Base_SetConfig+0x130>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a2b      	ldr	r2, [pc, #172]	@ (8006b5c <TIM_Base_SetConfig+0x134>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d108      	bne.n	8006ac4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a16      	ldr	r2, [pc, #88]	@ (8006b44 <TIM_Base_SetConfig+0x11c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00f      	beq.n	8006b10 <TIM_Base_SetConfig+0xe8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <TIM_Base_SetConfig+0x128>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00b      	beq.n	8006b10 <TIM_Base_SetConfig+0xe8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <TIM_Base_SetConfig+0x12c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d007      	beq.n	8006b10 <TIM_Base_SetConfig+0xe8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <TIM_Base_SetConfig+0x130>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_Base_SetConfig+0xe8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a14      	ldr	r2, [pc, #80]	@ (8006b5c <TIM_Base_SetConfig+0x134>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d103      	bne.n	8006b18 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d105      	bne.n	8006b36 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]
  }
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40012c00 	.word	0x40012c00
 8006b48:	40000400 	.word	0x40000400
 8006b4c:	40000800 	.word	0x40000800
 8006b50:	40013400 	.word	0x40013400
 8006b54:	40014000 	.word	0x40014000
 8006b58:	40014400 	.word	0x40014400
 8006b5c:	40014800 	.word	0x40014800

08006b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f023 0201 	bic.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 0302 	bic.w	r3, r3, #2
 8006bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <TIM_OC1_SetConfig+0x10c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00f      	beq.n	8006be0 <TIM_OC1_SetConfig+0x80>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <TIM_OC1_SetConfig+0x110>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_OC1_SetConfig+0x80>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a2a      	ldr	r2, [pc, #168]	@ (8006c74 <TIM_OC1_SetConfig+0x114>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_OC1_SetConfig+0x80>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a29      	ldr	r2, [pc, #164]	@ (8006c78 <TIM_OC1_SetConfig+0x118>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_OC1_SetConfig+0x80>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a28      	ldr	r2, [pc, #160]	@ (8006c7c <TIM_OC1_SetConfig+0x11c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10c      	bne.n	8006bfa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0308 	bic.w	r3, r3, #8
 8006be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 0304 	bic.w	r3, r3, #4
 8006bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <TIM_OC1_SetConfig+0x10c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_OC1_SetConfig+0xc2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <TIM_OC1_SetConfig+0x110>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_OC1_SetConfig+0xc2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	@ (8006c74 <TIM_OC1_SetConfig+0x114>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_OC1_SetConfig+0xc2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <TIM_OC1_SetConfig+0x118>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC1_SetConfig+0xc2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <TIM_OC1_SetConfig+0x11c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d111      	bne.n	8006c46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800

08006c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f023 0210 	bic.w	r2, r3, #16
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0320 	bic.w	r3, r3, #32
 8006cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a28      	ldr	r2, [pc, #160]	@ (8006d80 <TIM_OC2_SetConfig+0x100>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_OC2_SetConfig+0x6c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a27      	ldr	r2, [pc, #156]	@ (8006d84 <TIM_OC2_SetConfig+0x104>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10d      	bne.n	8006d08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006d80 <TIM_OC2_SetConfig+0x100>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00f      	beq.n	8006d30 <TIM_OC2_SetConfig+0xb0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1c      	ldr	r2, [pc, #112]	@ (8006d84 <TIM_OC2_SetConfig+0x104>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_OC2_SetConfig+0xb0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <TIM_OC2_SetConfig+0x108>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_OC2_SetConfig+0xb0>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a1a      	ldr	r2, [pc, #104]	@ (8006d8c <TIM_OC2_SetConfig+0x10c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC2_SetConfig+0xb0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a19      	ldr	r2, [pc, #100]	@ (8006d90 <TIM_OC2_SetConfig+0x110>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d113      	bne.n	8006d58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	40014400 	.word	0x40014400
 8006d90:	40014800 	.word	0x40014800

08006d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0303 	bic.w	r3, r3, #3
 8006dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a27      	ldr	r2, [pc, #156]	@ (8006e90 <TIM_OC3_SetConfig+0xfc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_OC3_SetConfig+0x6a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a26      	ldr	r2, [pc, #152]	@ (8006e94 <TIM_OC3_SetConfig+0x100>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d10d      	bne.n	8006e1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e90 <TIM_OC3_SetConfig+0xfc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00f      	beq.n	8006e42 <TIM_OC3_SetConfig+0xae>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1b      	ldr	r2, [pc, #108]	@ (8006e94 <TIM_OC3_SetConfig+0x100>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_OC3_SetConfig+0xae>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e98 <TIM_OC3_SetConfig+0x104>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <TIM_OC3_SetConfig+0xae>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a19      	ldr	r2, [pc, #100]	@ (8006e9c <TIM_OC3_SetConfig+0x108>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_OC3_SetConfig+0xae>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <TIM_OC3_SetConfig+0x10c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d113      	bne.n	8006e6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	621a      	str	r2, [r3, #32]
}
 8006e84:	bf00      	nop
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800

08006ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a28      	ldr	r2, [pc, #160]	@ (8006fa4 <TIM_OC4_SetConfig+0x100>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC4_SetConfig+0x6c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	@ (8006fa8 <TIM_OC4_SetConfig+0x104>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10d      	bne.n	8006f2c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	031b      	lsls	r3, r3, #12
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa4 <TIM_OC4_SetConfig+0x100>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00f      	beq.n	8006f54 <TIM_OC4_SetConfig+0xb0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa8 <TIM_OC4_SetConfig+0x104>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <TIM_OC4_SetConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fac <TIM_OC4_SetConfig+0x108>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <TIM_OC4_SetConfig+0xb0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <TIM_OC4_SetConfig+0x10c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC4_SetConfig+0xb0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	@ (8006fb4 <TIM_OC4_SetConfig+0x110>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d113      	bne.n	8006f7c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	019b      	lsls	r3, r3, #6
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	019b      	lsls	r3, r3, #6
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40013400 	.word	0x40013400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800

08006fb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ffc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a17      	ldr	r2, [pc, #92]	@ (800706c <TIM_OC5_SetConfig+0xb4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_OC5_SetConfig+0x7a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a16      	ldr	r2, [pc, #88]	@ (8007070 <TIM_OC5_SetConfig+0xb8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_OC5_SetConfig+0x7a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a15      	ldr	r2, [pc, #84]	@ (8007074 <TIM_OC5_SetConfig+0xbc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_OC5_SetConfig+0x7a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a14      	ldr	r2, [pc, #80]	@ (8007078 <TIM_OC5_SetConfig+0xc0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC5_SetConfig+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a13      	ldr	r2, [pc, #76]	@ (800707c <TIM_OC5_SetConfig+0xc4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d109      	bne.n	8007046 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	621a      	str	r2, [r3, #32]
}
 8007060:	bf00      	nop
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40013400 	.word	0x40013400
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400
 800707c:	40014800 	.word	0x40014800

08007080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	051b      	lsls	r3, r3, #20
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a18      	ldr	r2, [pc, #96]	@ (8007138 <TIM_OC6_SetConfig+0xb8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00f      	beq.n	80070fc <TIM_OC6_SetConfig+0x7c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a17      	ldr	r2, [pc, #92]	@ (800713c <TIM_OC6_SetConfig+0xbc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_OC6_SetConfig+0x7c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <TIM_OC6_SetConfig+0xc0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_OC6_SetConfig+0x7c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <TIM_OC6_SetConfig+0xc4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC6_SetConfig+0x7c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a14      	ldr	r2, [pc, #80]	@ (8007148 <TIM_OC6_SetConfig+0xc8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d109      	bne.n	8007110 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f023 0201 	bic.w	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f023 030a 	bic.w	r3, r3, #10
 8007188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b087      	sub	sp, #28
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f023 0210 	bic.w	r2, r3, #16
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	031b      	lsls	r3, r3, #12
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	f043 0307 	orr.w	r3, r3, #7
 8007230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800725e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	431a      	orrs	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2201      	movs	r2, #1
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a1a      	ldr	r2, [r3, #32]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	401a      	ands	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	431a      	orrs	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e065      	b.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2c      	ldr	r2, [pc, #176]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2b      	ldr	r2, [pc, #172]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1b      	ldr	r2, [pc, #108]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d018      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735e:	d013      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a18      	ldr	r2, [pc, #96]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00e      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d009      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a12      	ldr	r2, [pc, #72]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a13      	ldr	r2, [pc, #76]	@ (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d10c      	bne.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4313      	orrs	r3, r2
 8007398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	40013400 	.word	0x40013400
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40014000 	.word	0x40014000

080073d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e073      	b.n	80074d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a19      	ldr	r2, [pc, #100]	@ (80074e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a18      	ldr	r2, [pc, #96]	@ (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d11c      	bne.n	80074c6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	051b      	lsls	r3, r3, #20
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40012c00 	.word	0x40012c00
 80074e8:	40013400 	.word	0x40013400

080074ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <memset>:
 8007578:	4402      	add	r2, r0
 800757a:	4603      	mov	r3, r0
 800757c:	4293      	cmp	r3, r2
 800757e:	d100      	bne.n	8007582 <memset+0xa>
 8007580:	4770      	bx	lr
 8007582:	f803 1b01 	strb.w	r1, [r3], #1
 8007586:	e7f9      	b.n	800757c <memset+0x4>

08007588 <__libc_init_array>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	4d0d      	ldr	r5, [pc, #52]	@ (80075c0 <__libc_init_array+0x38>)
 800758c:	4c0d      	ldr	r4, [pc, #52]	@ (80075c4 <__libc_init_array+0x3c>)
 800758e:	1b64      	subs	r4, r4, r5
 8007590:	10a4      	asrs	r4, r4, #2
 8007592:	2600      	movs	r6, #0
 8007594:	42a6      	cmp	r6, r4
 8007596:	d109      	bne.n	80075ac <__libc_init_array+0x24>
 8007598:	4d0b      	ldr	r5, [pc, #44]	@ (80075c8 <__libc_init_array+0x40>)
 800759a:	4c0c      	ldr	r4, [pc, #48]	@ (80075cc <__libc_init_array+0x44>)
 800759c:	f000 f826 	bl	80075ec <_init>
 80075a0:	1b64      	subs	r4, r4, r5
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	2600      	movs	r6, #0
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	d105      	bne.n	80075b6 <__libc_init_array+0x2e>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b0:	4798      	blx	r3
 80075b2:	3601      	adds	r6, #1
 80075b4:	e7ee      	b.n	8007594 <__libc_init_array+0xc>
 80075b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ba:	4798      	blx	r3
 80075bc:	3601      	adds	r6, #1
 80075be:	e7f2      	b.n	80075a6 <__libc_init_array+0x1e>
 80075c0:	08007624 	.word	0x08007624
 80075c4:	08007624 	.word	0x08007624
 80075c8:	08007624 	.word	0x08007624
 80075cc:	08007628 	.word	0x08007628

080075d0 <memcpy>:
 80075d0:	440a      	add	r2, r1
 80075d2:	4291      	cmp	r1, r2
 80075d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d8:	d100      	bne.n	80075dc <memcpy+0xc>
 80075da:	4770      	bx	lr
 80075dc:	b510      	push	{r4, lr}
 80075de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e6:	4291      	cmp	r1, r2
 80075e8:	d1f9      	bne.n	80075de <memcpy+0xe>
 80075ea:	bd10      	pop	{r4, pc}

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
