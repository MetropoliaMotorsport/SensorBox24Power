
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fec  08007fec  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff4  08007ff4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000060  0800805c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800805c  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191bc  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da7  00000000  00000000  0003928f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011db  00000000  00000000  0003d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020917  00000000  00000000  0003e8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199e4  00000000  00000000  0005f212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dee06  00000000  00000000  00078bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068ec  00000000  00000000  001579fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0015e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e88 	.word	0x08007e88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08007e88 	.word	0x08007e88

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80005c0:	f000 f802 	bl	80005c8 <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <Config_1>:

void Config_1(void){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <Config_1+0x10c>)
 80005ce:	f240 726c 	movw	r2, #1900	; 0x76c
 80005d2:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 80005d4:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <Config_1+0x110>)
 80005d6:	f640 0202 	movw	r2, #2050	; 0x802
 80005da:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <Config_1+0x114>)
 80005de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005e2:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 80005e4:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <Config_1+0x118>)
 80005e6:	f240 726c 	movw	r2, #1900	; 0x76c
 80005ea:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <Config_1+0x11c>)
 80005ee:	f640 0202 	movw	r2, #2050	; 0x802
 80005f2:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <Config_1+0x120>)
 80005f6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005fa:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <Config_1+0x124>)
 80005fe:	f240 726c 	movw	r2, #1900	; 0x76c
 8000602:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <Config_1+0x128>)
 8000606:	f640 0202 	movw	r2, #2050	; 0x802
 800060a:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 800060c:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <Config_1+0x12c>)
 800060e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000612:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <Config_1+0x130>)
 8000616:	f240 726c 	movw	r2, #1900	; 0x76c
 800061a:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 800061c:	4b37      	ldr	r3, [pc, #220]	; (80006fc <Config_1+0x134>)
 800061e:	f640 0202 	movw	r2, #2050	; 0x802
 8000622:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <Config_1+0x138>)
 8000626:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800062a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 800062c:	4b35      	ldr	r3, [pc, #212]	; (8000704 <Config_1+0x13c>)
 800062e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000632:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <Config_1+0x140>)
 8000636:	f640 0202 	movw	r2, #2050	; 0x802
 800063a:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <Config_1+0x144>)
 800063e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000642:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <Config_1+0x148>)
 8000646:	f240 726c 	movw	r2, #1900	; 0x76c
 800064a:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <Config_1+0x14c>)
 800064e:	f640 0202 	movw	r2, #2050	; 0x802
 8000652:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <Config_1+0x150>)
 8000656:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800065a:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <Config_1+0x154>)
 800065e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000662:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <Config_1+0x158>)
 8000666:	f640 0202 	movw	r2, #2050	; 0x802
 800066a:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <Config_1+0x15c>)
 800066e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000672:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <Config_1+0x160>)
 8000676:	f240 726c 	movw	r2, #1900	; 0x76c
 800067a:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <Config_1+0x164>)
 800067e:	f640 0202 	movw	r2, #2050	; 0x802
 8000682:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <Config_1+0x168>)
 8000686:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800068a:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b11111111; //each bit represent one output [1,2,3,4,5,6,7,8]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <Config_1+0x16c>)
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00000000;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <Config_1+0x170>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

	PWM_Prescalers[0] = 0 ;PWM_Prescalers[1] = 0 ;PWM_Prescalers[2] = 0 ;PWM_Prescalers[3] = 0 ;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <Config_1+0x174>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <Config_1+0x174>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	805a      	strh	r2, [r3, #2]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <Config_1+0x174>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	809a      	strh	r2, [r3, #4]
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <Config_1+0x174>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	80da      	strh	r2, [r3, #6]
	PWM_Prescalers[4] = 0 ;PWM_Prescalers[5] = 0 ;PWM_Prescalers[6] = 0 ;PWM_Prescalers[7] = 0 ;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <Config_1+0x174>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	811a      	strh	r2, [r3, #8]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <Config_1+0x174>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	815a      	strh	r2, [r3, #10]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <Config_1+0x174>)
 80006be:	2200      	movs	r2, #0
 80006c0:	819a      	strh	r2, [r3, #12]
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <Config_1+0x174>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	81da      	strh	r2, [r3, #14]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200006cc 	.word	0x200006cc
 80006d8:	200006ce 	.word	0x200006ce
 80006dc:	200006d0 	.word	0x200006d0
 80006e0:	200006d2 	.word	0x200006d2
 80006e4:	200006d4 	.word	0x200006d4
 80006e8:	200006d6 	.word	0x200006d6
 80006ec:	200006d8 	.word	0x200006d8
 80006f0:	200006da 	.word	0x200006da
 80006f4:	200006dc 	.word	0x200006dc
 80006f8:	200006de 	.word	0x200006de
 80006fc:	200006e0 	.word	0x200006e0
 8000700:	200006e2 	.word	0x200006e2
 8000704:	200006e4 	.word	0x200006e4
 8000708:	200006e6 	.word	0x200006e6
 800070c:	200006e8 	.word	0x200006e8
 8000710:	200006ea 	.word	0x200006ea
 8000714:	200006ec 	.word	0x200006ec
 8000718:	200006ee 	.word	0x200006ee
 800071c:	200006f0 	.word	0x200006f0
 8000720:	200006f2 	.word	0x200006f2
 8000724:	200006f4 	.word	0x200006f4
 8000728:	200006f6 	.word	0x200006f6
 800072c:	200006f8 	.word	0x200006f8
 8000730:	200006fa 	.word	0x200006fa
 8000734:	200006fe 	.word	0x200006fe
 8000738:	200006ff 	.word	0x200006ff
 800073c:	20000700 	.word	0x20000700

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f001 fd0d 	bl	8002162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f84a 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 800074c:	f000 fc98 	bl	8001080 <MX_DMA_Init>
  MX_GPIO_Init();
 8000750:	f000 fcc0 	bl	80010d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000754:	f000 f884 	bl	8000860 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000758:	f000 f964 	bl	8000a24 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 800075c:	f000 f9a8 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000760:	f000 fa54 	bl	8000c0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000764:	f000 fac6 	bl	8000cf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000768:	f000 fb38 	bl	8000ddc <MX_TIM4_Init>
  MX_TIM6_Init();
 800076c:	f000 fbaa 	bl	8000ec4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000770:	f000 fbde 	bl	8000f30 <MX_TIM7_Init>
  MX_TIM16_Init();
 8000774:	f000 fc12 	bl	8000f9c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000778:	f000 fc36 	bl	8000fe8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800077c:	f000 f8ea 	bl	8000954 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); //PWM
 8000780:	4810      	ldr	r0, [pc, #64]	; (80007c4 <main+0x84>)
 8000782:	f005 f855 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //PWM
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <main+0x88>)
 8000788:	f005 f852 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //PWM
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <main+0x8c>)
 800078e:	f005 f84f 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); //PWM
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <main+0x90>)
 8000794:	f005 f84c 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x94>)
 800079a:	f005 f849 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x98>)
 80007a0:	f005 f846 	bl	8005830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0x9c>)
 80007a6:	f005 f843 	bl	8005830 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  Config_Setup();
 80007aa:	f7ff ff07 	bl	80005bc <Config_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  CS_read();
 80007ae:	f000 fd79 	bl	80012a4 <CS_read>
  CS_process();
 80007b2:	f000 ff3f 	bl	8001634 <CS_process>
  check_warnings();
 80007b6:	f000 ffe1 	bl	800177c <check_warnings>
  HAL_Delay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f001 fd41 	bl	8002244 <HAL_Delay>
  CS_read();
 80007c2:	e7f4      	b.n	80007ae <main+0x6e>
 80007c4:	20000218 	.word	0x20000218
 80007c8:	20000264 	.word	0x20000264
 80007cc:	200002b0 	.word	0x200002b0
 80007d0:	200002fc 	.word	0x200002fc
 80007d4:	20000348 	.word	0x20000348
 80007d8:	20000394 	.word	0x20000394
 80007dc:	200003e0 	.word	0x200003e0

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2238      	movs	r2, #56	; 0x38
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fec6 	bl	8007580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000806:	f003 ffe3 	bl	80047d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4618      	mov	r0, r3
 8000822:	f004 f889 	bl	8004938 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800082c:	f001 f9ae 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2301      	movs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f004 fb8d 	bl	8004f68 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000854:	f001 f99a 	bl	8001b8c <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2220      	movs	r2, #32
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f006 fe81 	bl	8007580 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000880:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000884:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800088c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000894:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e8:	4817      	ldr	r0, [pc, #92]	; (8000948 <MX_ADC1_Init+0xe8>)
 80008ea:	f001 ff4b 	bl	8002784 <HAL_ADC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008f4:	f001 f94a 	bl	8001b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000904:	f003 f8ac 	bl	8003a60 <HAL_ADCEx_MultiModeConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800090e:	f001 f93d 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_ADC1_Init+0xec>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_ADC1_Init+0xf0>)
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_ADC1_Init+0xe8>)
 8000930:	f002 fb02 	bl	8002f38 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800093a:	f001 f927 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	; 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000007c 	.word	0x2000007c
 800094c:	04300002 	.word	0x04300002
 8000950:	407f0000 	.word	0x407f0000

08000954 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fe0d 	bl	8007580 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_ADC2_Init+0xc0>)
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <MX_ADC2_Init+0xc4>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_ADC2_Init+0xc0>)
 800096e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000972:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_ADC2_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_ADC2_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_ADC2_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_ADC2_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC2_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_ADC2_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_ADC2_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009d0:	f001 fed8 	bl	8002784 <HAL_ADC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80009da:	f001 f8d7 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC2_Init+0xc8>)
 80009e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_ADC2_Init+0xcc>)
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ee:	2304      	movs	r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_ADC2_Init+0xc0>)
 80009fc:	f002 fa9c 	bl	8002f38 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a06:	f001 f8c1 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000e8 	.word	0x200000e8
 8000a18:	50000100 	.word	0x50000100
 8000a1c:	0c900008 	.word	0x0c900008
 8000a20:	407f0000 	.word	0x407f0000

08000a24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <MX_FDCAN1_Init+0x88>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a54:	2210      	movs	r2, #16
 8000a56:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_FDCAN1_Init+0x84>)
 8000a96:	f003 fb51 	bl	800413c <HAL_FDCAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000aa0:	f001 f874 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001b4 	.word	0x200001b4
 8000aac:	40006400 	.word	0x40006400

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09c      	sub	sp, #112	; 0x70
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f006 fd48 	bl	8007580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af0:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000af2:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <MX_TIM1_Init+0x158>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b02:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1c:	4839      	ldr	r0, [pc, #228]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b1e:	f004 fe2f 	bl	8005780 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f001 f830 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b36:	4619      	mov	r1, r3
 8000b38:	4832      	ldr	r0, [pc, #200]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b3a:	f005 f859 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b44:	f001 f822 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b48:	482e      	ldr	r0, [pc, #184]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b4a:	f004 fedb 	bl	8005904 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b54:	f001 f81a 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4826      	ldr	r0, [pc, #152]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000b6c:	f005 fd5c 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b76:	f001 f809 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4819      	ldr	r0, [pc, #100]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000ba0:	f004 ff12 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000baa:	f000 ffef 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_TIM1_Init+0x154>)
 8000bec:	f005 fd9e 	bl	800672c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000bf6:	f000 ffc9 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	; 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000218 	.word	0x20000218
 8000c08:	40012c00 	.word	0x40012c00

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c66:	4822      	ldr	r0, [pc, #136]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c68:	f004 fd8a 	bl	8005780 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c72:	f000 ff8b 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c84:	f004 ffb4 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c8e:	f000 ff7d 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000c94:	f004 fe36 	bl	8005904 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c9e:	f000 ff75 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000cb2:	f005 fcb9 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cbc:	f000 ff66 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	; 0x60
 8000cc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_TIM2_Init+0xe4>)
 8000cd8:	f004 fe76 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ce2:	f000 ff53 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	; 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000264 	.word	0x20000264

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	; 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <MX_TIM3_Init+0xe4>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4c:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d4e:	f004 fd17 	bl	8005780 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d58:	f000 ff18 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	4619      	mov	r1, r3
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d6a:	f004 ff41 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d74:	f000 ff0a 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d7a:	f004 fdc3 	bl	8005904 <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d84:	f000 ff02 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000d98:	f005 fc46 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000da2:	f000 fef3 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	; 0x60
 8000da8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_TIM3_Init+0xe0>)
 8000dbe:	f004 fe03 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000dc8:	f000 fee0 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002b0 	.word	0x200002b0
 8000dd8:	40000400 	.word	0x40000400

08000ddc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e10:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <MX_TIM4_Init+0xe4>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e34:	4821      	ldr	r0, [pc, #132]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e36:	f004 fca3 	bl	8005780 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e40:	f000 fea4 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481a      	ldr	r0, [pc, #104]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e52:	f004 fecd 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e5c:	f000 fe96 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e62:	f004 fd4f 	bl	8005904 <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e6c:	f000 fe8e 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000e80:	f005 fbd2 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 fe7f 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_TIM4_Init+0xe0>)
 8000ea6:	f004 fd8f 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000eb0:	f000 fe6c 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200002fc 	.word	0x200002fc
 8000ec0:	40000800 	.word	0x40000800

08000ec4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_TIM6_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000ef6:	f004 fc43 	bl	8005780 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f00:	f000 fe44 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM6_Init+0x64>)
 8000f12:	f005 fb89 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 fe36 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000348 	.word	0x20000348
 8000f2c:	40001000 	.word	0x40001000

08000f30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <MX_TIM7_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f58:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f62:	f004 fc0d 	bl	8005780 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f6c:	f000 fe0e 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM7_Init+0x64>)
 8000f7e:	f005 fb53 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 fe00 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000394 	.word	0x20000394
 8000f98:	40001400 	.word	0x40001400

08000f9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <MX_TIM16_Init+0x48>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_TIM16_Init+0x44>)
 8000fce:	f004 fbd7 	bl	8005780 <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000fd8:	f000 fdd8 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200003e0 	.word	0x200003e0
 8000fe4:	40014400 	.word	0x40014400

08000fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART2_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_USART2_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_USART2_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART2_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001032:	f005 fc1b 	bl	800686c <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 fda6 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001044:	f006 f9b2 	bl	80073ac <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 fd9d 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001056:	f006 f9e7 	bl	8007428 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f000 fd94 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USART2_UART_Init+0x90>)
 8001066:	f006 f968 	bl	800733a <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 fd8c 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000042c 	.word	0x2000042c
 800107c:	40004400 	.word	0x40004400

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_DMA_Init+0x50>)
 8001088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <MX_DMA_Init+0x50>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6493      	str	r3, [r2, #72]	; 0x48
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_DMA_Init+0x50>)
 8001094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_DMA_Init+0x50>)
 80010a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <MX_DMA_Init+0x50>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6493      	str	r3, [r2, #72]	; 0x48
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_DMA_Init+0x50>)
 80010ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	200c      	movs	r0, #12
 80010bc:	f002 fe4f 	bl	8003d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c0:	200c      	movs	r0, #12
 80010c2:	f002 fe66 	bl	8003d92 <HAL_NVIC_EnableIRQ>

}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <MX_GPIO_Init+0x11c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x11c>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <MX_GPIO_Init+0x11c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <MX_GPIO_Init+0x11c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a3a      	ldr	r2, [pc, #232]	; (80011f0 <MX_GPIO_Init+0x11c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x11c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <MX_GPIO_Init+0x11c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a34      	ldr	r2, [pc, #208]	; (80011f0 <MX_GPIO_Init+0x11c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x11c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001138:	482e      	ldr	r0, [pc, #184]	; (80011f4 <MX_GPIO_Init+0x120>)
 800113a:	f003 fb31 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f248 6110 	movw	r1, #34320	; 0x8610
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f003 fb2a 	bl	80047a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8001152:	4829      	ldr	r0, [pc, #164]	; (80011f8 <MX_GPIO_Init+0x124>)
 8001154:	f003 fb24 	bl	80047a0 <HAL_GPIO_WritePin>
                          |IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	4820      	ldr	r0, [pc, #128]	; (80011f4 <MX_GPIO_Init+0x120>)
 8001172:	f003 f993 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001176:	f248 6310 	movw	r3, #34320	; 0x8610
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f003 f983 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL1_READ_Pin */
  GPIO_InitStruct.Pin = SEL1_READ_Pin;
 8001196:	2320      	movs	r3, #32
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL1_READ_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f003 f976 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEL0_READ_Pin */
  GPIO_InitStruct.Pin = SEL0_READ_Pin;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b8:	2302      	movs	r3, #2
 80011ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEL0_READ_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_GPIO_Init+0x124>)
 80011c4:	f003 f96a 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_Pin IN3_2_Pin SEL1_Pin SEL0_Pin
                           IN2_2_Pin */
  GPIO_InitStruct.Pin = IN0_Pin|IN3_2_Pin|SEL1_Pin|SEL0_Pin
 80011c8:	f44f 73bc 	mov.w	r3, #376	; 0x178
 80011cc:	60fb      	str	r3, [r7, #12]
                          |IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_GPIO_Init+0x124>)
 80011e2:	f003 f95b 	bl	800449c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48001800 	.word	0x48001800
 80011f8:	48000400 	.word	0x48000400

080011fc <print_out>:

/* USER CODE BEGIN 4 */
void print_out(uint32_t data, const char *text, uint8_t out_mode){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	4613      	mov	r3, r2
 8001208:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)+sizeof(data_buffer)+4+2+4] = "";
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	821a      	strh	r2, [r3, #16]
	if(data == -1){
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d107      	bne.n	8001242 <print_out+0x46>
		sprintf(msg, "\r\n%s \r\n", buffer);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <print_out+0x98>)
 800123a:	4618      	mov	r0, r3
 800123c:	f006 f980 	bl	8007540 <siprintf>
 8001240:	e006      	b.n	8001250 <print_out+0x54>
	}else{
		sprintf(msg, "\r\n%s %lu\r\n", buffer, data_buffer);
 8001242:	f107 0010 	add.w	r0, r7, #16
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124a:	4913      	ldr	r1, [pc, #76]	; (8001298 <print_out+0x9c>)
 800124c:	f006 f978 	bl	8007540 <siprintf>
	}

	switch(out_mode){
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d00f      	beq.n	8001276 <print_out+0x7a>
 8001256:	2b03      	cmp	r3, #3
 8001258:	dc17      	bgt.n	800128a <print_out+0x8e>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <print_out+0x66>
 800125e:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
			  text = "";
			  break;
		  case 0b10: //output only through CAN
			  //TODO implement CAN
			  break;
 8001260:	e013      	b.n	800128a <print_out+0x8e>
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8001262:	f107 0110 	add.w	r1, r7, #16
 8001266:	23ff      	movs	r3, #255	; 0xff
 8001268:	2216      	movs	r2, #22
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <print_out+0xa0>)
 800126c:	f005 fb4e 	bl	800690c <HAL_UART_Transmit>
			  text = "";
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <print_out+0xa4>)
 8001272:	60bb      	str	r3, [r7, #8]
			  break;
 8001274:	e009      	b.n	800128a <print_out+0x8e>
		  case 0b11://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 0xFF);
 8001276:	f107 0110 	add.w	r1, r7, #16
 800127a:	23ff      	movs	r3, #255	; 0xff
 800127c:	2216      	movs	r2, #22
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <print_out+0xa0>)
 8001280:	f005 fb44 	bl	800690c <HAL_UART_Transmit>
			  text = "";
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <print_out+0xa4>)
 8001286:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 8001288:	bf00      	nop
		  }
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08007ea0 	.word	0x08007ea0
 8001298:	08007ea8 	.word	0x08007ea8
 800129c:	2000042c 	.word	0x2000042c
 80012a0:	08007eb4 	.word	0x08007eb4

080012a4 <CS_read>:

void CS_read(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e1af      	b.n	8001610 <CS_read+0x36c>
		switch(x){
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	f200 81a9 	bhi.w	800160a <CS_read+0x366>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <CS_read+0x1c>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	08001395 	.word	0x08001395
 80012c8:	08001459 	.word	0x08001459
 80012cc:	0800151d 	.word	0x0800151d
		case 0:
			CS_SEL[0] = 0;
 80012d0:	4b9e      	ldr	r3, [pc, #632]	; (800154c <CS_read+0x2a8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <CS_read+0x2a8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 80012dc:	4b9b      	ldr	r3, [pc, #620]	; (800154c <CS_read+0x2a8>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	489a      	ldr	r0, [pc, #616]	; (8001550 <CS_read+0x2ac>)
 80012e6:	f003 fa5b 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 80012ea:	4b98      	ldr	r3, [pc, #608]	; (800154c <CS_read+0x2a8>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	461a      	mov	r2, r3
 80012f0:	2120      	movs	r1, #32
 80012f2:	4897      	ldr	r0, [pc, #604]	; (8001550 <CS_read+0x2ac>)
 80012f4:	f003 fa54 	bl	80047a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	e046      	b.n	800138c <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80012fe:	4895      	ldr	r0, [pc, #596]	; (8001554 <CS_read+0x2b0>)
 8001300:	f001 fca2 	bl	8002c48 <HAL_ADC_Start_IT>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <CS_read+0x6a>
 800130a:	f000 fc3f 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 800130e:	4892      	ldr	r0, [pc, #584]	; (8001558 <CS_read+0x2b4>)
 8001310:	f001 fc9a 	bl	8002c48 <HAL_ADC_Start_IT>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <CS_read+0x7a>
 800131a:	f000 fc37 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 800131e:	210a      	movs	r1, #10
 8001320:	488c      	ldr	r0, [pc, #560]	; (8001554 <CS_read+0x2b0>)
 8001322:	f001 fbb9 	bl	8002a98 <HAL_ADC_PollForConversion>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <CS_read+0x8c>
 800132c:	f000 fc2e 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8001330:	210a      	movs	r1, #10
 8001332:	4889      	ldr	r0, [pc, #548]	; (8001558 <CS_read+0x2b4>)
 8001334:	f001 fbb0 	bl	8002a98 <HAL_ADC_PollForConversion>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <CS_read+0x9e>
 800133e:	f000 fc25 	bl	8001b8c <Error_Handler>
				IN1_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8001342:	4884      	ldr	r0, [pc, #528]	; (8001554 <CS_read+0x2b0>)
 8001344:	f001 fdeb 	bl	8002f1e <HAL_ADC_GetValue>
 8001348:	4603      	mov	r3, r0
 800134a:	b299      	uxth	r1, r3
 800134c:	4a83      	ldr	r2, [pc, #524]	; (800155c <CS_read+0x2b8>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8001354:	4880      	ldr	r0, [pc, #512]	; (8001558 <CS_read+0x2b4>)
 8001356:	f001 fde2 	bl	8002f1e <HAL_ADC_GetValue>
 800135a:	4603      	mov	r3, r0
 800135c:	b299      	uxth	r1, r3
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <CS_read+0x2bc>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8001366:	487b      	ldr	r0, [pc, #492]	; (8001554 <CS_read+0x2b0>)
 8001368:	f001 fd9e 	bl	8002ea8 <HAL_ADC_Stop_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <CS_read+0xd2>
 8001372:	f000 fc0b 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8001376:	4878      	ldr	r0, [pc, #480]	; (8001558 <CS_read+0x2b4>)
 8001378:	f001 fd96 	bl	8002ea8 <HAL_ADC_Stop_IT>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <CS_read+0xe2>
 8001382:	f000 fc03 	bl	8001b8c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	3301      	adds	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b1f      	cmp	r3, #31
 8001390:	ddb5      	ble.n	80012fe <CS_read+0x5a>
			}
			break;
 8001392:	e13a      	b.n	800160a <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <CS_read+0x2a8>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <CS_read+0x2a8>)
 800139c:	2201      	movs	r2, #1
 800139e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <CS_read+0x2a8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	2140      	movs	r1, #64	; 0x40
 80013a8:	4869      	ldr	r0, [pc, #420]	; (8001550 <CS_read+0x2ac>)
 80013aa:	f003 f9f9 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <CS_read+0x2a8>)
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	461a      	mov	r2, r3
 80013b4:	2120      	movs	r1, #32
 80013b6:	4866      	ldr	r0, [pc, #408]	; (8001550 <CS_read+0x2ac>)
 80013b8:	f003 f9f2 	bl	80047a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e046      	b.n	8001450 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80013c2:	4864      	ldr	r0, [pc, #400]	; (8001554 <CS_read+0x2b0>)
 80013c4:	f001 fc40 	bl	8002c48 <HAL_ADC_Start_IT>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <CS_read+0x12e>
 80013ce:	f000 fbdd 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80013d2:	4861      	ldr	r0, [pc, #388]	; (8001558 <CS_read+0x2b4>)
 80013d4:	f001 fc38 	bl	8002c48 <HAL_ADC_Start_IT>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <CS_read+0x13e>
 80013de:	f000 fbd5 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80013e2:	210a      	movs	r1, #10
 80013e4:	485b      	ldr	r0, [pc, #364]	; (8001554 <CS_read+0x2b0>)
 80013e6:	f001 fb57 	bl	8002a98 <HAL_ADC_PollForConversion>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <CS_read+0x150>
 80013f0:	f000 fbcc 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80013f4:	210a      	movs	r1, #10
 80013f6:	4858      	ldr	r0, [pc, #352]	; (8001558 <CS_read+0x2b4>)
 80013f8:	f001 fb4e 	bl	8002a98 <HAL_ADC_PollForConversion>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <CS_read+0x162>
 8001402:	f000 fbc3 	bl	8001b8c <Error_Handler>
				IN2_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 8001406:	4853      	ldr	r0, [pc, #332]	; (8001554 <CS_read+0x2b0>)
 8001408:	f001 fd89 	bl	8002f1e <HAL_ADC_GetValue>
 800140c:	4603      	mov	r3, r0
 800140e:	b299      	uxth	r1, r3
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <CS_read+0x2c0>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 8001418:	484f      	ldr	r0, [pc, #316]	; (8001558 <CS_read+0x2b4>)
 800141a:	f001 fd80 	bl	8002f1e <HAL_ADC_GetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	b299      	uxth	r1, r3
 8001422:	4a51      	ldr	r2, [pc, #324]	; (8001568 <CS_read+0x2c4>)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 800142a:	484a      	ldr	r0, [pc, #296]	; (8001554 <CS_read+0x2b0>)
 800142c:	f001 fd3c 	bl	8002ea8 <HAL_ADC_Stop_IT>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <CS_read+0x196>
 8001436:	f000 fba9 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 800143a:	4847      	ldr	r0, [pc, #284]	; (8001558 <CS_read+0x2b4>)
 800143c:	f001 fd34 	bl	8002ea8 <HAL_ADC_Stop_IT>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <CS_read+0x1a6>
 8001446:	f000 fba1 	bl	8001b8c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b1f      	cmp	r3, #31
 8001454:	ddb5      	ble.n	80013c2 <CS_read+0x11e>
			}
			break;
 8001456:	e0d8      	b.n	800160a <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <CS_read+0x2a8>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <CS_read+0x2a8>)
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <CS_read+0x2a8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	4838      	ldr	r0, [pc, #224]	; (8001550 <CS_read+0x2ac>)
 800146e:	f003 f997 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <CS_read+0x2a8>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	461a      	mov	r2, r3
 8001478:	2120      	movs	r1, #32
 800147a:	4835      	ldr	r0, [pc, #212]	; (8001550 <CS_read+0x2ac>)
 800147c:	f003 f990 	bl	80047a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	e046      	b.n	8001514 <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8001486:	4833      	ldr	r0, [pc, #204]	; (8001554 <CS_read+0x2b0>)
 8001488:	f001 fbde 	bl	8002c48 <HAL_ADC_Start_IT>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <CS_read+0x1f2>
 8001492:	f000 fb7b 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8001496:	4830      	ldr	r0, [pc, #192]	; (8001558 <CS_read+0x2b4>)
 8001498:	f001 fbd6 	bl	8002c48 <HAL_ADC_Start_IT>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <CS_read+0x202>
 80014a2:	f000 fb73 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 80014a6:	210a      	movs	r1, #10
 80014a8:	482a      	ldr	r0, [pc, #168]	; (8001554 <CS_read+0x2b0>)
 80014aa:	f001 faf5 	bl	8002a98 <HAL_ADC_PollForConversion>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <CS_read+0x214>
 80014b4:	f000 fb6a 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80014b8:	210a      	movs	r1, #10
 80014ba:	4827      	ldr	r0, [pc, #156]	; (8001558 <CS_read+0x2b4>)
 80014bc:	f001 faec 	bl	8002a98 <HAL_ADC_PollForConversion>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <CS_read+0x226>
 80014c6:	f000 fb61 	bl	8001b8c <Error_Handler>
				IN3_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 80014ca:	4822      	ldr	r0, [pc, #136]	; (8001554 <CS_read+0x2b0>)
 80014cc:	f001 fd27 	bl	8002f1e <HAL_ADC_GetValue>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b299      	uxth	r1, r3
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <CS_read+0x2c8>)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <CS_read+0x2b4>)
 80014de:	f001 fd1e 	bl	8002f1e <HAL_ADC_GetValue>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b299      	uxth	r1, r3
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <CS_read+0x2cc>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80014ee:	4819      	ldr	r0, [pc, #100]	; (8001554 <CS_read+0x2b0>)
 80014f0:	f001 fcda 	bl	8002ea8 <HAL_ADC_Stop_IT>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <CS_read+0x25a>
 80014fa:	f000 fb47 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80014fe:	4816      	ldr	r0, [pc, #88]	; (8001558 <CS_read+0x2b4>)
 8001500:	f001 fcd2 	bl	8002ea8 <HAL_ADC_Stop_IT>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <CS_read+0x26a>
 800150a:	f000 fb3f 	bl	8001b8c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b1f      	cmp	r3, #31
 8001518:	ddb5      	ble.n	8001486 <CS_read+0x1e2>
			}
			break;
 800151a:	e076      	b.n	800160a <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <CS_read+0x2a8>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <CS_read+0x2a8>)
 8001524:	2201      	movs	r2, #1
 8001526:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <CS_read+0x2a8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <CS_read+0x2ac>)
 8001532:	f003 f935 	bl	80047a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <CS_read+0x2a8>)
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	461a      	mov	r2, r3
 800153c:	2120      	movs	r1, #32
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <CS_read+0x2ac>)
 8001540:	f003 f92e 	bl	80047a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	e05b      	b.n	8001602 <CS_read+0x35e>
 800154a:	bf00      	nop
 800154c:	200006fc 	.word	0x200006fc
 8001550:	48000400 	.word	0x48000400
 8001554:	2000007c 	.word	0x2000007c
 8001558:	200000e8 	.word	0x200000e8
 800155c:	200004bc 	.word	0x200004bc
 8001560:	200005bc 	.word	0x200005bc
 8001564:	200004fc 	.word	0x200004fc
 8001568:	200005fc 	.word	0x200005fc
 800156c:	2000053c 	.word	0x2000053c
 8001570:	2000063c 	.word	0x2000063c
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <CS_read+0x380>)
 8001576:	f001 fb67 	bl	8002c48 <HAL_ADC_Start_IT>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <CS_read+0x2e0>
 8001580:	f000 fb04 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <CS_read+0x384>)
 8001586:	f001 fb5f 	bl	8002c48 <HAL_ADC_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <CS_read+0x2f0>
 8001590:	f000 fafc 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8001594:	210a      	movs	r1, #10
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <CS_read+0x380>)
 8001598:	f001 fa7e 	bl	8002a98 <HAL_ADC_PollForConversion>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <CS_read+0x302>
 80015a2:	f000 faf3 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 80015a6:	210a      	movs	r1, #10
 80015a8:	481f      	ldr	r0, [pc, #124]	; (8001628 <CS_read+0x384>)
 80015aa:	f001 fa75 	bl	8002a98 <HAL_ADC_PollForConversion>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <CS_read+0x314>
 80015b4:	f000 faea 	bl	8001b8c <Error_Handler>
				IN4_1_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc1);
 80015b8:	481a      	ldr	r0, [pc, #104]	; (8001624 <CS_read+0x380>)
 80015ba:	f001 fcb0 	bl	8002f1e <HAL_ADC_GetValue>
 80015be:	4603      	mov	r3, r0
 80015c0:	b299      	uxth	r1, r3
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <CS_read+0x388>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t*)HAL_ADC_GetValue(&hadc2);
 80015ca:	4817      	ldr	r0, [pc, #92]	; (8001628 <CS_read+0x384>)
 80015cc:	f001 fca7 	bl	8002f1e <HAL_ADC_GetValue>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b299      	uxth	r1, r3
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <CS_read+0x38c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <CS_read+0x380>)
 80015de:	f001 fc63 	bl	8002ea8 <HAL_ADC_Stop_IT>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <CS_read+0x348>
 80015e8:	f000 fad0 	bl	8001b8c <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 80015ec:	480e      	ldr	r0, [pc, #56]	; (8001628 <CS_read+0x384>)
 80015ee:	f001 fc5b 	bl	8002ea8 <HAL_ADC_Stop_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <CS_read+0x358>
 80015f8:	f000 fac8 	bl	8001b8c <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b1f      	cmp	r3, #31
 8001606:	ddb5      	ble.n	8001574 <CS_read+0x2d0>
			}
			break;
 8001608:	bf00      	nop
	for(int x = 0; x < 4; x++){
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b03      	cmp	r3, #3
 8001614:	f77f ae4c 	ble.w	80012b0 <CS_read+0xc>
			print_out(0,"S1: ",data_output_switch);
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000007c 	.word	0x2000007c
 8001628:	200000e8 	.word	0x200000e8
 800162c:	2000057c 	.word	0x2000057c
 8001630:	2000067c 	.word	0x2000067c

08001634 <CS_process>:

void CS_process(){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
	for(int i = 0; i < I_AVERAGE; i++){
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	e072      	b.n	8001726 <CS_process+0xf2>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8001640:	4b3e      	ldr	r3, [pc, #248]	; (800173c <CS_process+0x108>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <CS_process+0x10c>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	440b      	add	r3, r1
 8001650:	0fda      	lsrs	r2, r3, #31
 8001652:	4413      	add	r3, r2
 8001654:	105b      	asrs	r3, r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <CS_process+0x108>)
 800165a:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <CS_process+0x110>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4a39      	ldr	r2, [pc, #228]	; (8001748 <CS_process+0x114>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166a:	440b      	add	r3, r1
 800166c:	0fda      	lsrs	r2, r3, #31
 800166e:	4413      	add	r3, r2
 8001670:	105b      	asrs	r3, r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <CS_process+0x110>)
 8001676:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <CS_process+0x118>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4a34      	ldr	r2, [pc, #208]	; (8001750 <CS_process+0x11c>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001686:	440b      	add	r3, r1
 8001688:	0fda      	lsrs	r2, r3, #31
 800168a:	4413      	add	r3, r2
 800168c:	105b      	asrs	r3, r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <CS_process+0x118>)
 8001692:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <CS_process+0x120>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <CS_process+0x124>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a2:	440b      	add	r3, r1
 80016a4:	0fda      	lsrs	r2, r3, #31
 80016a6:	4413      	add	r3, r2
 80016a8:	105b      	asrs	r3, r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b29      	ldr	r3, [pc, #164]	; (8001754 <CS_process+0x120>)
 80016ae:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <CS_process+0x128>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <CS_process+0x12c>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	440b      	add	r3, r1
 80016c0:	0fda      	lsrs	r2, r3, #31
 80016c2:	4413      	add	r3, r2
 80016c4:	105b      	asrs	r3, r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <CS_process+0x128>)
 80016ca:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <CS_process+0x130>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4a25      	ldr	r2, [pc, #148]	; (8001768 <CS_process+0x134>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016da:	440b      	add	r3, r1
 80016dc:	0fda      	lsrs	r2, r3, #31
 80016de:	4413      	add	r3, r2
 80016e0:	105b      	asrs	r3, r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <CS_process+0x130>)
 80016e6:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <CS_process+0x138>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4a20      	ldr	r2, [pc, #128]	; (8001770 <CS_process+0x13c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f6:	440b      	add	r3, r1
 80016f8:	0fda      	lsrs	r2, r3, #31
 80016fa:	4413      	add	r3, r2
 80016fc:	105b      	asrs	r3, r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <CS_process+0x138>)
 8001702:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <CS_process+0x140>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <CS_process+0x144>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001712:	440b      	add	r3, r1
 8001714:	0fda      	lsrs	r2, r3, #31
 8001716:	4413      	add	r3, r2
 8001718:	105b      	asrs	r3, r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <CS_process+0x140>)
 800171e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < I_AVERAGE; i++){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b1f      	cmp	r3, #31
 800172a:	dd89      	ble.n	8001640 <CS_process+0xc>
	}
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200006bc 	.word	0x200006bc
 8001740:	200004bc 	.word	0x200004bc
 8001744:	200006be 	.word	0x200006be
 8001748:	200004fc 	.word	0x200004fc
 800174c:	200006c0 	.word	0x200006c0
 8001750:	2000053c 	.word	0x2000053c
 8001754:	200006c2 	.word	0x200006c2
 8001758:	2000057c 	.word	0x2000057c
 800175c:	200006c4 	.word	0x200006c4
 8001760:	200005bc 	.word	0x200005bc
 8001764:	200006c6 	.word	0x200006c6
 8001768:	200005fc 	.word	0x200005fc
 800176c:	200006c8 	.word	0x200006c8
 8001770:	2000063c 	.word	0x2000063c
 8001774:	200006ca 	.word	0x200006ca
 8001778:	2000067c 	.word	0x2000067c

0800177c <check_warnings>:

void check_warnings(){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	if(IN1_1_PROC >= WC_1_1){
 8001780:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <check_warnings+0x22c>)
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	4b89      	ldr	r3, [pc, #548]	; (80019ac <check_warnings+0x230>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d31c      	bcc.n	80017c6 <check_warnings+0x4a>
		if(IN1_1_PROC >= OC_1_1){
 800178c:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <check_warnings+0x22c>)
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <check_warnings+0x234>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d30e      	bcc.n	80017b6 <check_warnings+0x3a>
			HAL_GPIO_WritePin(GPIOA,IN0_Pin,0);
 8001798:	2200      	movs	r2, #0
 800179a:	2108      	movs	r1, #8
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f002 fffe 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"1_OC",data_output_switch);
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <check_warnings+0x238>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4983      	ldr	r1, [pc, #524]	; (80019b8 <check_warnings+0x23c>)
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff fd24 	bl	80011fc <print_out>
 80017b4:	e007      	b.n	80017c6 <check_warnings+0x4a>
		}else{
			print_out(-1,"1_WC",data_output_switch);
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <check_warnings+0x238>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	497f      	ldr	r1, [pc, #508]	; (80019bc <check_warnings+0x240>)
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	f7ff fd1b 	bl	80011fc <print_out>
		}
	}
	if(IN1_1_PROC <= UC_1_1){
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <check_warnings+0x22c>)
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <check_warnings+0x244>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d807      	bhi.n	80017e2 <check_warnings+0x66>
		print_out(-1,"1_UC",data_output_switch);
 80017d2:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <check_warnings+0x238>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	497a      	ldr	r1, [pc, #488]	; (80019c4 <check_warnings+0x248>)
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	f7ff fd0d 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN2_1_PROC >= WC_2_1){
 80017e2:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <check_warnings+0x24c>)
 80017e4:	881a      	ldrh	r2, [r3, #0]
 80017e6:	4b79      	ldr	r3, [pc, #484]	; (80019cc <check_warnings+0x250>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d31d      	bcc.n	800182a <check_warnings+0xae>
		if(IN2_1_PROC >= OC_2_1){
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <check_warnings+0x24c>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <check_warnings+0x254>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d30f      	bcc.n	800181a <check_warnings+0x9e>
			HAL_GPIO_WritePin(GPIOA,IN1_Pin,0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f002 ffcc 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"2_OC",data_output_switch);
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <check_warnings+0x238>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4971      	ldr	r1, [pc, #452]	; (80019d4 <check_warnings+0x258>)
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff fcf2 	bl	80011fc <print_out>
 8001818:	e007      	b.n	800182a <check_warnings+0xae>
		}else{
			print_out(-1,"2_WC",data_output_switch);
 800181a:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <check_warnings+0x238>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	496d      	ldr	r1, [pc, #436]	; (80019d8 <check_warnings+0x25c>)
 8001822:	f04f 30ff 	mov.w	r0, #4294967295
 8001826:	f7ff fce9 	bl	80011fc <print_out>
		}
	}
	if(IN2_1_PROC <= UC_2_1){
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <check_warnings+0x24c>)
 800182c:	881a      	ldrh	r2, [r3, #0]
 800182e:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <check_warnings+0x260>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d807      	bhi.n	8001846 <check_warnings+0xca>
		print_out(-1,"2_UC",data_output_switch);
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <check_warnings+0x238>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4968      	ldr	r1, [pc, #416]	; (80019e0 <check_warnings+0x264>)
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f7ff fcdb 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN3_1_PROC >= WC_3_1){
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <check_warnings+0x268>)
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <check_warnings+0x26c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d31d      	bcc.n	800188e <check_warnings+0x112>
		if(IN3_1_PROC >= OC_3_1){
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <check_warnings+0x268>)
 8001854:	881a      	ldrh	r2, [r3, #0]
 8001856:	4b65      	ldr	r3, [pc, #404]	; (80019ec <check_warnings+0x270>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d30f      	bcc.n	800187e <check_warnings+0x102>
			HAL_GPIO_WritePin(GPIOA,IN2_Pin,0);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f002 ff9a 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"3_OC",data_output_switch);
 800186c:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <check_warnings+0x238>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	495f      	ldr	r1, [pc, #380]	; (80019f0 <check_warnings+0x274>)
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff fcc0 	bl	80011fc <print_out>
 800187c:	e007      	b.n	800188e <check_warnings+0x112>
		}else{
			print_out(-1,"3_WC",data_output_switch);
 800187e:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <check_warnings+0x238>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	495b      	ldr	r1, [pc, #364]	; (80019f4 <check_warnings+0x278>)
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	f7ff fcb7 	bl	80011fc <print_out>
		}
	}
	if(IN3_1_PROC <= UC_3_1){
 800188e:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <check_warnings+0x268>)
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <check_warnings+0x27c>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d807      	bhi.n	80018aa <check_warnings+0x12e>
		print_out(-1,"3_UC",data_output_switch);
 800189a:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <check_warnings+0x238>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4956      	ldr	r1, [pc, #344]	; (80019fc <check_warnings+0x280>)
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f7ff fca9 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN4_1_PROC >= WC_4_1){
 80018aa:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <check_warnings+0x284>)
 80018ac:	881a      	ldrh	r2, [r3, #0]
 80018ae:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <check_warnings+0x288>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d31d      	bcc.n	80018f2 <check_warnings+0x176>
		if(IN4_1_PROC >= OC_4_1){
 80018b6:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <check_warnings+0x284>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <check_warnings+0x28c>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d30f      	bcc.n	80018e2 <check_warnings+0x166>
			HAL_GPIO_WritePin(GPIOA,IN3_Pin,0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f002 ff68 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"4_OC",data_output_switch);
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <check_warnings+0x238>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	494d      	ldr	r1, [pc, #308]	; (8001a0c <check_warnings+0x290>)
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff fc8e 	bl	80011fc <print_out>
 80018e0:	e007      	b.n	80018f2 <check_warnings+0x176>
		}else{
			print_out(-1,"4_WC",data_output_switch);
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <check_warnings+0x238>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4949      	ldr	r1, [pc, #292]	; (8001a10 <check_warnings+0x294>)
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	f7ff fc85 	bl	80011fc <print_out>
		}
	}
	if(IN4_1_PROC <= UC_4_1){
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <check_warnings+0x284>)
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <check_warnings+0x298>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d807      	bhi.n	800190e <check_warnings+0x192>
		print_out(-1,"4_UC",data_output_switch);
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <check_warnings+0x238>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	4944      	ldr	r1, [pc, #272]	; (8001a18 <check_warnings+0x29c>)
 8001906:	f04f 30ff 	mov.w	r0, #4294967295
 800190a:	f7ff fc77 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN1_2_PROC >= WC_1_2){
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <check_warnings+0x2a0>)
 8001910:	881a      	ldrh	r2, [r3, #0]
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <check_warnings+0x2a4>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d31c      	bcc.n	8001954 <check_warnings+0x1d8>
		if(IN1_2_PROC >= OC_1_2){
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <check_warnings+0x2a0>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <check_warnings+0x2a8>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d30e      	bcc.n	8001944 <check_warnings+0x1c8>
			HAL_GPIO_WritePin(GPIOA,IN0_2_Pin,0);
 8001926:	2200      	movs	r2, #0
 8001928:	2110      	movs	r1, #16
 800192a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192e:	f002 ff37 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"5_OC",data_output_switch);
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <check_warnings+0x238>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	493b      	ldr	r1, [pc, #236]	; (8001a28 <check_warnings+0x2ac>)
 800193a:	f04f 30ff 	mov.w	r0, #4294967295
 800193e:	f7ff fc5d 	bl	80011fc <print_out>
 8001942:	e007      	b.n	8001954 <check_warnings+0x1d8>
		}else{
			print_out(-1,"5_WC",data_output_switch);
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <check_warnings+0x238>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4938      	ldr	r1, [pc, #224]	; (8001a2c <check_warnings+0x2b0>)
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff fc54 	bl	80011fc <print_out>
		}
	}
	if(IN1_2_PROC <= UC_1_2){
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <check_warnings+0x2a0>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <check_warnings+0x2b4>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d807      	bhi.n	8001970 <check_warnings+0x1f4>
		print_out(-1,"5_UC",data_output_switch);
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <check_warnings+0x238>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4933      	ldr	r1, [pc, #204]	; (8001a34 <check_warnings+0x2b8>)
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff fc46 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN2_2_PROC >= WC_2_2){
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <check_warnings+0x2bc>)
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <check_warnings+0x2c0>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d36d      	bcc.n	8001a58 <check_warnings+0x2dc>
		if(IN2_2_PROC >= OC_2_2){
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <check_warnings+0x2bc>)
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <check_warnings+0x2c4>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d35f      	bcc.n	8001a48 <check_warnings+0x2cc>
			HAL_GPIO_WritePin(GPIOA,IN1_2_Pin,0);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f002 ff05 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"6_OC",data_output_switch);
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <check_warnings+0x238>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4929      	ldr	r1, [pc, #164]	; (8001a44 <check_warnings+0x2c8>)
 800199e:	f04f 30ff 	mov.w	r0, #4294967295
 80019a2:	f7ff fc2b 	bl	80011fc <print_out>
 80019a6:	e057      	b.n	8001a58 <check_warnings+0x2dc>
 80019a8:	200006bc 	.word	0x200006bc
 80019ac:	200006cc 	.word	0x200006cc
 80019b0:	200006ce 	.word	0x200006ce
 80019b4:	20000000 	.word	0x20000000
 80019b8:	08007eb8 	.word	0x08007eb8
 80019bc:	08007ec0 	.word	0x08007ec0
 80019c0:	200006d0 	.word	0x200006d0
 80019c4:	08007ec8 	.word	0x08007ec8
 80019c8:	200006be 	.word	0x200006be
 80019cc:	200006d2 	.word	0x200006d2
 80019d0:	200006d4 	.word	0x200006d4
 80019d4:	08007ed0 	.word	0x08007ed0
 80019d8:	08007ed8 	.word	0x08007ed8
 80019dc:	200006d6 	.word	0x200006d6
 80019e0:	08007ee0 	.word	0x08007ee0
 80019e4:	200006c0 	.word	0x200006c0
 80019e8:	200006d8 	.word	0x200006d8
 80019ec:	200006da 	.word	0x200006da
 80019f0:	08007ee8 	.word	0x08007ee8
 80019f4:	08007ef0 	.word	0x08007ef0
 80019f8:	200006dc 	.word	0x200006dc
 80019fc:	08007ef8 	.word	0x08007ef8
 8001a00:	200006c2 	.word	0x200006c2
 8001a04:	200006de 	.word	0x200006de
 8001a08:	200006e0 	.word	0x200006e0
 8001a0c:	08007f00 	.word	0x08007f00
 8001a10:	08007f08 	.word	0x08007f08
 8001a14:	200006e2 	.word	0x200006e2
 8001a18:	08007f10 	.word	0x08007f10
 8001a1c:	200006c4 	.word	0x200006c4
 8001a20:	200006e4 	.word	0x200006e4
 8001a24:	200006e6 	.word	0x200006e6
 8001a28:	08007f18 	.word	0x08007f18
 8001a2c:	08007f20 	.word	0x08007f20
 8001a30:	200006e8 	.word	0x200006e8
 8001a34:	08007f28 	.word	0x08007f28
 8001a38:	200006c6 	.word	0x200006c6
 8001a3c:	200006ea 	.word	0x200006ea
 8001a40:	200006ec 	.word	0x200006ec
 8001a44:	08007f30 	.word	0x08007f30
		}else{
			print_out(-1,"6_WC",data_output_switch);
 8001a48:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <check_warnings+0x3c4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	493d      	ldr	r1, [pc, #244]	; (8001b44 <check_warnings+0x3c8>)
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff fbd2 	bl	80011fc <print_out>
		}
	}
	if(IN2_2_PROC <= UC_2_2){
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <check_warnings+0x3cc>)
 8001a5a:	881a      	ldrh	r2, [r3, #0]
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <check_warnings+0x3d0>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d807      	bhi.n	8001a74 <check_warnings+0x2f8>
		print_out(-1,"6_UC",data_output_switch);
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <check_warnings+0x3c4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4939      	ldr	r1, [pc, #228]	; (8001b50 <check_warnings+0x3d4>)
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f7ff fbc4 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN3_2_PROC >= WC_3_2){
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <check_warnings+0x3d8>)
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <check_warnings+0x3dc>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d31d      	bcc.n	8001abc <check_warnings+0x340>
		if(IN3_2_PROC >= OC_3_2){
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <check_warnings+0x3d8>)
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <check_warnings+0x3e0>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d30f      	bcc.n	8001aac <check_warnings+0x330>
			HAL_GPIO_WritePin(GPIOA,IN2_2_Pin,0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f002 fe83 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"7_OC",data_output_switch);
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <check_warnings+0x3c4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	492f      	ldr	r1, [pc, #188]	; (8001b60 <check_warnings+0x3e4>)
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	f7ff fba9 	bl	80011fc <print_out>
 8001aaa:	e007      	b.n	8001abc <check_warnings+0x340>
		}else{
			print_out(-1,"7_WC",data_output_switch);
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <check_warnings+0x3c4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	492c      	ldr	r1, [pc, #176]	; (8001b64 <check_warnings+0x3e8>)
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff fba0 	bl	80011fc <print_out>
		}
	}
	if(IN3_2_PROC <= UC_3_2){
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <check_warnings+0x3d8>)
 8001abe:	881a      	ldrh	r2, [r3, #0]
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <check_warnings+0x3ec>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d807      	bhi.n	8001ad8 <check_warnings+0x35c>
		print_out(-1,"7_UC",data_output_switch);
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <check_warnings+0x3c4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4927      	ldr	r1, [pc, #156]	; (8001b6c <check_warnings+0x3f0>)
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff fb92 	bl	80011fc <print_out>
	}
//------------------------------------------------------
	if(IN4_2_PROC >= WC_4_2){
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <check_warnings+0x3f4>)
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <check_warnings+0x3f8>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d31c      	bcc.n	8001b1e <check_warnings+0x3a2>
		if(IN4_2_PROC >= OC_4_2){
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <check_warnings+0x3f4>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <check_warnings+0x3fc>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d30e      	bcc.n	8001b0e <check_warnings+0x392>
			HAL_GPIO_WritePin(GPIOA,IN3_2_Pin,0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2110      	movs	r1, #16
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f002 fe52 	bl	80047a0 <HAL_GPIO_WritePin>
			print_out(-1,"8_OC",data_output_switch);
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <check_warnings+0x3c4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	491e      	ldr	r1, [pc, #120]	; (8001b7c <check_warnings+0x400>)
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff fb78 	bl	80011fc <print_out>
 8001b0c:	e007      	b.n	8001b1e <check_warnings+0x3a2>
		}else{
			print_out(-1,"8_WC",data_output_switch);
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <check_warnings+0x3c4>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	491a      	ldr	r1, [pc, #104]	; (8001b80 <check_warnings+0x404>)
 8001b16:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1a:	f7ff fb6f 	bl	80011fc <print_out>
		}
	}
	if(IN4_2_PROC <= UC_4_2){
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <check_warnings+0x3f4>)
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <check_warnings+0x408>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d807      	bhi.n	8001b3a <check_warnings+0x3be>
		print_out(-1,"8_UC",data_output_switch);
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <check_warnings+0x3c4>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4915      	ldr	r1, [pc, #84]	; (8001b88 <check_warnings+0x40c>)
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f7ff fb61 	bl	80011fc <print_out>
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000
 8001b44:	08007f38 	.word	0x08007f38
 8001b48:	200006c6 	.word	0x200006c6
 8001b4c:	200006ee 	.word	0x200006ee
 8001b50:	08007f40 	.word	0x08007f40
 8001b54:	200006c8 	.word	0x200006c8
 8001b58:	200006f0 	.word	0x200006f0
 8001b5c:	200006f2 	.word	0x200006f2
 8001b60:	08007f48 	.word	0x08007f48
 8001b64:	08007f50 	.word	0x08007f50
 8001b68:	200006f4 	.word	0x200006f4
 8001b6c:	08007f58 	.word	0x08007f58
 8001b70:	200006ca 	.word	0x200006ca
 8001b74:	200006f6 	.word	0x200006f6
 8001b78:	200006f8 	.word	0x200006f8
 8001b7c:	08007f60 	.word	0x08007f60
 8001b80:	08007f68 	.word	0x08007f68
 8001b84:	200006fa 	.word	0x200006fa
 8001b88:	08007f70 	.word	0x08007f70

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <Error_Handler+0x8>
	...

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bce:	f002 fea3 	bl	8004918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09c      	sub	sp, #112	; 0x70
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2244      	movs	r2, #68	; 0x44
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 fcbd 	bl	8007580 <memset>
  if(hadc->Instance==ADC1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d169      	bne.n	8001ce4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c1a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fbbd 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c2c:	f7ff ffae 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10b      	bne.n	8001c5a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c72:	2303      	movs	r3, #3
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f002 fc08 	bl	800449c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001c8e:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <HAL_ADC_MspInit+0x1a0>)
 8001c90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001c94:	2205      	movs	r2, #5
 8001c96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb2:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cc6:	482d      	ldr	r0, [pc, #180]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cc8:	f002 f87e 	bl	8003dc8 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001cd2:	f7ff ff5b 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_ADC_MspInit+0x19c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ce2:	e042      	b.n	8001d6a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <HAL_ADC_MspInit+0x1a4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d13d      	bne.n	8001d6a <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cf4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fb4e 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001d0a:	f7ff ff3f 	bl	8001b8c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001d16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_ADC_MspInit+0x194>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10b      	bne.n	8001d38 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_ADC_MspInit+0x198>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d54:	2303      	movs	r3, #3
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f002 fb99 	bl	800449c <HAL_GPIO_Init>
}
 8001d6a:	bf00      	nop
 8001d6c:	3770      	adds	r7, #112	; 0x70
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000710 	.word	0x20000710
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	20000154 	.word	0x20000154
 8001d80:	4002001c 	.word	0x4002001c
 8001d84:	50000100 	.word	0x50000100

08001d88 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09a      	sub	sp, #104	; 0x68
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	2244      	movs	r2, #68	; 0x44
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 fbe9 	bl	8007580 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_FDCAN_MspInit+0xac>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d139      	bne.n	8001e2c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fae9 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001dd4:	f7ff feda 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de2:	6593      	str	r3, [r2, #88]	; 0x58
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_FDCAN_MspInit+0xb0>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e0c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e1a:	2309      	movs	r3, #9
 8001e1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e28:	f002 fb38 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3768      	adds	r7, #104	; 0x68
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40006400 	.word	0x40006400
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a40      	ldr	r2, [pc, #256]	; (8001f4c <HAL_TIM_Base_MspInit+0x110>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10c      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e58:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001e66:	e06a      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d10c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a36      	ldr	r2, [pc, #216]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8a:	e058      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a30      	ldr	r2, [pc, #192]	; (8001f54 <HAL_TIM_Base_MspInit+0x118>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10c      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
}
 8001eae:	e046      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_TIM_Base_MspInit+0x11c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	e034      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <HAL_TIM_Base_MspInit+0x120>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10c      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
}
 8001ef6:	e022      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_TIM_Base_MspInit+0x124>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10c      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
}
 8001f1a:	e010      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM16)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_TIM_Base_MspInit+0x128>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10b      	bne.n	8001f3e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	6613      	str	r3, [r2, #96]	; 0x60
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_TIM_Base_MspInit+0x114>)
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	bf00      	nop
 8001f40:	372c      	adds	r7, #44	; 0x2c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40001000 	.word	0x40001000
 8001f60:	40001400 	.word	0x40001400
 8001f64:	40014400 	.word	0x40014400

08001f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b09a      	sub	sp, #104	; 0x68
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2244      	movs	r2, #68	; 0x44
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 faf9 	bl	8007580 <memset>
  if(huart->Instance==USART2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_UART_MspInit+0xa8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d136      	bne.n	8002006 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 f9fb 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fb0:	f7ff fdec 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	4a16      	ldr	r2, [pc, #88]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_UART_MspInit+0xac>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f002 fa4b 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3768      	adds	r7, #104	; 0x68
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004400 	.word	0x40004400
 8002014:	40021000 	.word	0x40021000

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800201c:	e7fe      	b.n	800201c <NMI_Handler+0x4>

0800201e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <MemManage_Handler+0x4>

0800202a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <UsageFault_Handler+0x4>

08002036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 f8d0 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <DMA1_Channel2_IRQHandler+0x10>)
 8002072:	f001 ff51 	bl	8003f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000154 	.word	0x20000154

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f005 fa6e 	bl	8007590 <__errno>
 80020b4:	4603      	mov	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20008000 	.word	0x20008000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	20000714 	.word	0x20000714
 80020e8:	20000868 	.word	0x20000868

080020ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <SystemInit+0x20>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <SystemInit+0x20>)
 80020f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <LoopForever+0x6>)
  ldr r1, =_edata
 8002116:	490e      	ldr	r1, [pc, #56]	; (8002150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <LoopForever+0xe>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800212c:	4c0b      	ldr	r4, [pc, #44]	; (800215c <LoopForever+0x16>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800213a:	f7ff ffd7 	bl	80020ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f005 fa2d 	bl	800759c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002142:	f7fe fafd 	bl	8000740 <main>

08002146 <LoopForever>:

LoopForever:
    b LoopForever
 8002146:	e7fe      	b.n	8002146 <LoopForever>
  ldr   r0, =_estack
 8002148:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002154:	08007ffc 	.word	0x08007ffc
  ldr r2, =_sbss
 8002158:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800215c:	20000864 	.word	0x20000864

08002160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC1_2_IRQHandler>

08002162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f001 fdeb 	bl	8003d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002172:	200f      	movs	r0, #15
 8002174:	f000 f80e 	bl	8002194 <HAL_InitTick>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	e001      	b.n	8002188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002184:	f7ff fd08 	bl	8001b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002188:	79fb      	ldrb	r3, [r7, #7]

}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_InitTick+0x68>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d022      	beq.n	80021ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_InitTick+0x6c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_InitTick+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fdf6 	bl	8003dae <HAL_SYSTICK_Config>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	d809      	bhi.n	80021e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ce:	2200      	movs	r2, #0
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295
 80021d6:	f001 fdc2 	bl	8003d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_InitTick+0x70>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e004      	b.n	80021f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e001      	b.n	80021f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	20000004 	.word	0x20000004
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_IncTick+0x1c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_IncTick+0x20>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4413      	add	r3, r2
 8002216:	4a03      	ldr	r2, [pc, #12]	; (8002224 <HAL_IncTick+0x1c>)
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	20000718 	.word	0x20000718
 8002228:	2000000c 	.word	0x2000000c

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000718 	.word	0x20000718

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d004      	beq.n	8002268 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_Delay+0x40>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002268:	bf00      	nop
 800226a:	f7ff ffdf 	bl	800222c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d8f7      	bhi.n	800226a <HAL_Delay+0x26>
  {
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000000c 	.word	0x2000000c

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	431a      	orrs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002452:	b480      	push	{r7}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3330      	adds	r3, #48	; 0x30
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	4413      	add	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	211f      	movs	r1, #31
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 011f 	and.w	r1, r3, #31
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3314      	adds	r3, #20
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	0d1b      	lsrs	r3, r3, #20
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2107      	movs	r1, #7
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	401a      	ands	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	0d1b      	lsrs	r3, r3, #20
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d10a      	bne.n	800252a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002528:	e00a      	b.n	8002540 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	407f0000 	.word	0x407f0000

08002550 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 031f 	and.w	r3, r3, #31
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6093      	str	r3, [r2, #8]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800265c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002660:	f043 0202 	orr.w	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <LL_ADC_IsEnabled+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_IsEnabled+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_IsDisableOngoing+0x18>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_IsDisableOngoing+0x1a>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d101      	bne.n	8002728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002746:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d101      	bne.n	8002776 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e177      	b.n	8002a8e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fa17 	bl	8001be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fef1 	bl	80025ac <LL_ADC_IsDeepPowerDownEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fed7 	bl	8002588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff0c 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fef0 	bl	80025d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <HAL_ADC_Init+0x2e4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	4a9c      	ldr	r2, [pc, #624]	; (8002a6c <HAL_ADC_Init+0x2e8>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff feee 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff62 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 800284c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8110 	bne.w	8002a7c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 810c 	bne.w	8002a7c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fefb 	bl	8002674 <LL_ADC_IsEnabled>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002884:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002888:	f7ff fef4 	bl	8002674 <LL_ADC_IsEnabled>
 800288c:	4604      	mov	r4, r0
 800288e:	4878      	ldr	r0, [pc, #480]	; (8002a70 <HAL_ADC_Init+0x2ec>)
 8002890:	f7ff fef0 	bl	8002674 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	4323      	orrs	r3, r4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4874      	ldr	r0, [pc, #464]	; (8002a74 <HAL_ADC_Init+0x2f0>)
 80028a4:	f7ff fcf0 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7f5b      	ldrb	r3, [r3, #29]
 80028ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d106      	bne.n	80028e4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	045b      	lsls	r3, r3, #17
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_ADC_Init+0x2f4>)
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	430b      	orrs	r3, r1
 8002912:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff feee 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002934:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff0f 	bl	800275e <LL_ADC_INJ_IsConversionOngoing>
 8002940:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d16d      	bne.n	8002a24 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d16a      	bne.n	8002a24 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002952:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800295a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800296a:	f023 0302 	bic.w	r3, r3, #2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	430b      	orrs	r3, r1
 8002976:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800298e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002998:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800299c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6911      	ldr	r1, [r2, #16]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80029ae:	e013      	b.n	80029d8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d118      	bne.n	8002a14 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a04:	430a      	orrs	r2, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	e007      	b.n	8002a24 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f023 010f 	bic.w	r1, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
 8002a44:	e007      	b.n	8002a56 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020f 	bic.w	r2, r2, #15
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a66:	e011      	b.n	8002a8c <HAL_ADC_Init+0x308>
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	053e2d63 	.word	0x053e2d63
 8002a70:	50000100 	.word	0x50000100
 8002a74:	50000300 	.word	0x50000300
 8002a78:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	f043 0210 	orr.w	r2, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop

08002a98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa2:	4867      	ldr	r0, [pc, #412]	; (8002c40 <HAL_ADC_PollForConversion+0x1a8>)
 8002aa4:	f7ff fd54 	bl	8002550 <LL_ADC_GetMultimode>
 8002aa8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e02a      	b.n	8002b0e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d002      	beq.n	8002aca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0a6      	b.n	8002c36 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ae8:	2304      	movs	r3, #4
 8002aea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002aec:	e00f      	b.n	8002b0e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002aee:	4854      	ldr	r0, [pc, #336]	; (8002c40 <HAL_ADC_PollForConversion+0x1a8>)
 8002af0:	f7ff fd3c 	bl	800256c <LL_ADC_GetMultiDMATransfer>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e095      	b.n	8002c36 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b0e:	f7ff fb8d 	bl	800222c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b14:	e021      	b.n	8002b5a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d01d      	beq.n	8002b5a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b1e:	f7ff fb85 	bl	800222c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <HAL_ADC_PollForConversion+0x9c>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d112      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e06d      	b.n	8002c36 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0d6      	beq.n	8002b16 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fc57 	bl	800242c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01c      	beq.n	8002bbe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7f5b      	ldrb	r3, [r3, #29]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d118      	bne.n	8002bbe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d111      	bne.n	8002bbe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_ADC_PollForConversion+0x1ac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d002      	beq.n	8002bce <HAL_ADC_PollForConversion+0x136>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e001      	b.n	8002bd2 <HAL_ADC_PollForConversion+0x13a>
 8002bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d008      	beq.n	8002bec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d002      	beq.n	8002bec <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d104      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e00d      	b.n	8002c12 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_ADC_PollForConversion+0x1ac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d002      	beq.n	8002c06 <HAL_ADC_PollForConversion+0x16e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e001      	b.n	8002c0a <HAL_ADC_PollForConversion+0x172>
 8002c06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e008      	b.n	8002c34 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	220c      	movs	r2, #12
 8002c32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	50000300 	.word	0x50000300
 8002c44:	50000100 	.word	0x50000100

08002c48 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c50:	4893      	ldr	r0, [pc, #588]	; (8002ea0 <HAL_ADC_Start_IT+0x258>)
 8002c52:	f7ff fc7d 	bl	8002550 <LL_ADC_GetMultimode>
 8002c56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fd57 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 8113 	bne.w	8002e90 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_Start_IT+0x30>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e10e      	b.n	8002e96 <HAL_ADC_Start_IT+0x24e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fe05 	bl	8003890 <ADC_Enable>
 8002c86:	4603      	mov	r3, r0
 8002c88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 80fa 	bne.w	8002e86 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_ADC_Start_IT+0x25c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d002      	beq.n	8002cb6 <HAL_ADC_Start_IT+0x6e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	e001      	b.n	8002cba <HAL_ADC_Start_IT+0x72>
 8002cb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d002      	beq.n	8002cc8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	f023 0206 	bic.w	r2, r3, #6
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60
 8002cec:	e002      	b.n	8002cf4 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	221c      	movs	r2, #28
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 021c 	bic.w	r2, r2, #28
 8002d12:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d108      	bne.n	8002d2e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	605a      	str	r2, [r3, #4]
          break;
 8002d2c:	e008      	b.n	8002d40 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0204 	orr.w	r2, r2, #4
 8002d3c:	605a      	str	r2, [r3, #4]
          break;
 8002d3e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0210 	orr.w	r2, r2, #16
 8002d56:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_ADC_Start_IT+0x25c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d002      	beq.n	8002d68 <HAL_ADC_Start_IT+0x120>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	e001      	b.n	8002d6c <HAL_ADC_Start_IT+0x124>
 8002d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d008      	beq.n	8002d86 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d002      	beq.n	8002d86 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b09      	cmp	r3, #9
 8002d84:	d13a      	bne.n	8002dfc <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02d      	beq.n	8002df0 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d110      	bne.n	8002dce <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0220 	bic.w	r2, r2, #32
 8002dba:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dca:	605a      	str	r2, [r3, #4]
              break;
 8002dcc:	e010      	b.n	8002df0 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ddc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	605a      	str	r2, [r3, #4]
              break;
 8002dee:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fc63 	bl	80026c0 <LL_ADC_REG_StartConversion>
 8002dfa:	e04b      	b.n	8002e94 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_ADC_Start_IT+0x25c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d002      	beq.n	8002e18 <HAL_ADC_Start_IT+0x1d0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e001      	b.n	8002e1c <HAL_ADC_Start_IT+0x1d4>
 8002e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d034      	beq.n	8002e94 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d110      	bne.n	8002e64 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0220 	bic.w	r2, r2, #32
 8002e50:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e60:	605a      	str	r2, [r3, #4]
              break;
 8002e62:	e017      	b.n	8002e94 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e72:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	605a      	str	r2, [r3, #4]
              break;
 8002e84:	e006      	b.n	8002e94 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e8e:	e001      	b.n	8002e94 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
 8002e92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	50000300 	.word	0x50000300
 8002ea4:	50000100 	.word	0x50000100

08002ea8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Stop_IT+0x16>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e02b      	b.n	8002f16 <HAL_ADC_Stop_IT+0x6e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fc25 	bl	8003718 <ADC_ConversionStop>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d119      	bne.n	8002f0c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 021c 	bic.w	r2, r2, #28
 8002ee6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fd33 	bl	8003954 <ADC_Disable>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0b6      	sub	sp, #216	; 0xd8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x22>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e3c8      	b.n	80036ec <HAL_ADC_ConfigChannel+0x7b4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fbd2 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 83ad 	bne.w	80036ce <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f7ff fa66 	bl	8002452 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fbc0 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fbe0 	bl	800275e <LL_ADC_INJ_IsConversionOngoing>
 8002f9e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 81d9 	bne.w	800335e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 81d4 	bne.w	800335e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f7ff fa6d 	bl	80024aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fa14 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fde:	e00e      	b.n	8002ffe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f7ff fa5c 	bl	80024aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fa04 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d022      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6919      	ldr	r1, [r3, #16]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003030:	f7ff f95e 	bl	80022f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	461a      	mov	r2, r3
 8003042:	f7ff f9aa 	bl	800239a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6919      	ldr	r1, [r3, #16]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	7f1b      	ldrb	r3, [r3, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_ADC_ConfigChannel+0x124>
 8003056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x126>
 800305c:	2300      	movs	r3, #0
 800305e:	461a      	mov	r2, r3
 8003060:	f7ff f9b6 	bl	80023d0 <LL_ADC_SetOffsetSaturation>
 8003064:	e17b      	b.n	800335e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f963 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x15a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f958 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	e01e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x198>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff f94d 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800309e:	4603      	mov	r3, r0
 80030a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e004      	b.n	80030ce <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80030c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1b0>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	e018      	b.n	800311a <HAL_ADC_ConfigChannel+0x1e2>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e004      	b.n	800311a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003110:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800311a:	429a      	cmp	r2, r3
 800311c:	d106      	bne.n	800312c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f91c 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f900 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x220>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f8f5 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	f003 021f 	and.w	r2, r3, #31
 8003156:	e01e      	b.n	8003196 <HAL_ADC_ConfigChannel+0x25e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f8ea 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003164:	4603      	mov	r3, r0
 8003166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800317a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800317e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e004      	b.n	8003194 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800318a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x276>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	e018      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x2a8>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e004      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80031d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f8b9 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f89d 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_ADC_ConfigChannel+0x2e6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f892 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	e01e      	b.n	800325c <HAL_ADC_ConfigChannel+0x324>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f887 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800323c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e004      	b.n	800325a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x33c>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	e016      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x36a>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800328c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e004      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d106      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff f858 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2103      	movs	r1, #3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f83c 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x3a8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2103      	movs	r1, #3
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f831 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	f003 021f 	and.w	r2, r3, #31
 80032de:	e017      	b.n	8003310 <HAL_ADC_ConfigChannel+0x3d8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2103      	movs	r1, #3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f826 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e003      	b.n	800330e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x3f0>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	e011      	b.n	800334c <HAL_ADC_ConfigChannel+0x414>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003338:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800334c:	429a      	cmp	r2, r3
 800334e:	d106      	bne.n	800335e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	2103      	movs	r1, #3
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f803 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f986 	bl	8002674 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 8140 	bne.w	80035f0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	461a      	mov	r2, r3
 800337e:	f7ff f8bf 	bl	8002500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a8f      	ldr	r2, [pc, #572]	; (80035c4 <HAL_ADC_ConfigChannel+0x68c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	f040 8131 	bne.w	80035f0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x47e>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2b09      	cmp	r3, #9
 80033ac:	bf94      	ite	ls
 80033ae:	2301      	movls	r3, #1
 80033b0:	2300      	movhi	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e019      	b.n	80033ea <HAL_ADC_ConfigChannel+0x4b2>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e003      	b.n	80033da <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80033d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	bf94      	ite	ls
 80033e4:	2301      	movls	r3, #1
 80033e6:	2300      	movhi	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d079      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_ADC_ConfigChannel+0x4d2>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	3301      	adds	r3, #1
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003408:	e015      	b.n	8003436 <HAL_ADC_ConfigChannel+0x4fe>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3301      	adds	r3, #1
 8003430:	069b      	lsls	r3, r3, #26
 8003432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x51e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	e017      	b.n	8003486 <HAL_ADC_ConfigChannel+0x54e>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	ea42 0103 	orr.w	r1, r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x574>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	051b      	lsls	r3, r3, #20
 80034aa:	e018      	b.n	80034de <HAL_ADC_ConfigChannel+0x5a6>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f003 021f 	and.w	r2, r3, #31
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034de:	430b      	orrs	r3, r1
 80034e0:	e081      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x5c6>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	3301      	adds	r3, #1
 80034f6:	069b      	lsls	r3, r3, #26
 80034f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fc:	e015      	b.n	800352a <HAL_ADC_ConfigChannel+0x5f2>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	069b      	lsls	r3, r3, #26
 8003526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_ADC_ConfigChannel+0x612>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0e9b      	lsrs	r3, r3, #26
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	e017      	b.n	800357a <HAL_ADC_ConfigChannel+0x642>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	61fb      	str	r3, [r7, #28]
  return result;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003562:	2320      	movs	r3, #32
 8003564:	e003      	b.n	800356e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	ea42 0103 	orr.w	r1, r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x66e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0e9b      	lsrs	r3, r3, #26
 8003590:	3301      	adds	r3, #1
 8003592:	f003 021f 	and.w	r2, r3, #31
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	3b1e      	subs	r3, #30
 800359e:	051b      	lsls	r3, r3, #20
 80035a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a4:	e01e      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x6ac>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	613b      	str	r3, [r7, #16]
  return result;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e006      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x698>
 80035c2:	bf00      	nop
 80035c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 021f 	and.w	r2, r3, #31
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	3b1e      	subs	r3, #30
 80035de:	051b      	lsls	r3, r3, #20
 80035e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e4:	430b      	orrs	r3, r1
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fe ff5d 	bl	80024aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b3f      	ldr	r3, [pc, #252]	; (80036f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d071      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035fc:	483e      	ldr	r0, [pc, #248]	; (80036f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80035fe:	f7fe fe69 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8003602:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_ADC_ConfigChannel+0x7c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_ADC_ConfigChannel+0x6e2>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <HAL_ADC_ConfigChannel+0x7c8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d127      	bne.n	800366a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800361a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d121      	bne.n	800366a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362e:	d157      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003638:	4619      	mov	r1, r3
 800363a:	482f      	ldr	r0, [pc, #188]	; (80036f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800363c:	f7fe fe37 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003640:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_ADC_ConfigChannel+0x7cc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	4a30      	ldr	r2, [pc, #192]	; (8003708 <HAL_ADC_ConfigChannel+0x7d0>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003668:	e03a      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_ADC_ConfigChannel+0x7d4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d113      	bne.n	800369c <HAL_ADC_ConfigChannel+0x764>
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_ADC_ConfigChannel+0x7d8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02a      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800368a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	4619      	mov	r1, r3
 8003694:	4818      	ldr	r0, [pc, #96]	; (80036f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003696:	f7fe fe0a 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800369a:	e021      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_ADC_ConfigChannel+0x7dc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d11c      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a16      	ldr	r2, [pc, #88]	; (8003710 <HAL_ADC_ConfigChannel+0x7d8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d011      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036c4:	4619      	mov	r1, r3
 80036c6:	480c      	ldr	r0, [pc, #48]	; (80036f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80036c8:	f7fe fdf1 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 80036cc:	e008      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	37d8      	adds	r7, #216	; 0xd8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	80080000 	.word	0x80080000
 80036f8:	50000300 	.word	0x50000300
 80036fc:	c3210000 	.word	0xc3210000
 8003700:	90c00010 	.word	0x90c00010
 8003704:	20000004 	.word	0x20000004
 8003708:	053e2d63 	.word	0x053e2d63
 800370c:	c7520000 	.word	0xc7520000
 8003710:	50000100 	.word	0x50000100
 8003714:	cb840000 	.word	0xcb840000

08003718 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ffee 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8003734:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f80f 	bl	800275e <LL_ADC_INJ_IsConversionOngoing>
 8003740:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8098 	beq.w	8003880 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d02a      	beq.n	80037b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7f5b      	ldrb	r3, [r3, #29]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d126      	bne.n	80037b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7f1b      	ldrb	r3, [r3, #28]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d122      	bne.n	80037b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003772:	e014      	b.n	800379e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4a45      	ldr	r2, [pc, #276]	; (800388c <ADC_ConversionStop+0x174>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d90d      	bls.n	8003798 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e074      	b.n	8003882 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d1e3      	bne.n	8003774 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d014      	beq.n	80037e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe ffa6 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe ff63 	bl	800269a <LL_ADC_IsDisableOngoing>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ff82 	bl	80026e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d014      	beq.n	8003814 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe ffb5 	bl	800275e <LL_ADC_INJ_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe ff4b 	bl	800269a <LL_ADC_IsDisableOngoing>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe ff91 	bl	8002736 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d005      	beq.n	8003826 <ADC_ConversionStop+0x10e>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d105      	bne.n	800382c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003820:	230c      	movs	r3, #12
 8003822:	617b      	str	r3, [r7, #20]
        break;
 8003824:	e005      	b.n	8003832 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003826:	2308      	movs	r3, #8
 8003828:	617b      	str	r3, [r7, #20]
        break;
 800382a:	e002      	b.n	8003832 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800382c:	2304      	movs	r3, #4
 800382e:	617b      	str	r3, [r7, #20]
        break;
 8003830:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003832:	f7fe fcfb 	bl	800222c <HAL_GetTick>
 8003836:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003838:	e01b      	b.n	8003872 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800383a:	f7fe fcf7 	bl	800222c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b05      	cmp	r3, #5
 8003846:	d914      	bls.n	8003872 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1dc      	bne.n	800383a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	a33fffff 	.word	0xa33fffff

08003890 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fee9 	bl	8002674 <LL_ADC_IsEnabled>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d14d      	bne.n	8003944 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	4b28      	ldr	r3, [pc, #160]	; (8003950 <ADC_Enable+0xc0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	f043 0210 	orr.w	r2, r3, #16
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e039      	b.n	8003946 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fea4 	bl	8002624 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fca6 	bl	800222c <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e2:	e028      	b.n	8003936 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fec3 	bl	8002674 <LL_ADC_IsEnabled>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fe93 	bl	8002624 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038fe:	f7fe fc95 	bl	800222c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d914      	bls.n	8003936 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00d      	beq.n	8003936 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e007      	b.n	8003946 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d1cf      	bne.n	80038e4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	8000003f 	.word	0x8000003f

08003954 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fe9a 	bl	800269a <LL_ADC_IsDisableOngoing>
 8003966:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fe81 	bl	8002674 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d047      	beq.n	8003a08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d144      	bne.n	8003a08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030d 	and.w	r3, r3, #13
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10c      	bne.n	80039a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fe5b 	bl	800264c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2203      	movs	r2, #3
 800399c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800399e:	f7fe fc45 	bl	800222c <HAL_GetTick>
 80039a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a4:	e029      	b.n	80039fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e023      	b.n	8003a0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039c2:	f7fe fc33 	bl	800222c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d914      	bls.n	80039fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e007      	b.n	8003a0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1dc      	bne.n	80039c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <LL_ADC_IsEnabled>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <LL_ADC_IsEnabled+0x18>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <LL_ADC_IsEnabled+0x1a>
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b0a1      	sub	sp, #132	; 0x84
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e08b      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003a86:	2300      	movs	r3, #0
 8003a88:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d102      	bne.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a98:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	e001      	b.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e06a      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ffb8 	bl	8003a38 <LL_ADC_REG_IsConversionOngoing>
 8003ac8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ffb2 	bl	8003a38 <LL_ADC_REG_IsConversionOngoing>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d14c      	bne.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d149      	bne.n	8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ae0:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003ae2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d028      	beq.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003afe:	035b      	lsls	r3, r3, #13
 8003b00:	430b      	orrs	r3, r1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b0c:	f7ff ff81 	bl	8003a12 <LL_ADC_IsEnabled>
 8003b10:	4604      	mov	r4, r0
 8003b12:	4823      	ldr	r0, [pc, #140]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b14:	f7ff ff7d 	bl	8003a12 <LL_ADC_IsEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4323      	orrs	r3, r4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d133      	bne.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b28:	f023 030f 	bic.w	r3, r3, #15
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	6811      	ldr	r1, [r2, #0]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	6892      	ldr	r2, [r2, #8]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3c:	e024      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b4e:	f7ff ff60 	bl	8003a12 <LL_ADC_IsEnabled>
 8003b52:	4604      	mov	r4, r0
 8003b54:	4812      	ldr	r0, [pc, #72]	; (8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b56:	f7ff ff5c 	bl	8003a12 <LL_ADC_IsEnabled>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4323      	orrs	r3, r4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d112      	bne.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b6a:	f023 030f 	bic.w	r3, r3, #15
 8003b6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b72:	e009      	b.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b86:	e000      	b.n	8003b8a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3784      	adds	r7, #132	; 0x84
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	50000100 	.word	0x50000100
 8003ba4:	50000300 	.word	0x50000300

08003ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	60d3      	str	r3, [r2, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 0307 	and.w	r3, r3, #7
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	db0b      	blt.n	8003c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4907      	ldr	r1, [pc, #28]	; (8003c44 <__NVIC_EnableIRQ+0x38>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000e100 	.word	0xe000e100

08003c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db0a      	blt.n	8003c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	490c      	ldr	r1, [pc, #48]	; (8003c94 <__NVIC_SetPriority+0x4c>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c70:	e00a      	b.n	8003c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <__NVIC_SetPriority+0x50>)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3b04      	subs	r3, #4
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	440b      	add	r3, r1
 8003c86:	761a      	strb	r2, [r3, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1c3 0307 	rsb	r3, r3, #7
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf28      	it	cs
 8003cba:	2304      	movcs	r3, #4
 8003cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <NVIC_EncodePriority+0x30>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3b03      	subs	r3, #3
 8003cca:	e000      	b.n	8003cce <NVIC_EncodePriority+0x32>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	4313      	orrs	r3, r2
         );
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	; 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d14:	d301      	bcc.n	8003d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00f      	b.n	8003d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <SysTick_Config+0x40>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d22:	210f      	movs	r1, #15
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	f7ff ff8e 	bl	8003c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <SysTick_Config+0x40>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <SysTick_Config+0x40>)
 8003d34:	2207      	movs	r2, #7
 8003d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	e000e010 	.word	0xe000e010

08003d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff29 	bl	8003ba8 <__NVIC_SetPriorityGrouping>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d6c:	f7ff ff40 	bl	8003bf0 <__NVIC_GetPriorityGrouping>
 8003d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	6978      	ldr	r0, [r7, #20]
 8003d78:	f7ff ff90 	bl	8003c9c <NVIC_EncodePriority>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff5f 	bl	8003c48 <__NVIC_SetPriority>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff33 	bl	8003c0c <__NVIC_EnableIRQ>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ffa4 	bl	8003d04 <SysTick_Config>
 8003dbc:	4603      	mov	r3, r0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08d      	b.n	8003ef6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_DMA_Init+0x138>)
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d80f      	bhi.n	8003e06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <HAL_DMA_Init+0x13c>)
 8003dee:	4413      	add	r3, r2
 8003df0:	4a45      	ldr	r2, [pc, #276]	; (8003f08 <HAL_DMA_Init+0x140>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	009a      	lsls	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_DMA_Init+0x144>)
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
 8003e04:	e00e      	b.n	8003e24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_DMA_Init+0x148>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a3d      	ldr	r2, [pc, #244]	; (8003f08 <HAL_DMA_Init+0x140>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	009a      	lsls	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <HAL_DMA_Init+0x14c>)
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8fe 	bl	8004078 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e84:	d102      	bne.n	8003e8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ea0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <HAL_DMA_Init+0x104>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d80c      	bhi.n	8003ecc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f91e 	bl	80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	e008      	b.n	8003ede <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40020407 	.word	0x40020407
 8003f04:	bffdfff8 	.word	0xbffdfff8
 8003f08:	cccccccd 	.word	0xcccccccd
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	bffdfbf8 	.word	0xbffdfbf8
 8003f14:	40020400 	.word	0x40020400

08003f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d026      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x7a>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d021      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2104      	movs	r1, #4
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d071      	beq.n	800406c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f90:	e06c      	b.n	800406c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d029      	beq.n	8004004 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020a 	bic.w	r2, r2, #10
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 021f 	and.w	r2, r3, #31
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d038      	beq.n	800406c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004002:	e033      	b.n	800406c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2208      	movs	r2, #8
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d02a      	beq.n	800406e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d025      	beq.n	800406e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 020e 	bic.w	r2, r2, #14
 8004030:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f003 021f 	and.w	r2, r3, #31
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f202 	lsl.w	r2, r1, r2
 8004044:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800406c:	bf00      	nop
 800406e:	bf00      	nop
}
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d802      	bhi.n	8004092 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e001      	b.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004094:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3b08      	subs	r3, #8
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	009a      	lsls	r2, r3, #2
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2201      	movs	r2, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40020407 	.word	0x40020407
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020820 	.word	0x40020820
 80040ec:	cccccccd 	.word	0xcccccccd
 80040f0:	40020880 	.word	0x40020880

080040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a08      	ldr	r2, [pc, #32]	; (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004116:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b01      	subs	r3, #1
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2201      	movs	r2, #1
 8004122:	409a      	lsls	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	1000823f 	.word	0x1000823f
 8004138:	40020940 	.word	0x40020940

0800413c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e147      	b.n	80043de <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fe10 	bl	8001d88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0210 	bic.w	r2, r2, #16
 8004176:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004178:	f7fe f858 	bl	800222c <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800417e:	e012      	b.n	80041a6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004180:	f7fe f854 	bl	800222c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b0a      	cmp	r3, #10
 800418c:	d90b      	bls.n	80041a6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e11b      	b.n	80043de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d0e5      	beq.n	8004180 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fe f832 	bl	800222c <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041ca:	e012      	b.n	80041f2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041cc:	f7fe f82e 	bl	800222c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b0a      	cmp	r3, #10
 80041d8:	d90b      	bls.n	80041f2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041de:	f043 0201 	orr.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0f5      	b.n	80043de <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0e5      	beq.n	80041cc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0202 	orr.w	r2, r2, #2
 800420e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a74      	ldr	r2, [pc, #464]	; (80043e8 <HAL_FDCAN_Init+0x2ac>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d103      	bne.n	8004222 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800421a:	4a74      	ldr	r2, [pc, #464]	; (80043ec <HAL_FDCAN_Init+0x2b0>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7c1b      	ldrb	r3, [r3, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d108      	bne.n	800423c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004238:	619a      	str	r2, [r3, #24]
 800423a:	e007      	b.n	800424c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7c5b      	ldrb	r3, [r3, #17]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004262:	619a      	str	r2, [r3, #24]
 8004264:	e007      	b.n	8004276 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004274:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7c9b      	ldrb	r3, [r3, #18]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d108      	bne.n	8004290 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800428c:	619a      	str	r2, [r3, #24]
 800428e:	e007      	b.n	80042a0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042c4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0210 	bic.w	r2, r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d108      	bne.n	80042f0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0204 	orr.w	r2, r2, #4
 80042ec:	619a      	str	r2, [r3, #24]
 80042ee:	e02c      	b.n	800434a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d028      	beq.n	800434a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d01c      	beq.n	800433a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0210 	orr.w	r2, r2, #16
 800431e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d110      	bne.n	800434a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0220 	orr.w	r2, r2, #32
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	e007      	b.n	800434a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0220 	orr.w	r2, r2, #32
 8004348:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	3b01      	subs	r3, #1
 8004350:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	3b01      	subs	r3, #1
 8004358:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800435a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004362:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	3b01      	subs	r3, #1
 800436c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004372:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004374:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437e:	d115      	bne.n	80043ac <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	3b01      	subs	r3, #1
 800438c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800438e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	3b01      	subs	r3, #1
 8004396:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004398:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	3b01      	subs	r3, #1
 80043a2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043a8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043aa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f814 	bl	80043f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40006400 	.word	0x40006400
 80043ec:	40006500 	.word	0x40006500

080043f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80043fa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	041a      	lsls	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004430:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	061a      	lsls	r2, r3, #24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e005      	b.n	800447e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3304      	adds	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3f3      	bcc.n	8004472 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	4000a400 	.word	0x4000a400

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044aa:	e15a      	b.n	8004762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 814c 	beq.w	800475c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d005      	beq.n	80044dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d130      	bne.n	800453e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004512:	2201      	movs	r2, #1
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0201 	and.w	r2, r3, #1
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d017      	beq.n	800457a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d123      	bne.n	80045ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	6939      	ldr	r1, [r7, #16]
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a6 	beq.w	800475c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004610:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_GPIO_Init+0x2e4>)
 8004612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004614:	4a5a      	ldr	r2, [pc, #360]	; (8004780 <HAL_GPIO_Init+0x2e4>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6613      	str	r3, [r2, #96]	; 0x60
 800461c:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_GPIO_Init+0x2e4>)
 800461e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004628:	4a56      	ldr	r2, [pc, #344]	; (8004784 <HAL_GPIO_Init+0x2e8>)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	3302      	adds	r3, #2
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	220f      	movs	r2, #15
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004652:	d01f      	beq.n	8004694 <HAL_GPIO_Init+0x1f8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a4c      	ldr	r2, [pc, #304]	; (8004788 <HAL_GPIO_Init+0x2ec>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d019      	beq.n	8004690 <HAL_GPIO_Init+0x1f4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a4b      	ldr	r2, [pc, #300]	; (800478c <HAL_GPIO_Init+0x2f0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_GPIO_Init+0x1f0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a4a      	ldr	r2, [pc, #296]	; (8004790 <HAL_GPIO_Init+0x2f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00d      	beq.n	8004688 <HAL_GPIO_Init+0x1ec>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_GPIO_Init+0x2f8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <HAL_GPIO_Init+0x1e8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_GPIO_Init+0x2fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_GPIO_Init+0x1e4>
 800467c:	2305      	movs	r3, #5
 800467e:	e00a      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004680:	2306      	movs	r3, #6
 8004682:	e008      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004684:	2304      	movs	r3, #4
 8004686:	e006      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004688:	2303      	movs	r3, #3
 800468a:	e004      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 800468c:	2302      	movs	r3, #2
 800468e:	e002      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_GPIO_Init+0x1fa>
 8004694:	2300      	movs	r3, #0
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	f002 0203 	and.w	r2, r2, #3
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	4093      	lsls	r3, r2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046a6:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_GPIO_Init+0x2e8>)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_GPIO_Init+0x300>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046d8:	4a30      	ldr	r2, [pc, #192]	; (800479c <HAL_GPIO_Init+0x300>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_GPIO_Init+0x300>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004702:	4a26      	ldr	r2, [pc, #152]	; (800479c <HAL_GPIO_Init+0x300>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_GPIO_Init+0x300>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_GPIO_Init+0x300>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004732:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_GPIO_Init+0x300>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004756:	4a11      	ldr	r2, [pc, #68]	; (800479c <HAL_GPIO_Init+0x300>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f ae9d 	bne.w	80044ac <HAL_GPIO_Init+0x10>
  }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40021000 	.word	0x40021000
 8004784:	40010000 	.word	0x40010000
 8004788:	48000400 	.word	0x48000400
 800478c:	48000800 	.word	0x48000800
 8004790:	48000c00 	.word	0x48000c00
 8004794:	48001000 	.word	0x48001000
 8004798:	48001400 	.word	0x48001400
 800479c:	40010400 	.word	0x40010400

080047a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047b0:	787b      	ldrb	r3, [r7, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047bc:	e002      	b.n	80047c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d141      	bne.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047de:	4b4b      	ldr	r3, [pc, #300]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d131      	bne.n	8004850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047ec:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f2:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047fc:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004804:	4a41      	ldr	r2, [pc, #260]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800480a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2232      	movs	r2, #50	; 0x32
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	0c9b      	lsrs	r3, r3, #18
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	e002      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b01      	subs	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	4b38      	ldr	r3, [pc, #224]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d102      	bne.n	800483e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f2      	bne.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800483e:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484a:	d158      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e057      	b.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004850:	4b2e      	ldr	r3, [pc, #184]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004860:	e04d      	b.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d141      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d131      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2232      	movs	r2, #50	; 0x32
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	e002      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d102      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f2      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d112      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e011      	b.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048ec:	e007      	b.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40007000 	.word	0x40007000
 8004910:	20000004 	.word	0x20000004
 8004914:	431bde83 	.word	0x431bde83

08004918 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004926:	6093      	str	r3, [r2, #8]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40007000 	.word	0x40007000

08004938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e306      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d075      	beq.n	8004a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4b97      	ldr	r3, [pc, #604]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4b94      	ldr	r3, [pc, #592]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x3e>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d002      	beq.n	800497c <HAL_RCC_OscConfig+0x44>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b8d      	ldr	r3, [pc, #564]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x108>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d157      	bne.n	8004a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2e1      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x74>
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e01d      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x98>
 80049b6:	4b7f      	ldr	r3, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7e      	ldr	r2, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b7c      	ldr	r3, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7b      	ldr	r2, [pc, #492]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049d0:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fc1c 	bl	800222c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fc18 	bl	800222c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e2a6      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0xc0>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fc08 	bl	800222c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fd fc04 	bl	800222c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e292      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	4b60      	ldr	r3, [pc, #384]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0xe8>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d075      	beq.n	8004b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4e:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a58:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d102      	bne.n	8004a6e <HAL_RCC_OscConfig+0x136>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_OscConfig+0x13c>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11f      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	4b4f      	ldr	r3, [pc, #316]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x154>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e265      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	4946      	ldr	r1, [pc, #280]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd fb75 	bl	8002194 <HAL_InitTick>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d043      	beq.n	8004b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e251      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d023      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fbb0 	bl	800222c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fbac 	bl	800222c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e23a      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae2:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	e01a      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fb8c 	bl	800222c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b18:	f7fd fb88 	bl	800222c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e216      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2a:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1e0>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d041      	beq.n	8004bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fb65 	bl	800222c <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b66:	f7fd fb61 	bl	800222c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1ef      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ef      	beq.n	8004b66 <HAL_RCC_OscConfig+0x22e>
 8004b86:	e020      	b.n	8004bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fd fb48 	bl	800222c <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9e:	e00d      	b.n	8004bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fb44 	bl	800222c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d906      	bls.n	8004bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e1d2      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bbc:	4b8c      	ldr	r3, [pc, #560]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ea      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a6 	beq.w	8004d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bdc:	4b84      	ldr	r3, [pc, #528]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_OscConfig+0x2b4>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x2b6>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a7e      	ldr	r2, [pc, #504]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfe:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0e:	4b79      	ldr	r3, [pc, #484]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d118      	bne.n	8004c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1a:	4b76      	ldr	r3, [pc, #472]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a75      	ldr	r2, [pc, #468]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c26:	f7fd fb01 	bl	800222c <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2e:	f7fd fafd 	bl	800222c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e18b      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	4b6c      	ldr	r3, [pc, #432]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_RCC_OscConfig+0x32e>
 8004c54:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a65      	ldr	r2, [pc, #404]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c64:	e024      	b.n	8004cb0 <HAL_RCC_OscConfig+0x378>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d110      	bne.n	8004c90 <HAL_RCC_OscConfig+0x358>
 8004c6e:	4b60      	ldr	r3, [pc, #384]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	4a5e      	ldr	r2, [pc, #376]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f043 0304 	orr.w	r3, r3, #4
 8004c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7e:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	4a5a      	ldr	r2, [pc, #360]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8e:	e00f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x378>
 8004c90:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	4a56      	ldr	r2, [pc, #344]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d016      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fab8 	bl	800222c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fd fab4 	bl	800222c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e140      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ed      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x388>
 8004ce4:	e015      	b.n	8004d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fd faa1 	bl	800222c <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fa9d 	bl	800222c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e129      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ed      	bne.n	8004cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d03c      	beq.n	8004daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01c      	beq.n	8004d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fd fa70 	bl	800222c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d50:	f7fd fa6c 	bl	800222c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0fa      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ef      	beq.n	8004d50 <HAL_RCC_OscConfig+0x418>
 8004d70:	e01b      	b.n	8004daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d72:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd fa53 	bl	800222c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d8a:	f7fd fa4f 	bl	800222c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0dd      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ef      	bne.n	8004d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80d1 	beq.w	8004f56 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	f000 808b 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d15e      	bne.n	8004e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fd fa29 	bl	800222c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ddc:	e00c      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fd fa25 	bl	800222c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d905      	bls.n	8004df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0b3      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ec      	bne.n	8004dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e04:	4b56      	ldr	r3, [pc, #344]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_RCC_OscConfig+0x62c>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6a11      	ldr	r1, [r2, #32]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e1e:	0212      	lsls	r2, r2, #8
 8004e20:	4311      	orrs	r1, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e26:	0852      	lsrs	r2, r2, #1
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0552      	lsls	r2, r2, #21
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e32:	0852      	lsrs	r2, r2, #1
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0652      	lsls	r2, r2, #25
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e3e:	06d2      	lsls	r2, r2, #27
 8004e40:	430a      	orrs	r2, r1
 8004e42:	4947      	ldr	r1, [pc, #284]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a44      	ldr	r2, [pc, #272]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd f9e4 	bl	800222c <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd f9e0 	bl	800222c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e06e      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x530>
 8004e86:	e066      	b.n	8004f56 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a34      	ldr	r2, [pc, #208]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e92:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e94:	4b32      	ldr	r3, [pc, #200]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a31      	ldr	r2, [pc, #196]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a2e      	ldr	r2, [pc, #184]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004ea6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f9bc 	bl	800222c <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd f9b8 	bl	800222c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e046      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x580>
 8004ed6:	e03e      	b.n	8004f56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e039      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ee4:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_RCC_OscConfig+0x628>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d12c      	bne.n	8004f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	3b01      	subs	r3, #1
 8004f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d123      	bne.n	8004f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11b      	bne.n	8004f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d113      	bne.n	8004f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	3b01      	subs	r3, #1
 8004f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	085b      	lsrs	r3, r3, #1
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000
 8004f64:	019f800c 	.word	0x019f800c

08004f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e11e      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b91      	ldr	r3, [pc, #580]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d910      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b8e      	ldr	r3, [pc, #568]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 020f 	bic.w	r2, r3, #15
 8004f96:	498c      	ldr	r1, [pc, #560]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b8a      	ldr	r3, [pc, #552]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e106      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d073      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d129      	bne.n	8005018 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc4:	4b81      	ldr	r3, [pc, #516]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0f4      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fd4:	f000 f99e 	bl	8005314 <RCC_GetSysClockFreqFromPLLSource>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4a7c      	ldr	r2, [pc, #496]	; (80051d0 <HAL_RCC_ClockConfig+0x268>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d93f      	bls.n	8005062 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d033      	beq.n	8005062 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d12f      	bne.n	8005062 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005002:	4b72      	ldr	r3, [pc, #456]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800500a:	4a70      	ldr	r2, [pc, #448]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e024      	b.n	8005062 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d107      	bne.n	8005030 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005020:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0c6      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005030:	4b66      	ldr	r3, [pc, #408]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0be      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005040:	f000 f8ce 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8005044:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4a61      	ldr	r2, [pc, #388]	; (80051d0 <HAL_RCC_ClockConfig+0x268>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d909      	bls.n	8005062 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800504e:	4b5f      	ldr	r3, [pc, #380]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005056:	4a5d      	ldr	r2, [pc, #372]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005062:	4b5a      	ldr	r3, [pc, #360]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4957      	ldr	r1, [pc, #348]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fd f8da 	bl	800222c <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	e00a      	b.n	8005092 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507c:	f7fd f8d6 	bl	800222c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e095      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	4b4e      	ldr	r3, [pc, #312]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 020c 	and.w	r2, r3, #12
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d1eb      	bne.n	800507c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d023      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050bc:	4b43      	ldr	r3, [pc, #268]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a42      	ldr	r2, [pc, #264]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050d4:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050dc:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4936      	ldr	r1, [pc, #216]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
 80050f6:	e008      	b.n	800510a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d105      	bne.n	800510a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050fe:	4b33      	ldr	r3, [pc, #204]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005108:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d21d      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 020f 	bic.w	r2, r3, #15
 8005120:	4929      	ldr	r1, [pc, #164]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005128:	f7fd f880 	bl	800222c <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	e00a      	b.n	8005146 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005130:	f7fd f87c 	bl	800222c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e03b      	b.n	80051be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <HAL_RCC_ClockConfig+0x260>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d1ed      	bne.n	8005130 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4917      	ldr	r1, [pc, #92]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490f      	ldr	r1, [pc, #60]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005192:	f000 f825 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <HAL_RCC_ClockConfig+0x264>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490c      	ldr	r1, [pc, #48]	; (80051d4 <HAL_RCC_ClockConfig+0x26c>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_RCC_ClockConfig+0x270>)
 80051b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCC_ClockConfig+0x274>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fc ffec 	bl	8002194 <HAL_InitTick>
 80051bc:	4603      	mov	r3, r0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40021000 	.word	0x40021000
 80051d0:	04c4b400 	.word	0x04c4b400
 80051d4:	08007f78 	.word	0x08007f78
 80051d8:	20000004 	.word	0x20000004
 80051dc:	20000008 	.word	0x20000008

080051e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051e6:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d102      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051f2:	4b2a      	ldr	r3, [pc, #168]	; (800529c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e047      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051f8:	4b27      	ldr	r3, [pc, #156]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b08      	cmp	r3, #8
 8005202:	d102      	bne.n	800520a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005204:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e03e      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800520a:	4b23      	ldr	r3, [pc, #140]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b0c      	cmp	r3, #12
 8005214:	d136      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005216:	4b20      	ldr	r3, [pc, #128]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	3301      	adds	r3, #1
 800522c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d10c      	bne.n	800524e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800523e:	68d2      	ldr	r2, [r2, #12]
 8005240:	0a12      	lsrs	r2, r2, #8
 8005242:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	617b      	str	r3, [r7, #20]
      break;
 800524c:	e00c      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005258:	68d2      	ldr	r2, [r2, #12]
 800525a:	0a12      	lsrs	r2, r2, #8
 800525c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
      break;
 8005266:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0e5b      	lsrs	r3, r3, #25
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	3301      	adds	r3, #1
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e001      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005288:	693b      	ldr	r3, [r7, #16]
}
 800528a:	4618      	mov	r0, r3
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	007a1200 	.word	0x007a1200

080052a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000004 	.word	0x20000004

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052c0:	f7ff fff0 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4904      	ldr	r1, [pc, #16]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	08007f88 	.word	0x08007f88

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052ec:	f7ff ffda 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0adb      	lsrs	r3, r3, #11
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	08007f88 	.word	0x08007f88

08005314 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d10c      	bne.n	8005352 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005342:	68d2      	ldr	r2, [r2, #12]
 8005344:	0a12      	lsrs	r2, r2, #8
 8005346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	617b      	str	r3, [r7, #20]
    break;
 8005350:	e00c      	b.n	800536c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	fbb2 f3f3 	udiv	r3, r2, r3
 800535a:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800535c:	68d2      	ldr	r2, [r2, #12]
 800535e:	0a12      	lsrs	r2, r2, #8
 8005360:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005364:	fb02 f303 	mul.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
    break;
 800536a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	0e5b      	lsrs	r3, r3, #25
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	3301      	adds	r3, #1
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005386:	687b      	ldr	r3, [r7, #4]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40021000 	.word	0x40021000
 8005398:	007a1200 	.word	0x007a1200
 800539c:	00f42400 	.word	0x00f42400

080053a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a8:	2300      	movs	r3, #0
 80053aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ac:	2300      	movs	r3, #0
 80053ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8098 	beq.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053be:	2300      	movs	r3, #0
 80053c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6593      	str	r3, [r2, #88]	; 0x58
 80053da:	4b3d      	ldr	r3, [pc, #244]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e6:	2301      	movs	r3, #1
 80053e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ea:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f6:	f7fc ff19 	bl	800222c <HAL_GetTick>
 80053fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053fc:	e009      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7fc ff15 	bl	800222c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d902      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	74fb      	strb	r3, [r7, #19]
        break;
 8005410:	e005      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005412:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ef      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800541e:	7cfb      	ldrb	r3, [r7, #19]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d159      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005424:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01e      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	429a      	cmp	r2, r3
 800543e:	d019      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005440:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800546c:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fc fed5 	bl	800222c <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005484:	e00b      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fc fed1 	bl	800222c <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	; 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d902      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	74fb      	strb	r3, [r7, #19]
            break;
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ec      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	4903      	ldr	r1, [pc, #12]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054c8:	e008      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	74bb      	strb	r3, [r7, #18]
 80054ce:	e005      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054dc:	7c7b      	ldrb	r3, [r7, #17]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e2:	4ba6      	ldr	r3, [pc, #664]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	4aa5      	ldr	r2, [pc, #660]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054fa:	4ba0      	ldr	r3, [pc, #640]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f023 0203 	bic.w	r2, r3, #3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	499c      	ldr	r1, [pc, #624]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800551c:	4b97      	ldr	r3, [pc, #604]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f023 020c 	bic.w	r2, r3, #12
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	4994      	ldr	r1, [pc, #592]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800553e:	4b8f      	ldr	r3, [pc, #572]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	498b      	ldr	r1, [pc, #556]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005560:	4b86      	ldr	r3, [pc, #536]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	4983      	ldr	r1, [pc, #524]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005582:	4b7e      	ldr	r3, [pc, #504]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	497a      	ldr	r1, [pc, #488]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055a4:	4b75      	ldr	r3, [pc, #468]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	4972      	ldr	r1, [pc, #456]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c6:	4b6d      	ldr	r3, [pc, #436]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4969      	ldr	r1, [pc, #420]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055e8:	4b64      	ldr	r3, [pc, #400]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4961      	ldr	r1, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560a:	4b5c      	ldr	r3, [pc, #368]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	4958      	ldr	r1, [pc, #352]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800562c:	4b53      	ldr	r3, [pc, #332]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	4950      	ldr	r1, [pc, #320]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a4a      	ldr	r2, [pc, #296]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005664:	4b45      	ldr	r3, [pc, #276]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	4942      	ldr	r1, [pc, #264]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	4b3d      	ldr	r3, [pc, #244]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a3c      	ldr	r2, [pc, #240]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	4934      	ldr	r1, [pc, #208]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4a2e      	ldr	r2, [pc, #184]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d4:	4b29      	ldr	r3, [pc, #164]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	4926      	ldr	r1, [pc, #152]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f2:	d105      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a20      	ldr	r2, [pc, #128]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	4918      	ldr	r1, [pc, #96]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a12      	ldr	r2, [pc, #72]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	490a      	ldr	r1, [pc, #40]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005762:	d105      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005770:	7cbb      	ldrb	r3, [r7, #18]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000

08005780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e049      	b.n	8005826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fb48 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f000 fb10 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e04a      	b.n	80058de <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <HAL_TIM_Base_Start_IT+0xbc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x6c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d013      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x6c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x6c>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x6c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIM_Base_Start_IT+0x6c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d115      	bne.n	80058c8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <HAL_TIM_Base_Start_IT+0xd0>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d015      	beq.n	80058da <HAL_TIM_Base_Start_IT+0xaa>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d011      	beq.n	80058da <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	e008      	b.n	80058da <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e000      	b.n	80058dc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40014000 	.word	0x40014000
 8005900:	00010007 	.word	0x00010007

08005904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e049      	b.n	80059aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f841 	bl	80059b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f000 fa4e 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e0ff      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b14      	cmp	r3, #20
 80059f2:	f200 80f0 	bhi.w	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005bd7 	.word	0x08005bd7
 8005a04:	08005bd7 	.word	0x08005bd7
 8005a08:	08005bd7 	.word	0x08005bd7
 8005a0c:	08005a91 	.word	0x08005a91
 8005a10:	08005bd7 	.word	0x08005bd7
 8005a14:	08005bd7 	.word	0x08005bd7
 8005a18:	08005bd7 	.word	0x08005bd7
 8005a1c:	08005ad3 	.word	0x08005ad3
 8005a20:	08005bd7 	.word	0x08005bd7
 8005a24:	08005bd7 	.word	0x08005bd7
 8005a28:	08005bd7 	.word	0x08005bd7
 8005a2c:	08005b13 	.word	0x08005b13
 8005a30:	08005bd7 	.word	0x08005bd7
 8005a34:	08005bd7 	.word	0x08005bd7
 8005a38:	08005bd7 	.word	0x08005bd7
 8005a3c:	08005b55 	.word	0x08005b55
 8005a40:	08005bd7 	.word	0x08005bd7
 8005a44:	08005bd7 	.word	0x08005bd7
 8005a48:	08005bd7 	.word	0x08005bd7
 8005a4c:	08005b95 	.word	0x08005b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa54 	bl	8005f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	619a      	str	r2, [r3, #24]
      break;
 8005a8e:	e0a5      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fac4 	bl	8006024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
      break;
 8005ad0:	e084      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fb2d 	bl	8006138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0204 	bic.w	r2, r2, #4
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      break;
 8005b10:	e064      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb95 	bl	8006248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	021a      	lsls	r2, r3, #8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
      break;
 8005b52:	e043      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fbfe 	bl	800635c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0208 	orr.w	r2, r2, #8
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0204 	bic.w	r2, r2, #4
 8005b7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b92:	e023      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fc42 	bl	8006424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005bd4:	e002      	b.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop

08005bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_ConfigClockSource+0x1c>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e0de      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x1da>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a63      	ldr	r2, [pc, #396]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	f000 80a9 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005c4c:	4a61      	ldr	r2, [pc, #388]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f200 80ae 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c54:	4a60      	ldr	r2, [pc, #384]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f000 80a1 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005c5c:	4a5e      	ldr	r2, [pc, #376]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f200 80a6 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c64:	4a5d      	ldr	r2, [pc, #372]	; (8005ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	f000 8099 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005c6c:	4a5b      	ldr	r2, [pc, #364]	; (8005ddc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f200 809e 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c74:	4a5a      	ldr	r2, [pc, #360]	; (8005de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f000 8091 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f200 8096 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c88:	f000 8089 	beq.w	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005c8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c90:	f200 808e 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0x128>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cb0:	2b70      	cmp	r3, #112	; 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xfa>
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x16e>
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x14e>
 8005cc4:	2b50      	cmp	r3, #80	; 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x18e>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f000 fc75 	bl	80065e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f000 fc5e 	bl	80065e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 fbd0 	bl	80064f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	; 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fc29 	bl	80065ae <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fbef 	bl	800654e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	; 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fc19 	bl	80065ae <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fbb0 	bl	80064f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fc09 	bl	80065ae <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 fc00 	bl	80065ae <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	00100070 	.word	0x00100070
 8005dd8:	00100040 	.word	0x00100040
 8005ddc:	00100030 	.word	0x00100030
 8005de0:	00100020 	.word	0x00100020

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a39      	ldr	r2, [pc, #228]	; (8005eec <TIM_Base_SetConfig+0x108>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a38      	ldr	r2, [pc, #224]	; (8005ef0 <TIM_Base_SetConfig+0x10c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a37      	ldr	r2, [pc, #220]	; (8005ef4 <TIM_Base_SetConfig+0x110>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2d      	ldr	r2, [pc, #180]	; (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <TIM_Base_SetConfig+0x108>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <TIM_Base_SetConfig+0x10c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <TIM_Base_SetConfig+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <TIM_Base_SetConfig+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a26      	ldr	r2, [pc, #152]	; (8005efc <TIM_Base_SetConfig+0x118>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <TIM_Base_SetConfig+0x11c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0xe8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <TIM_Base_SetConfig+0x110>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0xe8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0xe8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0f      	ldr	r2, [pc, #60]	; (8005efc <TIM_Base_SetConfig+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0xe8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0e      	ldr	r2, [pc, #56]	; (8005f00 <TIM_Base_SetConfig+0x11c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d103      	bne.n	8005ed4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0303 	bic.w	r3, r3, #3
 8005f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 0302 	bic.w	r3, r3, #2
 8005f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <TIM_OC1_SetConfig+0x10c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00f      	beq.n	8005f84 <TIM_OC1_SetConfig+0x80>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2b      	ldr	r2, [pc, #172]	; (8006014 <TIM_OC1_SetConfig+0x110>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <TIM_OC1_SetConfig+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <TIM_OC1_SetConfig+0x114>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d007      	beq.n	8005f84 <TIM_OC1_SetConfig+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <TIM_OC1_SetConfig+0x118>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC1_SetConfig+0x80>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a28      	ldr	r2, [pc, #160]	; (8006020 <TIM_OC1_SetConfig+0x11c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d10c      	bne.n	8005f9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0308 	bic.w	r3, r3, #8
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0304 	bic.w	r3, r3, #4
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <TIM_OC1_SetConfig+0x10c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC1_SetConfig+0xc2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <TIM_OC1_SetConfig+0x110>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC1_SetConfig+0xc2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <TIM_OC1_SetConfig+0x114>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC1_SetConfig+0xc2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a18      	ldr	r2, [pc, #96]	; (800601c <TIM_OC1_SetConfig+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC1_SetConfig+0xc2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	; (8006020 <TIM_OC1_SetConfig+0x11c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d111      	bne.n	8005fea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800

08006024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f023 0210 	bic.w	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0320 	bic.w	r3, r3, #32
 8006072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a28      	ldr	r2, [pc, #160]	; (8006124 <TIM_OC2_SetConfig+0x100>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0x6c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a27      	ldr	r2, [pc, #156]	; (8006128 <TIM_OC2_SetConfig+0x104>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10d      	bne.n	80060ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <TIM_OC2_SetConfig+0x100>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00f      	beq.n	80060d4 <TIM_OC2_SetConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <TIM_OC2_SetConfig+0x104>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_OC2_SetConfig+0xb0>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <TIM_OC2_SetConfig+0x108>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_OC2_SetConfig+0xb0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <TIM_OC2_SetConfig+0x10c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC2_SetConfig+0xb0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a19      	ldr	r2, [pc, #100]	; (8006134 <TIM_OC2_SetConfig+0x110>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d113      	bne.n	80060fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40013400 	.word	0x40013400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800

08006138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0303 	bic.w	r3, r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a27      	ldr	r2, [pc, #156]	; (8006234 <TIM_OC3_SetConfig+0xfc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0x6a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a26      	ldr	r2, [pc, #152]	; (8006238 <TIM_OC3_SetConfig+0x100>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10d      	bne.n	80061be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <TIM_OC3_SetConfig+0xfc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_OC3_SetConfig+0xae>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <TIM_OC3_SetConfig+0x100>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_OC3_SetConfig+0xae>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1a      	ldr	r2, [pc, #104]	; (800623c <TIM_OC3_SetConfig+0x104>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC3_SetConfig+0xae>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a19      	ldr	r2, [pc, #100]	; (8006240 <TIM_OC3_SetConfig+0x108>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC3_SetConfig+0xae>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <TIM_OC3_SetConfig+0x10c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d113      	bne.n	800620e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800

08006248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a28      	ldr	r2, [pc, #160]	; (8006348 <TIM_OC4_SetConfig+0x100>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC4_SetConfig+0x6c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a27      	ldr	r2, [pc, #156]	; (800634c <TIM_OC4_SetConfig+0x104>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10d      	bne.n	80062d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	031b      	lsls	r3, r3, #12
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <TIM_OC4_SetConfig+0x100>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC4_SetConfig+0xb0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1c      	ldr	r2, [pc, #112]	; (800634c <TIM_OC4_SetConfig+0x104>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC4_SetConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <TIM_OC4_SetConfig+0x108>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC4_SetConfig+0xb0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <TIM_OC4_SetConfig+0x10c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC4_SetConfig+0xb0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a19      	ldr	r2, [pc, #100]	; (8006358 <TIM_OC4_SetConfig+0x110>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d113      	bne.n	8006320 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006306:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	019b      	lsls	r3, r3, #6
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a17      	ldr	r2, [pc, #92]	; (8006410 <TIM_OC5_SetConfig+0xb4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_OC5_SetConfig+0x7a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a16      	ldr	r2, [pc, #88]	; (8006414 <TIM_OC5_SetConfig+0xb8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_OC5_SetConfig+0x7a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <TIM_OC5_SetConfig+0xbc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_OC5_SetConfig+0x7a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a14      	ldr	r2, [pc, #80]	; (800641c <TIM_OC5_SetConfig+0xc0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_OC5_SetConfig+0x7a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <TIM_OC5_SetConfig+0xc4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d109      	bne.n	80063ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	621a      	str	r2, [r3, #32]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40013400 	.word	0x40013400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800646a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <TIM_OC6_SetConfig+0xb8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00f      	beq.n	80064a0 <TIM_OC6_SetConfig+0x7c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <TIM_OC6_SetConfig+0xbc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00b      	beq.n	80064a0 <TIM_OC6_SetConfig+0x7c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <TIM_OC6_SetConfig+0xc0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <TIM_OC6_SetConfig+0x7c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <TIM_OC6_SetConfig+0xc4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC6_SetConfig+0x7c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a14      	ldr	r2, [pc, #80]	; (80064ec <TIM_OC6_SetConfig+0xc8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d109      	bne.n	80064b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40013400 	.word	0x40013400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800651a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 030a 	bic.w	r3, r3, #10
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0210 	bic.w	r2, r3, #16
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	031b      	lsls	r3, r3, #12
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800658a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f043 0307 	orr.w	r3, r3, #7
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	021a      	lsls	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	431a      	orrs	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	609a      	str	r2, [r3, #8]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800663c:	2302      	movs	r3, #2
 800663e:	e065      	b.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d004      	beq.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2b      	ldr	r2, [pc, #172]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d108      	bne.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800667a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d013      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a12      	ldr	r2, [pc, #72]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a13      	ldr	r2, [pc, #76]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10c      	bne.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40014000 	.word	0x40014000

0800672c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006744:	2302      	movs	r3, #2
 8006746:	e087      	b.n	8006858 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	041b      	lsls	r3, r3, #16
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a27      	ldr	r2, [pc, #156]	; (8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a25      	ldr	r2, [pc, #148]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d106      	bne.n	80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d126      	bne.n	8006846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	051b      	lsls	r3, r3, #20
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d106      	bne.n	8006846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400

0800686c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e042      	b.n	8006904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fb fb69 	bl	8001f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	; 0x24
 800689a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8c2 	bl	8006a38 <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fb82 	bl	8006fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc09 	bl	8007114 <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006922:	2b20      	cmp	r3, #32
 8006924:	f040 8083 	bne.w	8006a2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_UART_Transmit+0x28>
 800692e:	88fb      	ldrh	r3, [r7, #6]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e07b      	b.n	8006a30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_UART_Transmit+0x3a>
 8006942:	2302      	movs	r3, #2
 8006944:	e074      	b.n	8006a30 <HAL_UART_Transmit+0x124>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800695e:	f7fb fc65 	bl	800222c <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d108      	bne.n	8006990 <HAL_UART_Transmit+0x84>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e003      	b.n	8006998 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069a0:	e02c      	b.n	80069fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2180      	movs	r1, #128	; 0x80
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fbfc 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e039      	b.n	8006a30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3302      	adds	r3, #2
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e007      	b.n	80069ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1cc      	bne.n	80069a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2140      	movs	r1, #64	; 0x40
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fbc9 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e006      	b.n	8006a30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e000      	b.n	8006a30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a3c:	b08c      	sub	sp, #48	; 0x30
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4bab      	ldr	r3, [pc, #684]	; (8006d14 <UART_SetConfig+0x2dc>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a70:	430b      	orrs	r3, r1
 8006a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4aa0      	ldr	r2, [pc, #640]	; (8006d18 <UART_SetConfig+0x2e0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006aae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	f023 010f 	bic.w	r1, r3, #15
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a91      	ldr	r2, [pc, #580]	; (8006d1c <UART_SetConfig+0x2e4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d125      	bne.n	8006b28 <UART_SetConfig+0xf0>
 8006adc:	4b90      	ldr	r3, [pc, #576]	; (8006d20 <UART_SetConfig+0x2e8>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d81a      	bhi.n	8006b20 <UART_SetConfig+0xe8>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0xb8>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b06:	e0d6      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e0d2      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b16:	e0ce      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e0ca      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e0c6      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a7d      	ldr	r2, [pc, #500]	; (8006d24 <UART_SetConfig+0x2ec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d138      	bne.n	8006ba4 <UART_SetConfig+0x16c>
 8006b32:	4b7b      	ldr	r3, [pc, #492]	; (8006d20 <UART_SetConfig+0x2e8>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	f003 030c 	and.w	r3, r3, #12
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	d82d      	bhi.n	8006b9c <UART_SetConfig+0x164>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x110>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b7d 	.word	0x08006b7d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b9d 	.word	0x08006b9d
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006b9d 	.word	0x08006b9d
 8006b60:	08006b9d 	.word	0x08006b9d
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006b85 	.word	0x08006b85
 8006b6c:	08006b9d 	.word	0x08006b9d
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e098      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e094      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e090      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e08c      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba2:	e088      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a5f      	ldr	r2, [pc, #380]	; (8006d28 <UART_SetConfig+0x2f0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d125      	bne.n	8006bfa <UART_SetConfig+0x1c2>
 8006bae:	4b5c      	ldr	r3, [pc, #368]	; (8006d20 <UART_SetConfig+0x2e8>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d016      	beq.n	8006bea <UART_SetConfig+0x1b2>
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d818      	bhi.n	8006bf2 <UART_SetConfig+0x1ba>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d00a      	beq.n	8006bda <UART_SetConfig+0x1a2>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d814      	bhi.n	8006bf2 <UART_SetConfig+0x1ba>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <UART_SetConfig+0x19a>
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d008      	beq.n	8006be2 <UART_SetConfig+0x1aa>
 8006bd0:	e00f      	b.n	8006bf2 <UART_SetConfig+0x1ba>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd8:	e06d      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be0:	e069      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006be2:	2304      	movs	r3, #4
 8006be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be8:	e065      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006bea:	2308      	movs	r3, #8
 8006bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf0:	e061      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006bf2:	2310      	movs	r3, #16
 8006bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf8:	e05d      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4b      	ldr	r2, [pc, #300]	; (8006d2c <UART_SetConfig+0x2f4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d125      	bne.n	8006c50 <UART_SetConfig+0x218>
 8006c04:	4b46      	ldr	r3, [pc, #280]	; (8006d20 <UART_SetConfig+0x2e8>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c10:	d016      	beq.n	8006c40 <UART_SetConfig+0x208>
 8006c12:	2bc0      	cmp	r3, #192	; 0xc0
 8006c14:	d818      	bhi.n	8006c48 <UART_SetConfig+0x210>
 8006c16:	2b80      	cmp	r3, #128	; 0x80
 8006c18:	d00a      	beq.n	8006c30 <UART_SetConfig+0x1f8>
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d814      	bhi.n	8006c48 <UART_SetConfig+0x210>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <UART_SetConfig+0x1f0>
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x200>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x210>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	e042      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e03e      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e03a      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c46:	e036      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4e:	e032      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a30      	ldr	r2, [pc, #192]	; (8006d18 <UART_SetConfig+0x2e0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d12a      	bne.n	8006cb0 <UART_SetConfig+0x278>
 8006c5a:	4b31      	ldr	r3, [pc, #196]	; (8006d20 <UART_SetConfig+0x2e8>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c68:	d01a      	beq.n	8006ca0 <UART_SetConfig+0x268>
 8006c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c6e:	d81b      	bhi.n	8006ca8 <UART_SetConfig+0x270>
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c74:	d00c      	beq.n	8006c90 <UART_SetConfig+0x258>
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7a:	d815      	bhi.n	8006ca8 <UART_SetConfig+0x270>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SetConfig+0x250>
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d008      	beq.n	8006c98 <UART_SetConfig+0x260>
 8006c86:	e00f      	b.n	8006ca8 <UART_SetConfig+0x270>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e012      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e00e      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	e00a      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	e006      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cae:	e002      	b.n	8006cb6 <UART_SetConfig+0x27e>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <UART_SetConfig+0x2e0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	f040 80a8 	bne.w	8006e12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d834      	bhi.n	8006d34 <UART_SetConfig+0x2fc>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0x298>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006d35 	.word	0x08006d35
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d03 	.word	0x08006d03
 8006ce4:	08006d35 	.word	0x08006d35
 8006ce8:	08006d35 	.word	0x08006d35
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d0b 	.word	0x08006d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fe fae2 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8006cf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cfa:	e021      	b.n	8006d40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <UART_SetConfig+0x2f8>)
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d00:	e01e      	b.n	8006d40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d02:	f7fe fa6d 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006d06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d08:	e01a      	b.n	8006d40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d10:	e016      	b.n	8006d40 <UART_SetConfig+0x308>
 8006d12:	bf00      	nop
 8006d14:	cfff69f3 	.word	0xcfff69f3
 8006d18:	40008000 	.word	0x40008000
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40004400 	.word	0x40004400
 8006d28:	40004800 	.word	0x40004800
 8006d2c:	40004c00 	.word	0x40004c00
 8006d30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 812a 	beq.w	8006f9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	4a9e      	ldr	r2, [pc, #632]	; (8006fc8 <UART_SetConfig+0x590>)
 8006d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	4413      	add	r3, r2
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d305      	bcc.n	8006d78 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d903      	bls.n	8006d80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d7e:	e10d      	b.n	8006f9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2200      	movs	r2, #0
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	60fa      	str	r2, [r7, #12]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	4a8e      	ldr	r2, [pc, #568]	; (8006fc8 <UART_SetConfig+0x590>)
 8006d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2200      	movs	r2, #0
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	607a      	str	r2, [r7, #4]
 8006d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006da2:	f7f9 fa8d 	bl	80002c0 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	020b      	lsls	r3, r1, #8
 8006db8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dbc:	0202      	lsls	r2, r0, #8
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	6849      	ldr	r1, [r1, #4]
 8006dc2:	0849      	lsrs	r1, r1, #1
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4605      	mov	r5, r0
 8006dca:	eb12 0804 	adds.w	r8, r2, r4
 8006dce:	eb43 0905 	adc.w	r9, r3, r5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	469a      	mov	sl, r3
 8006dda:	4693      	mov	fp, r2
 8006ddc:	4652      	mov	r2, sl
 8006dde:	465b      	mov	r3, fp
 8006de0:	4640      	mov	r0, r8
 8006de2:	4649      	mov	r1, r9
 8006de4:	f7f9 fa6c 	bl	80002c0 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4613      	mov	r3, r2
 8006dee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df6:	d308      	bcc.n	8006e0a <UART_SetConfig+0x3d2>
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfe:	d204      	bcs.n	8006e0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	e0c8      	b.n	8006f9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e10:	e0c4      	b.n	8006f9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e1a:	d167      	bne.n	8006eec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d828      	bhi.n	8006e76 <UART_SetConfig+0x43e>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <UART_SetConfig+0x3f4>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e59 	.word	0x08006e59
 8006e34:	08006e61 	.word	0x08006e61
 8006e38:	08006e77 	.word	0x08006e77
 8006e3c:	08006e67 	.word	0x08006e67
 8006e40:	08006e77 	.word	0x08006e77
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006e77 	.word	0x08006e77
 8006e4c:	08006e6f 	.word	0x08006e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e50:	f7fe fa34 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e56:	e014      	b.n	8006e82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e58:	f7fe fa46 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e5e:	e010      	b.n	8006e82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e60:	4b5a      	ldr	r3, [pc, #360]	; (8006fcc <UART_SetConfig+0x594>)
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e64:	e00d      	b.n	8006e82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e66:	f7fe f9bb 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6c:	e009      	b.n	8006e82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e74:	e005      	b.n	8006e82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8089 	beq.w	8006f9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	4a4e      	ldr	r2, [pc, #312]	; (8006fc8 <UART_SetConfig+0x590>)
 8006e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e9c:	005a      	lsls	r2, r3, #1
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	085b      	lsrs	r3, r3, #1
 8006ea4:	441a      	add	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d916      	bls.n	8006ee4 <UART_SetConfig+0x4ac>
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d212      	bcs.n	8006ee4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f023 030f 	bic.w	r3, r3, #15
 8006ec6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	8bfa      	ldrh	r2, [r7, #30]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e05b      	b.n	8006f9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006eea:	e057      	b.n	8006f9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d828      	bhi.n	8006f46 <UART_SetConfig+0x50e>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x4c4>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	08006f47 	.word	0x08006f47
 8006f0c:	08006f37 	.word	0x08006f37
 8006f10:	08006f47 	.word	0x08006f47
 8006f14:	08006f47 	.word	0x08006f47
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f3f 	.word	0x08006f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f20:	f7fe f9cc 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f26:	e014      	b.n	8006f52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f28:	f7fe f9de 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f2e:	e010      	b.n	8006f52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f30:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <UART_SetConfig+0x594>)
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f34:	e00d      	b.n	8006f52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f36:	f7fe f953 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3c:	e009      	b.n	8006f52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f44:	e005      	b.n	8006f52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f50:	bf00      	nop
    }

    if (pclk != 0U)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d021      	beq.n	8006f9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <UART_SetConfig+0x590>)
 8006f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	441a      	add	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d909      	bls.n	8006f96 <UART_SetConfig+0x55e>
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f88:	d205      	bcs.n	8006f96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	e002      	b.n	8006f9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006fb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3730      	adds	r7, #48	; 0x30
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08007f90 	.word	0x08007f90
 8006fcc:	00f42400 	.word	0x00f42400

08006fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ce:	d10a      	bne.n	80070e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af02      	add	r7, sp, #8
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007124:	f7fb f882 	bl	800222c <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d10e      	bne.n	8007156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f82f 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e025      	b.n	80071a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b04      	cmp	r3, #4
 8007162:	d10e      	bne.n	8007182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f819 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e00f      	b.n	80071a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b09c      	sub	sp, #112	; 0x70
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ba:	e0a9      	b.n	8007310 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	f000 80a5 	beq.w	8007310 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c6:	f7fb f831 	bl	800222c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <UART_WaitOnFlagUntilTimeout+0x32>
 80071d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d140      	bne.n	800725e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071f0:	667b      	str	r3, [r7, #100]	; 0x64
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	663b      	str	r3, [r7, #96]	; 0x60
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800722e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800723c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e069      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d051      	beq.n	8007310 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800727a:	d149      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007284:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800729a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e6      	bne.n	8007286 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3308      	adds	r3, #8
 80072be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	613b      	str	r3, [r7, #16]
   return(result);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072d8:	623a      	str	r2, [r7, #32]
 80072da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	69f9      	ldr	r1, [r7, #28]
 80072de:	6a3a      	ldr	r2, [r7, #32]
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e5      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e010      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4013      	ands	r3, r2
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	429a      	cmp	r2, r3
 800732c:	f43f af46 	beq.w	80071bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3770      	adds	r7, #112	; 0x70
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_UARTEx_DisableFifoMode+0x16>
 800734c:	2302      	movs	r3, #2
 800734e:	e027      	b.n	80073a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2224      	movs	r2, #36	; 0x24
 800735c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800737e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e02d      	b.n	8007420 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2224      	movs	r2, #36	; 0x24
 80073d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0201 	bic.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f84f 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e02d      	b.n	800749c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	; 0x24
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f811 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c4:	e031      	b.n	800752a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074c6:	2308      	movs	r3, #8
 80074c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074ca:	2308      	movs	r3, #8
 80074cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	0e5b      	lsrs	r3, r3, #25
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0f5b      	lsrs	r3, r3, #29
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	7b3a      	ldrb	r2, [r7, #12]
 80074f2:	4911      	ldr	r1, [pc, #68]	; (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 80074f4:	5c8a      	ldrb	r2, [r1, r2]
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074fa:	7b3a      	ldrb	r2, [r7, #12]
 80074fc:	490f      	ldr	r1, [pc, #60]	; (800753c <UARTEx_SetNbDataToProcess+0x98>)
 80074fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007500:	fb93 f3f2 	sdiv	r3, r3, r2
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	7b7a      	ldrb	r2, [r7, #13]
 8007510:	4909      	ldr	r1, [pc, #36]	; (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 8007512:	5c8a      	ldrb	r2, [r1, r2]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007518:	7b7a      	ldrb	r2, [r7, #13]
 800751a:	4908      	ldr	r1, [pc, #32]	; (800753c <UARTEx_SetNbDataToProcess+0x98>)
 800751c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	08007fa8 	.word	0x08007fa8
 800753c:	08007fb0 	.word	0x08007fb0

08007540 <siprintf>:
 8007540:	b40e      	push	{r1, r2, r3}
 8007542:	b500      	push	{lr}
 8007544:	b09c      	sub	sp, #112	; 0x70
 8007546:	ab1d      	add	r3, sp, #116	; 0x74
 8007548:	9002      	str	r0, [sp, #8]
 800754a:	9006      	str	r0, [sp, #24]
 800754c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007550:	4809      	ldr	r0, [pc, #36]	; (8007578 <siprintf+0x38>)
 8007552:	9107      	str	r1, [sp, #28]
 8007554:	9104      	str	r1, [sp, #16]
 8007556:	4909      	ldr	r1, [pc, #36]	; (800757c <siprintf+0x3c>)
 8007558:	f853 2b04 	ldr.w	r2, [r3], #4
 800755c:	9105      	str	r1, [sp, #20]
 800755e:	6800      	ldr	r0, [r0, #0]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	a902      	add	r1, sp, #8
 8007564:	f000 f992 	bl	800788c <_svfiprintf_r>
 8007568:	9b02      	ldr	r3, [sp, #8]
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	b01c      	add	sp, #112	; 0x70
 8007570:	f85d eb04 	ldr.w	lr, [sp], #4
 8007574:	b003      	add	sp, #12
 8007576:	4770      	bx	lr
 8007578:	2000005c 	.word	0x2000005c
 800757c:	ffff0208 	.word	0xffff0208

08007580 <memset>:
 8007580:	4402      	add	r2, r0
 8007582:	4603      	mov	r3, r0
 8007584:	4293      	cmp	r3, r2
 8007586:	d100      	bne.n	800758a <memset+0xa>
 8007588:	4770      	bx	lr
 800758a:	f803 1b01 	strb.w	r1, [r3], #1
 800758e:	e7f9      	b.n	8007584 <memset+0x4>

08007590 <__errno>:
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <__errno+0x8>)
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2000005c 	.word	0x2000005c

0800759c <__libc_init_array>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4d0d      	ldr	r5, [pc, #52]	; (80075d4 <__libc_init_array+0x38>)
 80075a0:	4c0d      	ldr	r4, [pc, #52]	; (80075d8 <__libc_init_array+0x3c>)
 80075a2:	1b64      	subs	r4, r4, r5
 80075a4:	10a4      	asrs	r4, r4, #2
 80075a6:	2600      	movs	r6, #0
 80075a8:	42a6      	cmp	r6, r4
 80075aa:	d109      	bne.n	80075c0 <__libc_init_array+0x24>
 80075ac:	4d0b      	ldr	r5, [pc, #44]	; (80075dc <__libc_init_array+0x40>)
 80075ae:	4c0c      	ldr	r4, [pc, #48]	; (80075e0 <__libc_init_array+0x44>)
 80075b0:	f000 fc6a 	bl	8007e88 <_init>
 80075b4:	1b64      	subs	r4, r4, r5
 80075b6:	10a4      	asrs	r4, r4, #2
 80075b8:	2600      	movs	r6, #0
 80075ba:	42a6      	cmp	r6, r4
 80075bc:	d105      	bne.n	80075ca <__libc_init_array+0x2e>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c4:	4798      	blx	r3
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7ee      	b.n	80075a8 <__libc_init_array+0xc>
 80075ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ce:	4798      	blx	r3
 80075d0:	3601      	adds	r6, #1
 80075d2:	e7f2      	b.n	80075ba <__libc_init_array+0x1e>
 80075d4:	08007ff4 	.word	0x08007ff4
 80075d8:	08007ff4 	.word	0x08007ff4
 80075dc:	08007ff4 	.word	0x08007ff4
 80075e0:	08007ff8 	.word	0x08007ff8

080075e4 <__retarget_lock_acquire_recursive>:
 80075e4:	4770      	bx	lr

080075e6 <__retarget_lock_release_recursive>:
 80075e6:	4770      	bx	lr

080075e8 <_free_r>:
 80075e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ea:	2900      	cmp	r1, #0
 80075ec:	d044      	beq.n	8007678 <_free_r+0x90>
 80075ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f2:	9001      	str	r0, [sp, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f1a1 0404 	sub.w	r4, r1, #4
 80075fa:	bfb8      	it	lt
 80075fc:	18e4      	addlt	r4, r4, r3
 80075fe:	f000 f8df 	bl	80077c0 <__malloc_lock>
 8007602:	4a1e      	ldr	r2, [pc, #120]	; (800767c <_free_r+0x94>)
 8007604:	9801      	ldr	r0, [sp, #4]
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	b933      	cbnz	r3, 8007618 <_free_r+0x30>
 800760a:	6063      	str	r3, [r4, #4]
 800760c:	6014      	str	r4, [r2, #0]
 800760e:	b003      	add	sp, #12
 8007610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007614:	f000 b8da 	b.w	80077cc <__malloc_unlock>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d908      	bls.n	800762e <_free_r+0x46>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf01      	itttt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	1949      	addeq	r1, r1, r5
 800762a:	6021      	streq	r1, [r4, #0]
 800762c:	e7ed      	b.n	800760a <_free_r+0x22>
 800762e:	461a      	mov	r2, r3
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	b10b      	cbz	r3, 8007638 <_free_r+0x50>
 8007634:	42a3      	cmp	r3, r4
 8007636:	d9fa      	bls.n	800762e <_free_r+0x46>
 8007638:	6811      	ldr	r1, [r2, #0]
 800763a:	1855      	adds	r5, r2, r1
 800763c:	42a5      	cmp	r5, r4
 800763e:	d10b      	bne.n	8007658 <_free_r+0x70>
 8007640:	6824      	ldr	r4, [r4, #0]
 8007642:	4421      	add	r1, r4
 8007644:	1854      	adds	r4, r2, r1
 8007646:	42a3      	cmp	r3, r4
 8007648:	6011      	str	r1, [r2, #0]
 800764a:	d1e0      	bne.n	800760e <_free_r+0x26>
 800764c:	681c      	ldr	r4, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	6053      	str	r3, [r2, #4]
 8007652:	440c      	add	r4, r1
 8007654:	6014      	str	r4, [r2, #0]
 8007656:	e7da      	b.n	800760e <_free_r+0x26>
 8007658:	d902      	bls.n	8007660 <_free_r+0x78>
 800765a:	230c      	movs	r3, #12
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	e7d6      	b.n	800760e <_free_r+0x26>
 8007660:	6825      	ldr	r5, [r4, #0]
 8007662:	1961      	adds	r1, r4, r5
 8007664:	428b      	cmp	r3, r1
 8007666:	bf04      	itt	eq
 8007668:	6819      	ldreq	r1, [r3, #0]
 800766a:	685b      	ldreq	r3, [r3, #4]
 800766c:	6063      	str	r3, [r4, #4]
 800766e:	bf04      	itt	eq
 8007670:	1949      	addeq	r1, r1, r5
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	6054      	str	r4, [r2, #4]
 8007676:	e7ca      	b.n	800760e <_free_r+0x26>
 8007678:	b003      	add	sp, #12
 800767a:	bd30      	pop	{r4, r5, pc}
 800767c:	2000085c 	.word	0x2000085c

08007680 <sbrk_aligned>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4e0e      	ldr	r6, [pc, #56]	; (80076bc <sbrk_aligned+0x3c>)
 8007684:	460c      	mov	r4, r1
 8007686:	6831      	ldr	r1, [r6, #0]
 8007688:	4605      	mov	r5, r0
 800768a:	b911      	cbnz	r1, 8007692 <sbrk_aligned+0x12>
 800768c:	f000 fba6 	bl	8007ddc <_sbrk_r>
 8007690:	6030      	str	r0, [r6, #0]
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 fba1 	bl	8007ddc <_sbrk_r>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d00a      	beq.n	80076b4 <sbrk_aligned+0x34>
 800769e:	1cc4      	adds	r4, r0, #3
 80076a0:	f024 0403 	bic.w	r4, r4, #3
 80076a4:	42a0      	cmp	r0, r4
 80076a6:	d007      	beq.n	80076b8 <sbrk_aligned+0x38>
 80076a8:	1a21      	subs	r1, r4, r0
 80076aa:	4628      	mov	r0, r5
 80076ac:	f000 fb96 	bl	8007ddc <_sbrk_r>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d101      	bne.n	80076b8 <sbrk_aligned+0x38>
 80076b4:	f04f 34ff 	mov.w	r4, #4294967295
 80076b8:	4620      	mov	r0, r4
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	20000860 	.word	0x20000860

080076c0 <_malloc_r>:
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	1ccd      	adds	r5, r1, #3
 80076c6:	f025 0503 	bic.w	r5, r5, #3
 80076ca:	3508      	adds	r5, #8
 80076cc:	2d0c      	cmp	r5, #12
 80076ce:	bf38      	it	cc
 80076d0:	250c      	movcc	r5, #12
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	4607      	mov	r7, r0
 80076d6:	db01      	blt.n	80076dc <_malloc_r+0x1c>
 80076d8:	42a9      	cmp	r1, r5
 80076da:	d905      	bls.n	80076e8 <_malloc_r+0x28>
 80076dc:	230c      	movs	r3, #12
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	2600      	movs	r6, #0
 80076e2:	4630      	mov	r0, r6
 80076e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077bc <_malloc_r+0xfc>
 80076ec:	f000 f868 	bl	80077c0 <__malloc_lock>
 80076f0:	f8d8 3000 	ldr.w	r3, [r8]
 80076f4:	461c      	mov	r4, r3
 80076f6:	bb5c      	cbnz	r4, 8007750 <_malloc_r+0x90>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ffc0 	bl	8007680 <sbrk_aligned>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	4604      	mov	r4, r0
 8007704:	d155      	bne.n	80077b2 <_malloc_r+0xf2>
 8007706:	f8d8 4000 	ldr.w	r4, [r8]
 800770a:	4626      	mov	r6, r4
 800770c:	2e00      	cmp	r6, #0
 800770e:	d145      	bne.n	800779c <_malloc_r+0xdc>
 8007710:	2c00      	cmp	r4, #0
 8007712:	d048      	beq.n	80077a6 <_malloc_r+0xe6>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	4631      	mov	r1, r6
 8007718:	4638      	mov	r0, r7
 800771a:	eb04 0903 	add.w	r9, r4, r3
 800771e:	f000 fb5d 	bl	8007ddc <_sbrk_r>
 8007722:	4581      	cmp	r9, r0
 8007724:	d13f      	bne.n	80077a6 <_malloc_r+0xe6>
 8007726:	6821      	ldr	r1, [r4, #0]
 8007728:	1a6d      	subs	r5, r5, r1
 800772a:	4629      	mov	r1, r5
 800772c:	4638      	mov	r0, r7
 800772e:	f7ff ffa7 	bl	8007680 <sbrk_aligned>
 8007732:	3001      	adds	r0, #1
 8007734:	d037      	beq.n	80077a6 <_malloc_r+0xe6>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	442b      	add	r3, r5
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	f8d8 3000 	ldr.w	r3, [r8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d038      	beq.n	80077b6 <_malloc_r+0xf6>
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	42a2      	cmp	r2, r4
 8007748:	d12b      	bne.n	80077a2 <_malloc_r+0xe2>
 800774a:	2200      	movs	r2, #0
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	e00f      	b.n	8007770 <_malloc_r+0xb0>
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	1b52      	subs	r2, r2, r5
 8007754:	d41f      	bmi.n	8007796 <_malloc_r+0xd6>
 8007756:	2a0b      	cmp	r2, #11
 8007758:	d917      	bls.n	800778a <_malloc_r+0xca>
 800775a:	1961      	adds	r1, r4, r5
 800775c:	42a3      	cmp	r3, r4
 800775e:	6025      	str	r5, [r4, #0]
 8007760:	bf18      	it	ne
 8007762:	6059      	strne	r1, [r3, #4]
 8007764:	6863      	ldr	r3, [r4, #4]
 8007766:	bf08      	it	eq
 8007768:	f8c8 1000 	streq.w	r1, [r8]
 800776c:	5162      	str	r2, [r4, r5]
 800776e:	604b      	str	r3, [r1, #4]
 8007770:	4638      	mov	r0, r7
 8007772:	f104 060b 	add.w	r6, r4, #11
 8007776:	f000 f829 	bl	80077cc <__malloc_unlock>
 800777a:	f026 0607 	bic.w	r6, r6, #7
 800777e:	1d23      	adds	r3, r4, #4
 8007780:	1af2      	subs	r2, r6, r3
 8007782:	d0ae      	beq.n	80076e2 <_malloc_r+0x22>
 8007784:	1b9b      	subs	r3, r3, r6
 8007786:	50a3      	str	r3, [r4, r2]
 8007788:	e7ab      	b.n	80076e2 <_malloc_r+0x22>
 800778a:	42a3      	cmp	r3, r4
 800778c:	6862      	ldr	r2, [r4, #4]
 800778e:	d1dd      	bne.n	800774c <_malloc_r+0x8c>
 8007790:	f8c8 2000 	str.w	r2, [r8]
 8007794:	e7ec      	b.n	8007770 <_malloc_r+0xb0>
 8007796:	4623      	mov	r3, r4
 8007798:	6864      	ldr	r4, [r4, #4]
 800779a:	e7ac      	b.n	80076f6 <_malloc_r+0x36>
 800779c:	4634      	mov	r4, r6
 800779e:	6876      	ldr	r6, [r6, #4]
 80077a0:	e7b4      	b.n	800770c <_malloc_r+0x4c>
 80077a2:	4613      	mov	r3, r2
 80077a4:	e7cc      	b.n	8007740 <_malloc_r+0x80>
 80077a6:	230c      	movs	r3, #12
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	4638      	mov	r0, r7
 80077ac:	f000 f80e 	bl	80077cc <__malloc_unlock>
 80077b0:	e797      	b.n	80076e2 <_malloc_r+0x22>
 80077b2:	6025      	str	r5, [r4, #0]
 80077b4:	e7dc      	b.n	8007770 <_malloc_r+0xb0>
 80077b6:	605b      	str	r3, [r3, #4]
 80077b8:	deff      	udf	#255	; 0xff
 80077ba:	bf00      	nop
 80077bc:	2000085c 	.word	0x2000085c

080077c0 <__malloc_lock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__malloc_lock+0x8>)
 80077c2:	f7ff bf0f 	b.w	80075e4 <__retarget_lock_acquire_recursive>
 80077c6:	bf00      	nop
 80077c8:	20000858 	.word	0x20000858

080077cc <__malloc_unlock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	; (80077d4 <__malloc_unlock+0x8>)
 80077ce:	f7ff bf0a 	b.w	80075e6 <__retarget_lock_release_recursive>
 80077d2:	bf00      	nop
 80077d4:	20000858 	.word	0x20000858

080077d8 <__ssputs_r>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	688e      	ldr	r6, [r1, #8]
 80077de:	461f      	mov	r7, r3
 80077e0:	42be      	cmp	r6, r7
 80077e2:	680b      	ldr	r3, [r1, #0]
 80077e4:	4682      	mov	sl, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4690      	mov	r8, r2
 80077ea:	d82c      	bhi.n	8007846 <__ssputs_r+0x6e>
 80077ec:	898a      	ldrh	r2, [r1, #12]
 80077ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077f2:	d026      	beq.n	8007842 <__ssputs_r+0x6a>
 80077f4:	6965      	ldr	r5, [r4, #20]
 80077f6:	6909      	ldr	r1, [r1, #16]
 80077f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077fc:	eba3 0901 	sub.w	r9, r3, r1
 8007800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007804:	1c7b      	adds	r3, r7, #1
 8007806:	444b      	add	r3, r9
 8007808:	106d      	asrs	r5, r5, #1
 800780a:	429d      	cmp	r5, r3
 800780c:	bf38      	it	cc
 800780e:	461d      	movcc	r5, r3
 8007810:	0553      	lsls	r3, r2, #21
 8007812:	d527      	bpl.n	8007864 <__ssputs_r+0x8c>
 8007814:	4629      	mov	r1, r5
 8007816:	f7ff ff53 	bl	80076c0 <_malloc_r>
 800781a:	4606      	mov	r6, r0
 800781c:	b360      	cbz	r0, 8007878 <__ssputs_r+0xa0>
 800781e:	6921      	ldr	r1, [r4, #16]
 8007820:	464a      	mov	r2, r9
 8007822:	f000 faeb 	bl	8007dfc <memcpy>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	6126      	str	r6, [r4, #16]
 8007834:	6165      	str	r5, [r4, #20]
 8007836:	444e      	add	r6, r9
 8007838:	eba5 0509 	sub.w	r5, r5, r9
 800783c:	6026      	str	r6, [r4, #0]
 800783e:	60a5      	str	r5, [r4, #8]
 8007840:	463e      	mov	r6, r7
 8007842:	42be      	cmp	r6, r7
 8007844:	d900      	bls.n	8007848 <__ssputs_r+0x70>
 8007846:	463e      	mov	r6, r7
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	4632      	mov	r2, r6
 800784c:	4641      	mov	r1, r8
 800784e:	f000 faab 	bl	8007da8 <memmove>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	1b9b      	subs	r3, r3, r6
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	4433      	add	r3, r6
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	2000      	movs	r0, #0
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	462a      	mov	r2, r5
 8007866:	f000 fad7 	bl	8007e18 <_realloc_r>
 800786a:	4606      	mov	r6, r0
 800786c:	2800      	cmp	r0, #0
 800786e:	d1e0      	bne.n	8007832 <__ssputs_r+0x5a>
 8007870:	6921      	ldr	r1, [r4, #16]
 8007872:	4650      	mov	r0, sl
 8007874:	f7ff feb8 	bl	80075e8 <_free_r>
 8007878:	230c      	movs	r3, #12
 800787a:	f8ca 3000 	str.w	r3, [sl]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	f04f 30ff 	mov.w	r0, #4294967295
 800788a:	e7e9      	b.n	8007860 <__ssputs_r+0x88>

0800788c <_svfiprintf_r>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	4698      	mov	r8, r3
 8007892:	898b      	ldrh	r3, [r1, #12]
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4607      	mov	r7, r0
 800789a:	460d      	mov	r5, r1
 800789c:	4614      	mov	r4, r2
 800789e:	d50e      	bpl.n	80078be <_svfiprintf_r+0x32>
 80078a0:	690b      	ldr	r3, [r1, #16]
 80078a2:	b963      	cbnz	r3, 80078be <_svfiprintf_r+0x32>
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	f7ff ff0b 	bl	80076c0 <_malloc_r>
 80078aa:	6028      	str	r0, [r5, #0]
 80078ac:	6128      	str	r0, [r5, #16]
 80078ae:	b920      	cbnz	r0, 80078ba <_svfiprintf_r+0x2e>
 80078b0:	230c      	movs	r3, #12
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e0d0      	b.n	8007a5c <_svfiprintf_r+0x1d0>
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	616b      	str	r3, [r5, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	2320      	movs	r3, #32
 80078c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078cc:	2330      	movs	r3, #48	; 0x30
 80078ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a74 <_svfiprintf_r+0x1e8>
 80078d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d6:	f04f 0901 	mov.w	r9, #1
 80078da:	4623      	mov	r3, r4
 80078dc:	469a      	mov	sl, r3
 80078de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e2:	b10a      	cbz	r2, 80078e8 <_svfiprintf_r+0x5c>
 80078e4:	2a25      	cmp	r2, #37	; 0x25
 80078e6:	d1f9      	bne.n	80078dc <_svfiprintf_r+0x50>
 80078e8:	ebba 0b04 	subs.w	fp, sl, r4
 80078ec:	d00b      	beq.n	8007906 <_svfiprintf_r+0x7a>
 80078ee:	465b      	mov	r3, fp
 80078f0:	4622      	mov	r2, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff ff6f 	bl	80077d8 <__ssputs_r>
 80078fa:	3001      	adds	r0, #1
 80078fc:	f000 80a9 	beq.w	8007a52 <_svfiprintf_r+0x1c6>
 8007900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007902:	445a      	add	r2, fp
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a1 	beq.w	8007a52 <_svfiprintf_r+0x1c6>
 8007910:	2300      	movs	r3, #0
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800791a:	f10a 0a01 	add.w	sl, sl, #1
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007926:	931a      	str	r3, [sp, #104]	; 0x68
 8007928:	4654      	mov	r4, sl
 800792a:	2205      	movs	r2, #5
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	4850      	ldr	r0, [pc, #320]	; (8007a74 <_svfiprintf_r+0x1e8>)
 8007932:	f7f8 fc75 	bl	8000220 <memchr>
 8007936:	9a04      	ldr	r2, [sp, #16]
 8007938:	b9d8      	cbnz	r0, 8007972 <_svfiprintf_r+0xe6>
 800793a:	06d0      	lsls	r0, r2, #27
 800793c:	bf44      	itt	mi
 800793e:	2320      	movmi	r3, #32
 8007940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007944:	0711      	lsls	r1, r2, #28
 8007946:	bf44      	itt	mi
 8007948:	232b      	movmi	r3, #43	; 0x2b
 800794a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794e:	f89a 3000 	ldrb.w	r3, [sl]
 8007952:	2b2a      	cmp	r3, #42	; 0x2a
 8007954:	d015      	beq.n	8007982 <_svfiprintf_r+0xf6>
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	4654      	mov	r4, sl
 800795a:	2000      	movs	r0, #0
 800795c:	f04f 0c0a 	mov.w	ip, #10
 8007960:	4621      	mov	r1, r4
 8007962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	2b09      	cmp	r3, #9
 800796a:	d94d      	bls.n	8007a08 <_svfiprintf_r+0x17c>
 800796c:	b1b0      	cbz	r0, 800799c <_svfiprintf_r+0x110>
 800796e:	9207      	str	r2, [sp, #28]
 8007970:	e014      	b.n	800799c <_svfiprintf_r+0x110>
 8007972:	eba0 0308 	sub.w	r3, r0, r8
 8007976:	fa09 f303 	lsl.w	r3, r9, r3
 800797a:	4313      	orrs	r3, r2
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	46a2      	mov	sl, r4
 8007980:	e7d2      	b.n	8007928 <_svfiprintf_r+0x9c>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9103      	str	r1, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfbb      	ittet	lt
 800798e:	425b      	neglt	r3, r3
 8007990:	f042 0202 	orrlt.w	r2, r2, #2
 8007994:	9307      	strge	r3, [sp, #28]
 8007996:	9307      	strlt	r3, [sp, #28]
 8007998:	bfb8      	it	lt
 800799a:	9204      	strlt	r2, [sp, #16]
 800799c:	7823      	ldrb	r3, [r4, #0]
 800799e:	2b2e      	cmp	r3, #46	; 0x2e
 80079a0:	d10c      	bne.n	80079bc <_svfiprintf_r+0x130>
 80079a2:	7863      	ldrb	r3, [r4, #1]
 80079a4:	2b2a      	cmp	r3, #42	; 0x2a
 80079a6:	d134      	bne.n	8007a12 <_svfiprintf_r+0x186>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9203      	str	r2, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b8:	3402      	adds	r4, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a84 <_svfiprintf_r+0x1f8>
 80079c0:	7821      	ldrb	r1, [r4, #0]
 80079c2:	2203      	movs	r2, #3
 80079c4:	4650      	mov	r0, sl
 80079c6:	f7f8 fc2b 	bl	8000220 <memchr>
 80079ca:	b138      	cbz	r0, 80079dc <_svfiprintf_r+0x150>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	eba0 000a 	sub.w	r0, r0, sl
 80079d2:	2240      	movs	r2, #64	; 0x40
 80079d4:	4082      	lsls	r2, r0
 80079d6:	4313      	orrs	r3, r2
 80079d8:	3401      	adds	r4, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e0:	4825      	ldr	r0, [pc, #148]	; (8007a78 <_svfiprintf_r+0x1ec>)
 80079e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e6:	2206      	movs	r2, #6
 80079e8:	f7f8 fc1a 	bl	8000220 <memchr>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d038      	beq.n	8007a62 <_svfiprintf_r+0x1d6>
 80079f0:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <_svfiprintf_r+0x1f0>)
 80079f2:	bb1b      	cbnz	r3, 8007a3c <_svfiprintf_r+0x1b0>
 80079f4:	9b03      	ldr	r3, [sp, #12]
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	3308      	adds	r3, #8
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a02:	4433      	add	r3, r6
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	e768      	b.n	80078da <_svfiprintf_r+0x4e>
 8007a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7a6      	b.n	8007960 <_svfiprintf_r+0xd4>
 8007a12:	2300      	movs	r3, #0
 8007a14:	3401      	adds	r4, #1
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f04f 0c0a 	mov.w	ip, #10
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	3a30      	subs	r2, #48	; 0x30
 8007a26:	2a09      	cmp	r2, #9
 8007a28:	d903      	bls.n	8007a32 <_svfiprintf_r+0x1a6>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0c6      	beq.n	80079bc <_svfiprintf_r+0x130>
 8007a2e:	9105      	str	r1, [sp, #20]
 8007a30:	e7c4      	b.n	80079bc <_svfiprintf_r+0x130>
 8007a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a36:	4604      	mov	r4, r0
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f0      	b.n	8007a1e <_svfiprintf_r+0x192>
 8007a3c:	ab03      	add	r3, sp, #12
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <_svfiprintf_r+0x1f4>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	4638      	mov	r0, r7
 8007a48:	f3af 8000 	nop.w
 8007a4c:	1c42      	adds	r2, r0, #1
 8007a4e:	4606      	mov	r6, r0
 8007a50:	d1d6      	bne.n	8007a00 <_svfiprintf_r+0x174>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	065b      	lsls	r3, r3, #25
 8007a56:	f53f af2d 	bmi.w	80078b4 <_svfiprintf_r+0x28>
 8007a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5c:	b01d      	add	sp, #116	; 0x74
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	462a      	mov	r2, r5
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <_svfiprintf_r+0x1f4>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f000 f879 	bl	8007b64 <_printf_i>
 8007a72:	e7eb      	b.n	8007a4c <_svfiprintf_r+0x1c0>
 8007a74:	08007fb8 	.word	0x08007fb8
 8007a78:	08007fc2 	.word	0x08007fc2
 8007a7c:	00000000 	.word	0x00000000
 8007a80:	080077d9 	.word	0x080077d9
 8007a84:	08007fbe 	.word	0x08007fbe

08007a88 <_printf_common>:
 8007a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	4699      	mov	r9, r3
 8007a90:	688a      	ldr	r2, [r1, #8]
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bfb8      	it	lt
 8007a9c:	4613      	movlt	r3, r2
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b10a      	cbz	r2, 8007aae <_printf_common+0x26>
 8007aaa:	3301      	adds	r3, #1
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	0699      	lsls	r1, r3, #26
 8007ab2:	bf42      	ittt	mi
 8007ab4:	6833      	ldrmi	r3, [r6, #0]
 8007ab6:	3302      	addmi	r3, #2
 8007ab8:	6033      	strmi	r3, [r6, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	f015 0506 	ands.w	r5, r5, #6
 8007ac0:	d106      	bne.n	8007ad0 <_printf_common+0x48>
 8007ac2:	f104 0a19 	add.w	sl, r4, #25
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	6832      	ldr	r2, [r6, #0]
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dc26      	bgt.n	8007b1e <_printf_common+0x96>
 8007ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ad4:	1e13      	subs	r3, r2, #0
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	0692      	lsls	r2, r2, #26
 8007ade:	d42b      	bmi.n	8007b38 <_printf_common+0xb0>
 8007ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	47c0      	blx	r8
 8007aea:	3001      	adds	r0, #1
 8007aec:	d01e      	beq.n	8007b2c <_printf_common+0xa4>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	f003 0306 	and.w	r3, r3, #6
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	bf02      	ittt	eq
 8007afa:	68e5      	ldreq	r5, [r4, #12]
 8007afc:	6833      	ldreq	r3, [r6, #0]
 8007afe:	1aed      	subeq	r5, r5, r3
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	bf0c      	ite	eq
 8007b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b08:	2500      	movne	r5, #0
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bfc4      	itt	gt
 8007b0e:	1a9b      	subgt	r3, r3, r2
 8007b10:	18ed      	addgt	r5, r5, r3
 8007b12:	2600      	movs	r6, #0
 8007b14:	341a      	adds	r4, #26
 8007b16:	42b5      	cmp	r5, r6
 8007b18:	d11a      	bne.n	8007b50 <_printf_common+0xc8>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e008      	b.n	8007b30 <_printf_common+0xa8>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4652      	mov	r2, sl
 8007b22:	4649      	mov	r1, r9
 8007b24:	4638      	mov	r0, r7
 8007b26:	47c0      	blx	r8
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d103      	bne.n	8007b34 <_printf_common+0xac>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b34:	3501      	adds	r5, #1
 8007b36:	e7c6      	b.n	8007ac6 <_printf_common+0x3e>
 8007b38:	18e1      	adds	r1, r4, r3
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	2030      	movs	r0, #48	; 0x30
 8007b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b42:	4422      	add	r2, r4
 8007b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	e7c7      	b.n	8007ae0 <_printf_common+0x58>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4622      	mov	r2, r4
 8007b54:	4649      	mov	r1, r9
 8007b56:	4638      	mov	r0, r7
 8007b58:	47c0      	blx	r8
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d0e6      	beq.n	8007b2c <_printf_common+0xa4>
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7d9      	b.n	8007b16 <_printf_common+0x8e>
	...

08007b64 <_printf_i>:
 8007b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	7e0f      	ldrb	r7, [r1, #24]
 8007b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b6c:	2f78      	cmp	r7, #120	; 0x78
 8007b6e:	4691      	mov	r9, r2
 8007b70:	4680      	mov	r8, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	469a      	mov	sl, r3
 8007b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b7a:	d807      	bhi.n	8007b8c <_printf_i+0x28>
 8007b7c:	2f62      	cmp	r7, #98	; 0x62
 8007b7e:	d80a      	bhi.n	8007b96 <_printf_i+0x32>
 8007b80:	2f00      	cmp	r7, #0
 8007b82:	f000 80d4 	beq.w	8007d2e <_printf_i+0x1ca>
 8007b86:	2f58      	cmp	r7, #88	; 0x58
 8007b88:	f000 80c0 	beq.w	8007d0c <_printf_i+0x1a8>
 8007b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b94:	e03a      	b.n	8007c0c <_printf_i+0xa8>
 8007b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b9a:	2b15      	cmp	r3, #21
 8007b9c:	d8f6      	bhi.n	8007b8c <_printf_i+0x28>
 8007b9e:	a101      	add	r1, pc, #4	; (adr r1, 8007ba4 <_printf_i+0x40>)
 8007ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007b8d 	.word	0x08007b8d
 8007bb0:	08007b8d 	.word	0x08007b8d
 8007bb4:	08007b8d 	.word	0x08007b8d
 8007bb8:	08007b8d 	.word	0x08007b8d
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007b8d 	.word	0x08007b8d
 8007bc4:	08007b8d 	.word	0x08007b8d
 8007bc8:	08007b8d 	.word	0x08007b8d
 8007bcc:	08007b8d 	.word	0x08007b8d
 8007bd0:	08007d15 	.word	0x08007d15
 8007bd4:	08007c3d 	.word	0x08007c3d
 8007bd8:	08007ccf 	.word	0x08007ccf
 8007bdc:	08007b8d 	.word	0x08007b8d
 8007be0:	08007b8d 	.word	0x08007b8d
 8007be4:	08007d37 	.word	0x08007d37
 8007be8:	08007b8d 	.word	0x08007b8d
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007b8d 	.word	0x08007b8d
 8007bf4:	08007b8d 	.word	0x08007b8d
 8007bf8:	08007cd7 	.word	0x08007cd7
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	1d1a      	adds	r2, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e09f      	b.n	8007d50 <_printf_i+0x1ec>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	0607      	lsls	r7, r0, #24
 8007c16:	f103 0104 	add.w	r1, r3, #4
 8007c1a:	6029      	str	r1, [r5, #0]
 8007c1c:	d501      	bpl.n	8007c22 <_printf_i+0xbe>
 8007c1e:	681e      	ldr	r6, [r3, #0]
 8007c20:	e003      	b.n	8007c2a <_printf_i+0xc6>
 8007c22:	0646      	lsls	r6, r0, #25
 8007c24:	d5fb      	bpl.n	8007c1e <_printf_i+0xba>
 8007c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	da03      	bge.n	8007c36 <_printf_i+0xd2>
 8007c2e:	232d      	movs	r3, #45	; 0x2d
 8007c30:	4276      	negs	r6, r6
 8007c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c36:	485a      	ldr	r0, [pc, #360]	; (8007da0 <_printf_i+0x23c>)
 8007c38:	230a      	movs	r3, #10
 8007c3a:	e012      	b.n	8007c62 <_printf_i+0xfe>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	1d19      	adds	r1, r3, #4
 8007c42:	6029      	str	r1, [r5, #0]
 8007c44:	0605      	lsls	r5, r0, #24
 8007c46:	d501      	bpl.n	8007c4c <_printf_i+0xe8>
 8007c48:	681e      	ldr	r6, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <_printf_i+0xee>
 8007c4c:	0641      	lsls	r1, r0, #25
 8007c4e:	d5fb      	bpl.n	8007c48 <_printf_i+0xe4>
 8007c50:	881e      	ldrh	r6, [r3, #0]
 8007c52:	4853      	ldr	r0, [pc, #332]	; (8007da0 <_printf_i+0x23c>)
 8007c54:	2f6f      	cmp	r7, #111	; 0x6f
 8007c56:	bf0c      	ite	eq
 8007c58:	2308      	moveq	r3, #8
 8007c5a:	230a      	movne	r3, #10
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c62:	6865      	ldr	r5, [r4, #4]
 8007c64:	60a5      	str	r5, [r4, #8]
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	bfa2      	ittt	ge
 8007c6a:	6821      	ldrge	r1, [r4, #0]
 8007c6c:	f021 0104 	bicge.w	r1, r1, #4
 8007c70:	6021      	strge	r1, [r4, #0]
 8007c72:	b90e      	cbnz	r6, 8007c78 <_printf_i+0x114>
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	d04b      	beq.n	8007d10 <_printf_i+0x1ac>
 8007c78:	4615      	mov	r5, r2
 8007c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c82:	5dc7      	ldrb	r7, [r0, r7]
 8007c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c88:	4637      	mov	r7, r6
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	460e      	mov	r6, r1
 8007c8e:	d9f4      	bls.n	8007c7a <_printf_i+0x116>
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d10b      	bne.n	8007cac <_printf_i+0x148>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	07de      	lsls	r6, r3, #31
 8007c98:	d508      	bpl.n	8007cac <_printf_i+0x148>
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	bfde      	ittt	le
 8007ca2:	2330      	movle	r3, #48	; 0x30
 8007ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cac:	1b52      	subs	r2, r2, r5
 8007cae:	6122      	str	r2, [r4, #16]
 8007cb0:	f8cd a000 	str.w	sl, [sp]
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	aa03      	add	r2, sp, #12
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7ff fee4 	bl	8007a88 <_printf_common>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d14a      	bne.n	8007d5a <_printf_i+0x1f6>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	b004      	add	sp, #16
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	4833      	ldr	r0, [pc, #204]	; (8007da4 <_printf_i+0x240>)
 8007cd8:	2778      	movs	r7, #120	; 0x78
 8007cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	061f      	lsls	r7, r3, #24
 8007ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ce8:	d402      	bmi.n	8007cf0 <_printf_i+0x18c>
 8007cea:	065f      	lsls	r7, r3, #25
 8007cec:	bf48      	it	mi
 8007cee:	b2b6      	uxthmi	r6, r6
 8007cf0:	07df      	lsls	r7, r3, #31
 8007cf2:	bf48      	it	mi
 8007cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf8:	6029      	str	r1, [r5, #0]
 8007cfa:	bf48      	it	mi
 8007cfc:	6023      	strmi	r3, [r4, #0]
 8007cfe:	b91e      	cbnz	r6, 8007d08 <_printf_i+0x1a4>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	f023 0320 	bic.w	r3, r3, #32
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	2310      	movs	r3, #16
 8007d0a:	e7a7      	b.n	8007c5c <_printf_i+0xf8>
 8007d0c:	4824      	ldr	r0, [pc, #144]	; (8007da0 <_printf_i+0x23c>)
 8007d0e:	e7e4      	b.n	8007cda <_printf_i+0x176>
 8007d10:	4615      	mov	r5, r2
 8007d12:	e7bd      	b.n	8007c90 <_printf_i+0x12c>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	6826      	ldr	r6, [r4, #0]
 8007d18:	6961      	ldr	r1, [r4, #20]
 8007d1a:	1d18      	adds	r0, r3, #4
 8007d1c:	6028      	str	r0, [r5, #0]
 8007d1e:	0635      	lsls	r5, r6, #24
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0x1c4>
 8007d24:	6019      	str	r1, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0x1ca>
 8007d28:	0670      	lsls	r0, r6, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0x1c0>
 8007d2c:	8019      	strh	r1, [r3, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	4615      	mov	r5, r2
 8007d34:	e7bc      	b.n	8007cb0 <_printf_i+0x14c>
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	681d      	ldr	r5, [r3, #0]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7f8 fa6c 	bl	8000220 <memchr>
 8007d48:	b108      	cbz	r0, 8007d4e <_printf_i+0x1ea>
 8007d4a:	1b40      	subs	r0, r0, r5
 8007d4c:	6060      	str	r0, [r4, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	6123      	str	r3, [r4, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d58:	e7aa      	b.n	8007cb0 <_printf_i+0x14c>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0ad      	beq.n	8007cc4 <_printf_i+0x160>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d413      	bmi.n	8007d96 <_printf_i+0x232>
 8007d6e:	68e0      	ldr	r0, [r4, #12]
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	4298      	cmp	r0, r3
 8007d74:	bfb8      	it	lt
 8007d76:	4618      	movlt	r0, r3
 8007d78:	e7a6      	b.n	8007cc8 <_printf_i+0x164>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4649      	mov	r1, r9
 8007d80:	4640      	mov	r0, r8
 8007d82:	47d0      	blx	sl
 8007d84:	3001      	adds	r0, #1
 8007d86:	d09d      	beq.n	8007cc4 <_printf_i+0x160>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	9903      	ldr	r1, [sp, #12]
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dcf2      	bgt.n	8007d7a <_printf_i+0x216>
 8007d94:	e7eb      	b.n	8007d6e <_printf_i+0x20a>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f104 0619 	add.w	r6, r4, #25
 8007d9c:	e7f5      	b.n	8007d8a <_printf_i+0x226>
 8007d9e:	bf00      	nop
 8007da0:	08007fc9 	.word	0x08007fc9
 8007da4:	08007fda 	.word	0x08007fda

08007da8 <memmove>:
 8007da8:	4288      	cmp	r0, r1
 8007daa:	b510      	push	{r4, lr}
 8007dac:	eb01 0402 	add.w	r4, r1, r2
 8007db0:	d902      	bls.n	8007db8 <memmove+0x10>
 8007db2:	4284      	cmp	r4, r0
 8007db4:	4623      	mov	r3, r4
 8007db6:	d807      	bhi.n	8007dc8 <memmove+0x20>
 8007db8:	1e43      	subs	r3, r0, #1
 8007dba:	42a1      	cmp	r1, r4
 8007dbc:	d008      	beq.n	8007dd0 <memmove+0x28>
 8007dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dc6:	e7f8      	b.n	8007dba <memmove+0x12>
 8007dc8:	4402      	add	r2, r0
 8007dca:	4601      	mov	r1, r0
 8007dcc:	428a      	cmp	r2, r1
 8007dce:	d100      	bne.n	8007dd2 <memmove+0x2a>
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dda:	e7f7      	b.n	8007dcc <memmove+0x24>

08007ddc <_sbrk_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	; (8007df8 <_sbrk_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fa f94a 	bl	8002080 <_sbrk>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_sbrk_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_sbrk_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000854 	.word	0x20000854

08007dfc <memcpy>:
 8007dfc:	440a      	add	r2, r1
 8007dfe:	4291      	cmp	r1, r2
 8007e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e04:	d100      	bne.n	8007e08 <memcpy+0xc>
 8007e06:	4770      	bx	lr
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e12:	4291      	cmp	r1, r2
 8007e14:	d1f9      	bne.n	8007e0a <memcpy+0xe>
 8007e16:	bd10      	pop	{r4, pc}

08007e18 <_realloc_r>:
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4614      	mov	r4, r2
 8007e20:	460e      	mov	r6, r1
 8007e22:	b921      	cbnz	r1, 8007e2e <_realloc_r+0x16>
 8007e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4611      	mov	r1, r2
 8007e2a:	f7ff bc49 	b.w	80076c0 <_malloc_r>
 8007e2e:	b92a      	cbnz	r2, 8007e3c <_realloc_r+0x24>
 8007e30:	f7ff fbda 	bl	80075e8 <_free_r>
 8007e34:	4625      	mov	r5, r4
 8007e36:	4628      	mov	r0, r5
 8007e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e3c:	f000 f81b 	bl	8007e76 <_malloc_usable_size_r>
 8007e40:	4284      	cmp	r4, r0
 8007e42:	4607      	mov	r7, r0
 8007e44:	d802      	bhi.n	8007e4c <_realloc_r+0x34>
 8007e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e4a:	d812      	bhi.n	8007e72 <_realloc_r+0x5a>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4640      	mov	r0, r8
 8007e50:	f7ff fc36 	bl	80076c0 <_malloc_r>
 8007e54:	4605      	mov	r5, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0ed      	beq.n	8007e36 <_realloc_r+0x1e>
 8007e5a:	42bc      	cmp	r4, r7
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4631      	mov	r1, r6
 8007e60:	bf28      	it	cs
 8007e62:	463a      	movcs	r2, r7
 8007e64:	f7ff ffca 	bl	8007dfc <memcpy>
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7ff fbbc 	bl	80075e8 <_free_r>
 8007e70:	e7e1      	b.n	8007e36 <_realloc_r+0x1e>
 8007e72:	4635      	mov	r5, r6
 8007e74:	e7df      	b.n	8007e36 <_realloc_r+0x1e>

08007e76 <_malloc_usable_size_r>:
 8007e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7a:	1f18      	subs	r0, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfbc      	itt	lt
 8007e80:	580b      	ldrlt	r3, [r1, r0]
 8007e82:	18c0      	addlt	r0, r0, r3
 8007e84:	4770      	bx	lr
	...

08007e88 <_init>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr

08007e94 <_fini>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr
