
SensorBox24Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000916c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  20000060  08009584  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  08009584  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b699  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c6  00000000  00000000  0003b76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125a  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002191b  00000000  00000000  0004132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b096  00000000  00000000  00062c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cab  00000000  00000000  0007dcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b2c  00000000  00000000  0015e988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001654b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009334 	.word	0x08009334

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08009334 	.word	0x08009334

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <decode_uart>:
#include "functions.h"
#include "string.h"



void decode_uart(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
	uint8_t str1[10];
	uint8_t str2[4];
	uint8_t str3[3];
	uint8_t number;
	uint8_t string_counter = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	77fb      	strb	r3, [r7, #31]
	uint8_t string_determine = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	77bb      	strb	r3, [r7, #30]
	for(int i = 0; i <30; i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	e07a      	b.n	80006e6 <decode_uart+0x10a>
		if(string_determine == 1){
 80005f0:	7fbb      	ldrb	r3, [r7, #30]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d124      	bne.n	8000640 <decode_uart+0x64>
			if(uart_rx_buffer[i] != 32){
 80005f6:	4a6f      	ldr	r2, [pc, #444]	; (80007b4 <decode_uart+0x1d8>)
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d012      	beq.n	8000628 <decode_uart+0x4c>
				if(uart_rx_buffer[i] != 0){
 8000602:	4a6c      	ldr	r2, [pc, #432]	; (80007b4 <decode_uart+0x1d8>)
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d063      	beq.n	80006d6 <decode_uart+0xfa>
					str1[string_counter] = uart_rx_buffer[i];
 800060e:	7ffb      	ldrb	r3, [r7, #31]
 8000610:	4968      	ldr	r1, [pc, #416]	; (80007b4 <decode_uart+0x1d8>)
 8000612:	69ba      	ldr	r2, [r7, #24]
 8000614:	440a      	add	r2, r1
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	3320      	adds	r3, #32
 800061a:	443b      	add	r3, r7
 800061c:	f803 2c14 	strb.w	r2, [r3, #-20]
					string_counter++;
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	3301      	adds	r3, #1
 8000624:	77fb      	strb	r3, [r7, #31]
 8000626:	e056      	b.n	80006d6 <decode_uart+0xfa>
				}
			}else{
				str1[string_counter] = 0;
 8000628:	7ffb      	ldrb	r3, [r7, #31]
 800062a:	3320      	adds	r3, #32
 800062c:	443b      	add	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	f803 2c14 	strb.w	r2, [r3, #-20]
				string_determine++;
 8000634:	7fbb      	ldrb	r3, [r7, #30]
 8000636:	3301      	adds	r3, #1
 8000638:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	77fb      	strb	r3, [r7, #31]
 800063e:	e04a      	b.n	80006d6 <decode_uart+0xfa>
			}
		}else if(string_determine == 2){
 8000640:	7fbb      	ldrb	r3, [r7, #30]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d124      	bne.n	8000690 <decode_uart+0xb4>
			if(uart_rx_buffer[i] != 32){
 8000646:	4a5b      	ldr	r2, [pc, #364]	; (80007b4 <decode_uart+0x1d8>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b20      	cmp	r3, #32
 8000650:	d012      	beq.n	8000678 <decode_uart+0x9c>
				if(uart_rx_buffer[i] != 0){
 8000652:	4a58      	ldr	r2, [pc, #352]	; (80007b4 <decode_uart+0x1d8>)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d03b      	beq.n	80006d6 <decode_uart+0xfa>
					str2[string_counter] = uart_rx_buffer[i];
 800065e:	7ffb      	ldrb	r3, [r7, #31]
 8000660:	4954      	ldr	r1, [pc, #336]	; (80007b4 <decode_uart+0x1d8>)
 8000662:	69ba      	ldr	r2, [r7, #24]
 8000664:	440a      	add	r2, r1
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	3320      	adds	r3, #32
 800066a:	443b      	add	r3, r7
 800066c:	f803 2c18 	strb.w	r2, [r3, #-24]
					string_counter++;
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	3301      	adds	r3, #1
 8000674:	77fb      	strb	r3, [r7, #31]
 8000676:	e02e      	b.n	80006d6 <decode_uart+0xfa>
				}
			}else{
				str2[string_counter] = 0;
 8000678:	7ffb      	ldrb	r3, [r7, #31]
 800067a:	3320      	adds	r3, #32
 800067c:	443b      	add	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	f803 2c18 	strb.w	r2, [r3, #-24]
				string_determine++;
 8000684:	7fbb      	ldrb	r3, [r7, #30]
 8000686:	3301      	adds	r3, #1
 8000688:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	77fb      	strb	r3, [r7, #31]
 800068e:	e022      	b.n	80006d6 <decode_uart+0xfa>
			}
		}else{
			if(uart_rx_buffer[i] != 32){
 8000690:	4a48      	ldr	r2, [pc, #288]	; (80007b4 <decode_uart+0x1d8>)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b20      	cmp	r3, #32
 800069a:	d012      	beq.n	80006c2 <decode_uart+0xe6>
				if(uart_rx_buffer[i] != 0){
 800069c:	4a45      	ldr	r2, [pc, #276]	; (80007b4 <decode_uart+0x1d8>)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d016      	beq.n	80006d6 <decode_uart+0xfa>
					str3[string_counter] = uart_rx_buffer[i];
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	4942      	ldr	r1, [pc, #264]	; (80007b4 <decode_uart+0x1d8>)
 80006ac:	69ba      	ldr	r2, [r7, #24]
 80006ae:	440a      	add	r2, r1
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	3320      	adds	r3, #32
 80006b4:	443b      	add	r3, r7
 80006b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
					string_counter++;
 80006ba:	7ffb      	ldrb	r3, [r7, #31]
 80006bc:	3301      	adds	r3, #1
 80006be:	77fb      	strb	r3, [r7, #31]
 80006c0:	e009      	b.n	80006d6 <decode_uart+0xfa>
				}
			}else{
				str3[string_counter] = 0;
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	3320      	adds	r3, #32
 80006c6:	443b      	add	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
				string_determine = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	77bb      	strb	r3, [r7, #30]
				string_counter = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	77fb      	strb	r3, [r7, #31]
			}
		}
		uart_rx_buffer[i] = 0;
 80006d6:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <decode_uart+0x1d8>)
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	4413      	add	r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <30; i++){
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	3301      	adds	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	2b1d      	cmp	r3, #29
 80006ea:	dd81      	ble.n	80005f0 <decode_uart+0x14>
	}

	if(strcmp(str1,"PWM") == 0){
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4931      	ldr	r1, [pc, #196]	; (80007b8 <decode_uart+0x1dc>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fd94 	bl	8000220 <strcmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d122      	bne.n	8000744 <decode_uart+0x168>
		if(strcmp(str2,"READ") == 0){
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <decode_uart+0x1e0>)
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd8b 	bl	8000220 <strcmp>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <decode_uart+0x13a>
			PWM();
 8000710:	f000 f862 	bl	80007d8 <PWM>
 8000714:	e047      	b.n	80007a6 <decode_uart+0x1ca>
		}else if(strcmp(str2,"SET") == 0){
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4929      	ldr	r1, [pc, #164]	; (80007c0 <decode_uart+0x1e4>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d104      	bne.n	8000732 <decode_uart+0x156>
			PWM_set(number);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8b4 	bl	8000898 <PWM_set>
 8000730:	e039      	b.n	80007a6 <decode_uart+0x1ca>
		}else{
			print_out(-1,"\r\nERR", data_output_switch);
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <decode_uart+0x1e8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	4923      	ldr	r1, [pc, #140]	; (80007c8 <decode_uart+0x1ec>)
 800073a:	f04f 30ff 	mov.w	r0, #4294967295
 800073e:	f000 fc45 	bl	8000fcc <print_out>
 8000742:	e030      	b.n	80007a6 <decode_uart+0x1ca>
		}
	}else if(strcmp(str1, "OUTPUT\0") == 0){
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4920      	ldr	r1, [pc, #128]	; (80007cc <decode_uart+0x1f0>)
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd68 	bl	8000220 <strcmp>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d11f      	bne.n	8000796 <decode_uart+0x1ba>
		if(strcmp(str2,"READ") == 0){
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4918      	ldr	r1, [pc, #96]	; (80007bc <decode_uart+0x1e0>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd5f 	bl	8000220 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <decode_uart+0x196>
			OUT_READ(number);
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f86a 	bl	8000844 <OUT_READ>
 8000770:	e019      	b.n	80007a6 <decode_uart+0x1ca>
		}else if(strcmp(str2,"SET") == 0){
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4912      	ldr	r1, [pc, #72]	; (80007c0 <decode_uart+0x1e4>)
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd51 	bl	8000220 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d010      	beq.n	80007a6 <decode_uart+0x1ca>
			//TODO bit set
		}else{
			print_out(-1,"\r\nERR", data_output_switch);
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <decode_uart+0x1e8>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	490f      	ldr	r1, [pc, #60]	; (80007c8 <decode_uart+0x1ec>)
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f000 fc1c 	bl	8000fcc <print_out>
 8000794:	e007      	b.n	80007a6 <decode_uart+0x1ca>
		}
	}else{
		print_out(-1,"ERR", data_output_switch);
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <decode_uart+0x1e8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <decode_uart+0x1f4>)
 800079e:	f04f 30ff 	mov.w	r0, #4294967295
 80007a2:	f000 fc13 	bl	8000fcc <print_out>
		PWM_set();
	}else{
		print_out(-1, "!!WRONG COMMAND!!", data_output_switch);
	}*/

	command_received_flag = 0;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <decode_uart+0x1f8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000075c 	.word	0x2000075c
 80007b8:	0800934c 	.word	0x0800934c
 80007bc:	08009350 	.word	0x08009350
 80007c0:	08009358 	.word	0x08009358
 80007c4:	20000000 	.word	0x20000000
 80007c8:	0800935c 	.word	0x0800935c
 80007cc:	08009364 	.word	0x08009364
 80007d0:	0800936c 	.word	0x0800936c
 80007d4:	2000077a 	.word	0x2000077a

080007d8 <PWM>:

void PWM(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	print_out(PWM_width[0], "PWM_1 PULSE WIDTH",data_output_switch);
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <PWM+0x50>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <PWM+0x54>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4911      	ldr	r1, [pc, #68]	; (8000830 <PWM+0x58>)
 80007ea:	f000 fbef 	bl	8000fcc <print_out>
	print_out(PWM_speed[0], "PWM_1 frequency",data_output_switch);
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <PWM+0x5c>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <PWM+0x54>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	490f      	ldr	r1, [pc, #60]	; (8000838 <PWM+0x60>)
 80007fc:	f000 fbe6 	bl	8000fcc <print_out>
	print_out(PWM_width[1], "PWM_2 PULSE WIDTH",data_output_switch);
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <PWM+0x50>)
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	4618      	mov	r0, r3
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <PWM+0x54>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	490b      	ldr	r1, [pc, #44]	; (800083c <PWM+0x64>)
 800080e:	f000 fbdd 	bl	8000fcc <print_out>
	print_out(PWM_speed[1], "PWM_2 frequency",data_output_switch);
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <PWM+0x5c>)
 8000814:	885b      	ldrh	r3, [r3, #2]
 8000816:	4618      	mov	r0, r3
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <PWM+0x54>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <PWM+0x68>)
 8000820:	f000 fbd4 	bl	8000fcc <print_out>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000788 	.word	0x20000788
 800082c:	20000000 	.word	0x20000000
 8000830:	08009370 	.word	0x08009370
 8000834:	2000078c 	.word	0x2000078c
 8000838:	08009384 	.word	0x08009384
 800083c:	08009394 	.word	0x08009394
 8000840:	080093a8 	.word	0x080093a8

08000844 <OUT_READ>:

void OUT_READ(uint8_t value){
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t status_bit;
	char msg[8];
		status_bit = check_bit(Default_Switch_State, value+1);
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <OUT_READ+0x48>)
 8000850:	781a      	ldrb	r2, [r3, #0]
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	3301      	adds	r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4610      	mov	r0, r2
 800085c:	f000 fc4c 	bl	80010f8 <check_bit>
 8000860:	4603      	mov	r3, r0
 8000862:	75fb      	strb	r3, [r7, #23]
		sprintf(msg,"OUTPUT %d", value+1);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4908      	ldr	r1, [pc, #32]	; (8000890 <OUT_READ+0x4c>)
 800086e:	4618      	mov	r0, r3
 8000870:	f008 f8bc 	bl	80089ec <siprintf>
		print_out(status_bit,msg, data_output_switch);
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <OUT_READ+0x50>)
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	f107 010c 	add.w	r1, r7, #12
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fba4 	bl	8000fcc <print_out>
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000077f 	.word	0x2000077f
 8000890:	080093b8 	.word	0x080093b8
 8000894:	20000000 	.word	0x20000000

08000898 <PWM_set>:

//TODO implement separating numbers from command
void PWM_set(uint8_t value){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	//set_pwm(htim1, value);
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <Config_Setup>:
#include "main.h"
#include "config.h"

void Config_Setup(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
#if ID == 1

		Config_1();
 80008b2:	f000 f803 	bl	80008bc <Config_1>
#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_3();

#endif
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <Config_1>:

void Config_1(void){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

	//OUTPUT 1 in mA
	WC_1_1 = 1900;
 80008c0:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <Config_1+0x17c>)
 80008c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80008c6:	801a      	strh	r2, [r3, #0]
	OC_1_1 = 2050;
 80008c8:	4b5c      	ldr	r3, [pc, #368]	; (8000a3c <Config_1+0x180>)
 80008ca:	f640 0202 	movw	r2, #2050	; 0x802
 80008ce:	801a      	strh	r2, [r3, #0]
	UC_1_1 = 1800;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <Config_1+0x184>)
 80008d2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80008d6:	801a      	strh	r2, [r3, #0]

	//OUTPUT 2 in mA
	WC_2_1 = 1900;
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <Config_1+0x188>)
 80008da:	f240 726c 	movw	r2, #1900	; 0x76c
 80008de:	801a      	strh	r2, [r3, #0]
	OC_2_1 = 2050;
 80008e0:	4b59      	ldr	r3, [pc, #356]	; (8000a48 <Config_1+0x18c>)
 80008e2:	f640 0202 	movw	r2, #2050	; 0x802
 80008e6:	801a      	strh	r2, [r3, #0]
	UC_2_1 = 1800;
 80008e8:	4b58      	ldr	r3, [pc, #352]	; (8000a4c <Config_1+0x190>)
 80008ea:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80008ee:	801a      	strh	r2, [r3, #0]

	//OUTPUT 3 in mA
	WC_3_1 = 1900;
 80008f0:	4b57      	ldr	r3, [pc, #348]	; (8000a50 <Config_1+0x194>)
 80008f2:	f240 726c 	movw	r2, #1900	; 0x76c
 80008f6:	801a      	strh	r2, [r3, #0]
	OC_3_1 = 2050;
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <Config_1+0x198>)
 80008fa:	f640 0202 	movw	r2, #2050	; 0x802
 80008fe:	801a      	strh	r2, [r3, #0]
	UC_3_1 = 1800;
 8000900:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <Config_1+0x19c>)
 8000902:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000906:	801a      	strh	r2, [r3, #0]

	//OUTPUT 4 in mA
	WC_4_1 = 1900;
 8000908:	4b54      	ldr	r3, [pc, #336]	; (8000a5c <Config_1+0x1a0>)
 800090a:	f240 726c 	movw	r2, #1900	; 0x76c
 800090e:	801a      	strh	r2, [r3, #0]
	OC_4_1 = 2050;
 8000910:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <Config_1+0x1a4>)
 8000912:	f640 0202 	movw	r2, #2050	; 0x802
 8000916:	801a      	strh	r2, [r3, #0]
	UC_4_1 = 1800;
 8000918:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <Config_1+0x1a8>)
 800091a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800091e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 5 in mA
	WC_1_2 = 1900;
 8000920:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <Config_1+0x1ac>)
 8000922:	f240 726c 	movw	r2, #1900	; 0x76c
 8000926:	801a      	strh	r2, [r3, #0]
	OC_1_2 = 2050;
 8000928:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <Config_1+0x1b0>)
 800092a:	f640 0202 	movw	r2, #2050	; 0x802
 800092e:	801a      	strh	r2, [r3, #0]
	UC_1_2 = 1800;
 8000930:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <Config_1+0x1b4>)
 8000932:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000936:	801a      	strh	r2, [r3, #0]

	//OUTPUT 6 in mA
	WC_2_2 = 1900;
 8000938:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <Config_1+0x1b8>)
 800093a:	f240 726c 	movw	r2, #1900	; 0x76c
 800093e:	801a      	strh	r2, [r3, #0]
	OC_2_2 = 2050;
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <Config_1+0x1bc>)
 8000942:	f640 0202 	movw	r2, #2050	; 0x802
 8000946:	801a      	strh	r2, [r3, #0]
	UC_2_2 = 1800;
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <Config_1+0x1c0>)
 800094a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800094e:	801a      	strh	r2, [r3, #0]

	//OUTPUT 7 in mA
	WC_3_2 = 1900;
 8000950:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <Config_1+0x1c4>)
 8000952:	f240 726c 	movw	r2, #1900	; 0x76c
 8000956:	801a      	strh	r2, [r3, #0]
	OC_3_2 = 2050;
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <Config_1+0x1c8>)
 800095a:	f640 0202 	movw	r2, #2050	; 0x802
 800095e:	801a      	strh	r2, [r3, #0]
	UC_3_2 = 1800;
 8000960:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <Config_1+0x1cc>)
 8000962:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000966:	801a      	strh	r2, [r3, #0]

	//OUTPUT 8 in mA
	WC_4_2 = 1900;
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <Config_1+0x1d0>)
 800096a:	f240 726c 	movw	r2, #1900	; 0x76c
 800096e:	801a      	strh	r2, [r3, #0]
	OC_4_2 = 2050;
 8000970:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <Config_1+0x1d4>)
 8000972:	f640 0202 	movw	r2, #2050	; 0x802
 8000976:	801a      	strh	r2, [r3, #0]
	UC_4_2 = 1800;
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <Config_1+0x1d8>)
 800097a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800097e:	801a      	strh	r2, [r3, #0]

	Default_Switch_State = 0b00011011; //each bit represent one output [8,7,6,5,4,3,2,1]
 8000980:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <Config_1+0x1dc>)
 8000982:	221b      	movs	r2, #27
 8000984:	701a      	strb	r2, [r3, #0]
	PWM_out_enable = 0b00;
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <Config_1+0x1e0>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

	//clock is xy MHz, thus set it such that xy/(prescaler*100) is going to be the frequency
	PWM_Prescalers[0] = 0;
 800098c:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <Config_1+0x1e4>)
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
	PWM_Prescalers[1] = 0;
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <Config_1+0x1e4>)
 8000994:	2200      	movs	r2, #0
 8000996:	805a      	strh	r2, [r3, #2]

	if(PWM_out_enable >> 2 != 0){
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <Config_1+0x1e0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00c      	beq.n	80009be <Config_1+0x102>
		PWM_speed[0] = 150000000/(PWM_Prescalers[0]*100);
 80009a4:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <Config_1+0x1e4>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
 80009b0:	4a3c      	ldr	r2, [pc, #240]	; (8000aa4 <Config_1+0x1e8>)
 80009b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <Config_1+0x1ec>)
 80009ba:	801a      	strh	r2, [r3, #0]
 80009bc:	e002      	b.n	80009c4 <Config_1+0x108>
	}else{
		PWM_speed[0] = 0;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <Config_1+0x1ec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
	}
	if(PWM_out_enable >> 1 != 0){
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <Config_1+0x1e0>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <Config_1+0x12e>
		PWM_speed[1] = 150000000/(PWM_Prescalers[1]*100);
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <Config_1+0x1e4>)
 80009d2:	885b      	ldrh	r3, [r3, #2]
 80009d4:	461a      	mov	r2, r3
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	4a31      	ldr	r2, [pc, #196]	; (8000aa4 <Config_1+0x1e8>)
 80009de:	fb92 f3f3 	sdiv	r3, r2, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <Config_1+0x1ec>)
 80009e6:	805a      	strh	r2, [r3, #2]
 80009e8:	e002      	b.n	80009f0 <Config_1+0x134>
	}else{
		PWM_speed[1] = 0;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <Config_1+0x1ec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	805a      	strh	r2, [r3, #2]
	}

	//Duty cycle 0-100%
	PWM_width[0] = 0;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <Config_1+0x1f0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	801a      	strh	r2, [r3, #0]
	PWM_width[1] = 0;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <Config_1+0x1f0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	805a      	strh	r2, [r3, #2]

	CAN_id[0] = 0x01; //CAN ID for output 1
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <Config_1+0x1f4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
	CAN_id[1] = 0x02; //CAN ID for output 2
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <Config_1+0x1f4>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	705a      	strb	r2, [r3, #1]
	CAN_id[2] = 0x03; //CAN ID for output 3
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <Config_1+0x1f4>)
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	709a      	strb	r2, [r3, #2]
	CAN_id[3] = 0x04; //CAN ID for output 4
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <Config_1+0x1f4>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	70da      	strb	r2, [r3, #3]
	CAN_id[4] = 0x05; //CAN ID for output 5
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <Config_1+0x1f4>)
 8000a16:	2205      	movs	r2, #5
 8000a18:	711a      	strb	r2, [r3, #4]
	CAN_id[5] = 0x06; //CAN ID for output 6
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <Config_1+0x1f4>)
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	715a      	strb	r2, [r3, #5]
	CAN_id[6] = 0x07; //CAN ID for output 7
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <Config_1+0x1f4>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	719a      	strb	r2, [r3, #6]
	CAN_id[7] = 0x08; //CAN ID for output 8
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <Config_1+0x1f4>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	71da      	strb	r2, [r3, #7]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000072c 	.word	0x2000072c
 8000a3c:	2000072e 	.word	0x2000072e
 8000a40:	20000730 	.word	0x20000730
 8000a44:	20000732 	.word	0x20000732
 8000a48:	20000734 	.word	0x20000734
 8000a4c:	20000736 	.word	0x20000736
 8000a50:	20000738 	.word	0x20000738
 8000a54:	2000073a 	.word	0x2000073a
 8000a58:	2000073c 	.word	0x2000073c
 8000a5c:	2000073e 	.word	0x2000073e
 8000a60:	20000740 	.word	0x20000740
 8000a64:	20000742 	.word	0x20000742
 8000a68:	20000744 	.word	0x20000744
 8000a6c:	20000746 	.word	0x20000746
 8000a70:	20000748 	.word	0x20000748
 8000a74:	2000074a 	.word	0x2000074a
 8000a78:	2000074c 	.word	0x2000074c
 8000a7c:	2000074e 	.word	0x2000074e
 8000a80:	20000750 	.word	0x20000750
 8000a84:	20000752 	.word	0x20000752
 8000a88:	20000754 	.word	0x20000754
 8000a8c:	20000756 	.word	0x20000756
 8000a90:	20000758 	.word	0x20000758
 8000a94:	2000075a 	.word	0x2000075a
 8000a98:	2000077f 	.word	0x2000077f
 8000a9c:	20000780 	.word	0x20000780
 8000aa0:	20000784 	.word	0x20000784
 8000aa4:	08f0d180 	.word	0x08f0d180
 8000aa8:	2000078c 	.word	0x2000078c
 8000aac:	20000788 	.word	0x20000788
 8000ab0:	20000790 	.word	0x20000790

08000ab4 <CS_process>:
#include "main.h"
#include "stm32g4xx_hal.h"
#include "stdio.h"


void CS_process(){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
	//4031 == 3.3V since 12bit, got to pick shunt resistor according to this
	IN1_1_PROC = IN1_1_CS[0];
 8000aba:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <CS_process+0x148>)
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <CS_process+0x14c>)
 8000ac0:	801a      	strh	r2, [r3, #0]
	IN2_1_PROC = IN2_1_CS[0];
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <CS_process+0x150>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	4b50      	ldr	r3, [pc, #320]	; (8000c08 <CS_process+0x154>)
 8000ac8:	801a      	strh	r2, [r3, #0]
	IN3_1_PROC = IN3_1_CS[0];
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <CS_process+0x158>)
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <CS_process+0x15c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	IN4_1_PROC = IN4_1_CS[0];
 8000ad2:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <CS_process+0x160>)
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <CS_process+0x164>)
 8000ad8:	801a      	strh	r2, [r3, #0]
	IN1_2_PROC = IN1_2_CS[0];
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <CS_process+0x168>)
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <CS_process+0x16c>)
 8000ae0:	801a      	strh	r2, [r3, #0]
	IN2_2_PROC = IN2_2_CS[0];
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <CS_process+0x170>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <CS_process+0x174>)
 8000ae8:	801a      	strh	r2, [r3, #0]
	IN3_2_PROC = IN3_2_CS[0];
 8000aea:	4b50      	ldr	r3, [pc, #320]	; (8000c2c <CS_process+0x178>)
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <CS_process+0x17c>)
 8000af0:	801a      	strh	r2, [r3, #0]
	IN4_2_PROC = IN4_2_CS[0];
 8000af2:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <CS_process+0x180>)
 8000af4:	881a      	ldrh	r2, [r3, #0]
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <CS_process+0x184>)
 8000af8:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000afa:	2301      	movs	r3, #1
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e072      	b.n	8000be6 <CS_process+0x132>
		IN1_1_PROC = (IN1_1_PROC + IN1_1_CS[i])/2;
 8000b00:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <CS_process+0x14c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <CS_process+0x148>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b0e:	440b      	add	r3, r1
 8000b10:	0fda      	lsrs	r2, r3, #31
 8000b12:	4413      	add	r3, r2
 8000b14:	105b      	asrs	r3, r3, #1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <CS_process+0x14c>)
 8000b1a:	801a      	strh	r2, [r3, #0]
		IN2_1_PROC = (IN2_1_PROC + IN2_1_CS[i])/2;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <CS_process+0x154>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4a38      	ldr	r2, [pc, #224]	; (8000c04 <CS_process+0x150>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2a:	440b      	add	r3, r1
 8000b2c:	0fda      	lsrs	r2, r3, #31
 8000b2e:	4413      	add	r3, r2
 8000b30:	105b      	asrs	r3, r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <CS_process+0x154>)
 8000b36:	801a      	strh	r2, [r3, #0]
		IN3_1_PROC = (IN3_1_PROC + IN3_1_CS[i])/2;
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <CS_process+0x15c>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4a33      	ldr	r2, [pc, #204]	; (8000c0c <CS_process+0x158>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b46:	440b      	add	r3, r1
 8000b48:	0fda      	lsrs	r2, r3, #31
 8000b4a:	4413      	add	r3, r2
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <CS_process+0x15c>)
 8000b52:	801a      	strh	r2, [r3, #0]
		IN4_1_PROC = (IN4_1_PROC + IN4_1_CS[i])/2;
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <CS_process+0x164>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <CS_process+0x160>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b62:	440b      	add	r3, r1
 8000b64:	0fda      	lsrs	r2, r3, #31
 8000b66:	4413      	add	r3, r2
 8000b68:	105b      	asrs	r3, r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <CS_process+0x164>)
 8000b6e:	801a      	strh	r2, [r3, #0]
		IN1_2_PROC = (IN1_2_PROC + IN1_2_CS[i])/2;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <CS_process+0x16c>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <CS_process+0x168>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7e:	440b      	add	r3, r1
 8000b80:	0fda      	lsrs	r2, r3, #31
 8000b82:	4413      	add	r3, r2
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <CS_process+0x16c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
		IN2_2_PROC = (IN2_2_PROC + IN2_2_CS[i])/2;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <CS_process+0x174>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <CS_process+0x170>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9a:	440b      	add	r3, r1
 8000b9c:	0fda      	lsrs	r2, r3, #31
 8000b9e:	4413      	add	r3, r2
 8000ba0:	105b      	asrs	r3, r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <CS_process+0x174>)
 8000ba6:	801a      	strh	r2, [r3, #0]
		IN3_2_PROC = (IN3_2_PROC + IN3_2_CS[i])/2;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <CS_process+0x17c>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <CS_process+0x178>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	0fda      	lsrs	r2, r3, #31
 8000bba:	4413      	add	r3, r2
 8000bbc:	105b      	asrs	r3, r3, #1
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <CS_process+0x17c>)
 8000bc2:	801a      	strh	r2, [r3, #0]
		IN4_2_PROC = (IN4_2_PROC + IN4_2_CS[i])/2;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <CS_process+0x184>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <CS_process+0x180>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	440b      	add	r3, r1
 8000bd4:	0fda      	lsrs	r2, r3, #31
 8000bd6:	4413      	add	r3, r2
 8000bd8:	105b      	asrs	r3, r3, #1
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <CS_process+0x184>)
 8000bde:	801a      	strh	r2, [r3, #0]
	for(int i = 1; i < I_AVERAGE; i++){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b1f      	cmp	r3, #31
 8000bea:	dd89      	ble.n	8000b00 <CS_process+0x4c>
	}

}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000051c 	.word	0x2000051c
 8000c00:	2000071c 	.word	0x2000071c
 8000c04:	2000055c 	.word	0x2000055c
 8000c08:	2000071e 	.word	0x2000071e
 8000c0c:	2000059c 	.word	0x2000059c
 8000c10:	20000720 	.word	0x20000720
 8000c14:	200005dc 	.word	0x200005dc
 8000c18:	20000722 	.word	0x20000722
 8000c1c:	2000061c 	.word	0x2000061c
 8000c20:	20000724 	.word	0x20000724
 8000c24:	2000065c 	.word	0x2000065c
 8000c28:	20000726 	.word	0x20000726
 8000c2c:	2000069c 	.word	0x2000069c
 8000c30:	20000728 	.word	0x20000728
 8000c34:	200006dc 	.word	0x200006dc
 8000c38:	2000072a 	.word	0x2000072a

08000c3c <CS_read>:
	if(IN4_2_PROC <= UC_4_2){
		print_out(-1,"8_UC",data_output_switch);
	}
}

void CS_read(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
	for(int x = 0; x < 4; x++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e1af      	b.n	8000fa8 <CS_read+0x36c>
		switch(x){
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	f200 81a9 	bhi.w	8000fa2 <CS_read+0x366>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <CS_read+0x1c>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000d2d 	.word	0x08000d2d
 8000c60:	08000df1 	.word	0x08000df1
 8000c64:	08000eb5 	.word	0x08000eb5
		case 0:
			CS_SEL[0] = 0;
 8000c68:	4b9e      	ldr	r3, [pc, #632]	; (8000ee4 <CS_read+0x2a8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000c6e:	4b9d      	ldr	r3, [pc, #628]	; (8000ee4 <CS_read+0x2a8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000c74:	4b9b      	ldr	r3, [pc, #620]	; (8000ee4 <CS_read+0x2a8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	489a      	ldr	r0, [pc, #616]	; (8000ee8 <CS_read+0x2ac>)
 8000c7e:	f003 ffc1 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000c82:	4b98      	ldr	r3, [pc, #608]	; (8000ee4 <CS_read+0x2a8>)
 8000c84:	785b      	ldrb	r3, [r3, #1]
 8000c86:	461a      	mov	r2, r3
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4897      	ldr	r0, [pc, #604]	; (8000ee8 <CS_read+0x2ac>)
 8000c8c:	f003 ffba 	bl	8004c04 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	e046      	b.n	8000d24 <CS_read+0xe8>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000c96:	4895      	ldr	r0, [pc, #596]	; (8000eec <CS_read+0x2b0>)
 8000c98:	f002 f890 	bl	8002dbc <HAL_ADC_Start_IT>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <CS_read+0x6a>
 8000ca2:	f000 ff69 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000ca6:	4892      	ldr	r0, [pc, #584]	; (8000ef0 <CS_read+0x2b4>)
 8000ca8:	f002 f888 	bl	8002dbc <HAL_ADC_Start_IT>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <CS_read+0x7a>
 8000cb2:	f000 ff61 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000cb6:	210a      	movs	r1, #10
 8000cb8:	488c      	ldr	r0, [pc, #560]	; (8000eec <CS_read+0x2b0>)
 8000cba:	f001 ffa7 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <CS_read+0x8c>
 8000cc4:	f000 ff58 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000cc8:	210a      	movs	r1, #10
 8000cca:	4889      	ldr	r0, [pc, #548]	; (8000ef0 <CS_read+0x2b4>)
 8000ccc:	f001 ff9e 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <CS_read+0x9e>
 8000cd6:	f000 ff4f 	bl	8001b78 <Error_Handler>
				IN1_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000cda:	4884      	ldr	r0, [pc, #528]	; (8000eec <CS_read+0x2b0>)
 8000cdc:	f002 f9d9 	bl	8003092 <HAL_ADC_GetValue>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b299      	uxth	r1, r3
 8000ce4:	4a83      	ldr	r2, [pc, #524]	; (8000ef4 <CS_read+0x2b8>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN1_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000cec:	4880      	ldr	r0, [pc, #512]	; (8000ef0 <CS_read+0x2b4>)
 8000cee:	f002 f9d0 	bl	8003092 <HAL_ADC_GetValue>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	4a80      	ldr	r2, [pc, #512]	; (8000ef8 <CS_read+0x2bc>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000cfe:	487b      	ldr	r0, [pc, #492]	; (8000eec <CS_read+0x2b0>)
 8000d00:	f002 f98c 	bl	800301c <HAL_ADC_Stop_IT>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <CS_read+0xd2>
 8000d0a:	f000 ff35 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d0e:	4878      	ldr	r0, [pc, #480]	; (8000ef0 <CS_read+0x2b4>)
 8000d10:	f002 f984 	bl	800301c <HAL_ADC_Stop_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <CS_read+0xe2>
 8000d1a:	f000 ff2d 	bl	8001b78 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	3301      	adds	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b1f      	cmp	r3, #31
 8000d28:	ddb5      	ble.n	8000c96 <CS_read+0x5a>
			}
			break;
 8000d2a:	e13a      	b.n	8000fa2 <CS_read+0x366>
		case 1:
			CS_SEL[0] = 0;
 8000d2c:	4b6d      	ldr	r3, [pc, #436]	; (8000ee4 <CS_read+0x2a8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000d32:	4b6c      	ldr	r3, [pc, #432]	; (8000ee4 <CS_read+0x2a8>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000d38:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <CS_read+0x2a8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4869      	ldr	r0, [pc, #420]	; (8000ee8 <CS_read+0x2ac>)
 8000d42:	f003 ff5f 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <CS_read+0x2a8>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	4866      	ldr	r0, [pc, #408]	; (8000ee8 <CS_read+0x2ac>)
 8000d50:	f003 ff58 	bl	8004c04 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e046      	b.n	8000de8 <CS_read+0x1ac>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000d5a:	4864      	ldr	r0, [pc, #400]	; (8000eec <CS_read+0x2b0>)
 8000d5c:	f002 f82e 	bl	8002dbc <HAL_ADC_Start_IT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <CS_read+0x12e>
 8000d66:	f000 ff07 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000d6a:	4861      	ldr	r0, [pc, #388]	; (8000ef0 <CS_read+0x2b4>)
 8000d6c:	f002 f826 	bl	8002dbc <HAL_ADC_Start_IT>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <CS_read+0x13e>
 8000d76:	f000 feff 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000d7a:	210a      	movs	r1, #10
 8000d7c:	485b      	ldr	r0, [pc, #364]	; (8000eec <CS_read+0x2b0>)
 8000d7e:	f001 ff45 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <CS_read+0x150>
 8000d88:	f000 fef6 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000d8c:	210a      	movs	r1, #10
 8000d8e:	4858      	ldr	r0, [pc, #352]	; (8000ef0 <CS_read+0x2b4>)
 8000d90:	f001 ff3c 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <CS_read+0x162>
 8000d9a:	f000 feed 	bl	8001b78 <Error_Handler>
				IN2_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000d9e:	4853      	ldr	r0, [pc, #332]	; (8000eec <CS_read+0x2b0>)
 8000da0:	f002 f977 	bl	8003092 <HAL_ADC_GetValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b299      	uxth	r1, r3
 8000da8:	4a54      	ldr	r2, [pc, #336]	; (8000efc <CS_read+0x2c0>)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN2_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000db0:	484f      	ldr	r0, [pc, #316]	; (8000ef0 <CS_read+0x2b4>)
 8000db2:	f002 f96e 	bl	8003092 <HAL_ADC_GetValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b299      	uxth	r1, r3
 8000dba:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <CS_read+0x2c4>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <CS_read+0x2b0>)
 8000dc4:	f002 f92a 	bl	800301c <HAL_ADC_Stop_IT>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <CS_read+0x196>
 8000dce:	f000 fed3 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000dd2:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <CS_read+0x2b4>)
 8000dd4:	f002 f922 	bl	800301c <HAL_ADC_Stop_IT>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <CS_read+0x1a6>
 8000dde:	f000 fecb 	bl	8001b78 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b1f      	cmp	r3, #31
 8000dec:	ddb5      	ble.n	8000d5a <CS_read+0x11e>
			}
			break;
 8000dee:	e0d8      	b.n	8000fa2 <CS_read+0x366>
		case 2:
			CS_SEL[0] = 1;
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <CS_read+0x2a8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 0;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <CS_read+0x2a8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <CS_read+0x2a8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2140      	movs	r1, #64	; 0x40
 8000e04:	4838      	ldr	r0, [pc, #224]	; (8000ee8 <CS_read+0x2ac>)
 8000e06:	f003 fefd 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <CS_read+0x2a8>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2120      	movs	r1, #32
 8000e12:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <CS_read+0x2ac>)
 8000e14:	f003 fef6 	bl	8004c04 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	e046      	b.n	8000eac <CS_read+0x270>
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000e1e:	4833      	ldr	r0, [pc, #204]	; (8000eec <CS_read+0x2b0>)
 8000e20:	f001 ffcc 	bl	8002dbc <HAL_ADC_Start_IT>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <CS_read+0x1f2>
 8000e2a:	f000 fea5 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e2e:	4830      	ldr	r0, [pc, #192]	; (8000ef0 <CS_read+0x2b4>)
 8000e30:	f001 ffc4 	bl	8002dbc <HAL_ADC_Start_IT>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <CS_read+0x202>
 8000e3a:	f000 fe9d 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000e3e:	210a      	movs	r1, #10
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <CS_read+0x2b0>)
 8000e42:	f001 fee3 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <CS_read+0x214>
 8000e4c:	f000 fe94 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000e50:	210a      	movs	r1, #10
 8000e52:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <CS_read+0x2b4>)
 8000e54:	f001 feda 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <CS_read+0x226>
 8000e5e:	f000 fe8b 	bl	8001b78 <Error_Handler>
				IN3_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <CS_read+0x2b0>)
 8000e64:	f002 f915 	bl	8003092 <HAL_ADC_GetValue>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <CS_read+0x2c8>)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN3_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <CS_read+0x2b4>)
 8000e76:	f002 f90c 	bl	8003092 <HAL_ADC_GetValue>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <CS_read+0x2cc>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <CS_read+0x2b0>)
 8000e88:	f002 f8c8 	bl	800301c <HAL_ADC_Stop_IT>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <CS_read+0x25a>
 8000e92:	f000 fe71 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000e96:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <CS_read+0x2b4>)
 8000e98:	f002 f8c0 	bl	800301c <HAL_ADC_Stop_IT>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <CS_read+0x26a>
 8000ea2:	f000 fe69 	bl	8001b78 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b1f      	cmp	r3, #31
 8000eb0:	ddb5      	ble.n	8000e1e <CS_read+0x1e2>
			}
			break;
 8000eb2:	e076      	b.n	8000fa2 <CS_read+0x366>
		case 3:
			CS_SEL[0] = 1;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <CS_read+0x2a8>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
			CS_SEL[1] = 1;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <CS_read+0x2a8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB,SEL0_Pin,CS_SEL[0]);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <CS_read+0x2a8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <CS_read+0x2ac>)
 8000eca:	f003 fe9b 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,SEL1_Pin,CS_SEL[1]);
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <CS_read+0x2a8>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <CS_read+0x2ac>)
 8000ed8:	f003 fe94 	bl	8004c04 <HAL_GPIO_WritePin>
			for(int i = 0; i < I_AVERAGE; i++){
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	e05b      	b.n	8000f9a <CS_read+0x35e>
 8000ee2:	bf00      	nop
 8000ee4:	2000077c 	.word	0x2000077c
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	2000007c 	.word	0x2000007c
 8000ef0:	200000e8 	.word	0x200000e8
 8000ef4:	2000051c 	.word	0x2000051c
 8000ef8:	2000061c 	.word	0x2000061c
 8000efc:	2000055c 	.word	0x2000055c
 8000f00:	2000065c 	.word	0x2000065c
 8000f04:	2000059c 	.word	0x2000059c
 8000f08:	2000069c 	.word	0x2000069c
				if(HAL_ADC_Start_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000f0c:	482b      	ldr	r0, [pc, #172]	; (8000fbc <CS_read+0x380>)
 8000f0e:	f001 ff55 	bl	8002dbc <HAL_ADC_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <CS_read+0x2e0>
 8000f18:	f000 fe2e 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Start_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000f1c:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <CS_read+0x384>)
 8000f1e:	f001 ff4d 	bl	8002dbc <HAL_ADC_Start_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <CS_read+0x2f0>
 8000f28:	f000 fe26 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc1,10)!=HAL_OK){Error_Handler();}
 8000f2c:	210a      	movs	r1, #10
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <CS_read+0x380>)
 8000f30:	f001 fe6c 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <CS_read+0x302>
 8000f3a:	f000 fe1d 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_PollForConversion(&hadc2,10)!=HAL_OK){Error_Handler();}
 8000f3e:	210a      	movs	r1, #10
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <CS_read+0x384>)
 8000f42:	f001 fe63 	bl	8002c0c <HAL_ADC_PollForConversion>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <CS_read+0x314>
 8000f4c:	f000 fe14 	bl	8001b78 <Error_Handler>
				IN4_1_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000f50:	481a      	ldr	r0, [pc, #104]	; (8000fbc <CS_read+0x380>)
 8000f52:	f002 f89e 	bl	8003092 <HAL_ADC_GetValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <CS_read+0x388>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				IN4_2_CS[i] = (uint16_t)HAL_ADC_GetValue(&hadc2);
 8000f62:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <CS_read+0x384>)
 8000f64:	f002 f895 	bl	8003092 <HAL_ADC_GetValue>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <CS_read+0x38c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(HAL_ADC_Stop_IT(&hadc1)!=HAL_OK){Error_Handler();}
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <CS_read+0x380>)
 8000f76:	f002 f851 	bl	800301c <HAL_ADC_Stop_IT>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <CS_read+0x348>
 8000f80:	f000 fdfa 	bl	8001b78 <Error_Handler>
				if(HAL_ADC_Stop_IT(&hadc2)!=HAL_OK){Error_Handler();}
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <CS_read+0x384>)
 8000f86:	f002 f849 	bl	800301c <HAL_ADC_Stop_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <CS_read+0x358>
 8000f90:	f000 fdf2 	bl	8001b78 <Error_Handler>
			for(int i = 0; i < I_AVERAGE; i++){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3301      	adds	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b1f      	cmp	r3, #31
 8000f9e:	ddb5      	ble.n	8000f0c <CS_read+0x2d0>
			}
			break;
 8000fa0:	bf00      	nop
	for(int x = 0; x < 4; x++){
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	f77f ae4c 	ble.w	8000c48 <CS_read+0xc>
		}else{
			print_out(1,"S1: ",data_output_switch);
		}*/
//------------------------------------------------------
	}
	CS_process();
 8000fb0:	f7ff fd80 	bl	8000ab4 <CS_process>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000007c 	.word	0x2000007c
 8000fc0:	200000e8 	.word	0x200000e8
 8000fc4:	200005dc 	.word	0x200005dc
 8000fc8:	200006dc 	.word	0x200006dc

08000fcc <print_out>:

void print_out(uint32_t data, const char *text, uint8_t out_mode){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71fb      	strb	r3, [r7, #7]

	// uint16_t length = strlen(string);
	 //uint8_t CRLFbuff[] = "\r\n";
	uint32_t data_buffer = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	data_buffer = data;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *buffer = text;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg[2+2+sizeof(buffer)/sizeof(buffer[0])+1+4+2+4] = "";
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	f8c3 200b 	str.w	r2, [r3, #11]
	if(data == -1){
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d107      	bne.n	8001012 <print_out+0x46>
		sprintf(msg, "%s \r\n", buffer);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001008:	4916      	ldr	r1, [pc, #88]	; (8001064 <print_out+0x98>)
 800100a:	4618      	mov	r0, r3
 800100c:	f007 fcee 	bl	80089ec <siprintf>
 8001010:	e006      	b.n	8001020 <print_out+0x54>
	}else{
		sprintf(msg, "%s %lu\r\n", buffer, data_buffer);
 8001012:	f107 0014 	add.w	r0, r7, #20
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800101a:	4913      	ldr	r1, [pc, #76]	; (8001068 <print_out+0x9c>)
 800101c:	f007 fce6 	bl	80089ec <siprintf>
	}

	switch(out_mode){
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d00f      	beq.n	8001046 <print_out+0x7a>
 8001026:	2b03      	cmp	r3, #3
 8001028:	dc17      	bgt.n	800105a <print_out+0x8e>
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <print_out+0x66>
 800102e:	2b02      	cmp	r3, #2
			  HAL_UART_Transmit_DMA(&huart2, msg, sizeof(msg));
			  text = "";
			  break;
		  case 2: //output only through CAN
			  //TODO implement CAN
			  break;
 8001030:	e013      	b.n	800105a <print_out+0x8e>
			  HAL_UART_Transmit_DMA(&huart2, msg, sizeof(msg));
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2213      	movs	r2, #19
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <print_out+0xa0>)
 800103c:	f006 f824 	bl	8007088 <HAL_UART_Transmit_DMA>
			  text = "";
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <print_out+0xa4>)
 8001042:	60bb      	str	r3, [r7, #8]
			  break;
 8001044:	e009      	b.n	800105a <print_out+0x8e>
		  case 3://output through BOTH CAN and DEBUG
			  HAL_UART_Transmit_DMA(&huart2, msg, sizeof(msg));
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2213      	movs	r2, #19
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <print_out+0xa0>)
 8001050:	f006 f81a 	bl	8007088 <HAL_UART_Transmit_DMA>
			  text = "";
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <print_out+0xa4>)
 8001056:	60bb      	str	r3, [r7, #8]
			  //TODO implement CAN
			  break;
 8001058:	bf00      	nop
		  }
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08009484 	.word	0x08009484
 8001068:	0800948c 	.word	0x0800948c
 800106c:	200003cc 	.word	0x200003cc
 8001070:	08009498 	.word	0x08009498

08001074 <HAL_UART_RxCpltCallback>:
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(uart_receive == 13){
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_UART_RxCpltCallback+0x74>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b0d      	cmp	r3, #13
 8001082:	d10d      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x2c>
		const char *newline = "\r\n";
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_UART_RxCpltCallback+0x78>)
 8001086:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit_DMA(huart, (uint8_t*)newline,2);
 8001088:	2202      	movs	r2, #2
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f005 fffb 	bl	8007088 <HAL_UART_Transmit_DMA>
		uart_rx_buffer[29] = 0;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_UART_RxCpltCallback+0x7c>)
 8001094:	2200      	movs	r2, #0
 8001096:	775a      	strb	r2, [r3, #29]
		command_received_flag = 1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_UART_RxCpltCallback+0x80>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e01a      	b.n	80010d6 <HAL_UART_RxCpltCallback+0x62>
	}else{
		for(int i = 0; i < 28; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e00b      	b.n	80010be <HAL_UART_RxCpltCallback+0x4a>
			uart_rx_buffer[i] = uart_rx_buffer[i+1];
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_UART_RxCpltCallback+0x7c>)
 80010ac:	5cd1      	ldrb	r1, [r2, r3]
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_UART_RxCpltCallback+0x7c>)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 28; i++){
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b1b      	cmp	r3, #27
 80010c2:	ddf0      	ble.n	80010a6 <HAL_UART_RxCpltCallback+0x32>
		}
		HAL_UART_Transmit_DMA(huart, &uart_receive,1);
 80010c4:	2201      	movs	r2, #1
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <HAL_UART_RxCpltCallback+0x74>)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f005 ffdd 	bl	8007088 <HAL_UART_Transmit_DMA>
		uart_rx_buffer[28] = uart_receive;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_UART_RxCpltCallback+0x74>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_UART_RxCpltCallback+0x7c>)
 80010d4:	771a      	strb	r2, [r3, #28]
	}
	HAL_UART_Receive_DMA(huart, &uart_receive,1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	4903      	ldr	r1, [pc, #12]	; (80010e8 <HAL_UART_RxCpltCallback+0x74>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f006 f866 	bl	80071ac <HAL_UART_Receive_DMA>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000077e 	.word	0x2000077e
 80010ec:	0800949c 	.word	0x0800949c
 80010f0:	2000075c 	.word	0x2000075c
 80010f4:	2000077a 	.word	0x2000077a

080010f8 <check_bit>:

uint8_t check_bit(uint8_t byte, uint8_t bitn){
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t buffer = 1<<bitn;
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	2201      	movs	r2, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	73fb      	strb	r3, [r7, #15]
	if (byte & buffer){
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	4013      	ands	r3, r2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <check_bit+0x2a>
		return 1;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <check_bit+0x2c>
	}else{
		return 0;
 8001122:	2300      	movs	r3, #0
	}
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 f8f1 	bl	800231a <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8001138:	f7ff fbb9 	bl	80008ae <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f838 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 fca2 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001144:	f000 fc6e 	bl	8001a24 <MX_DMA_Init>
  MX_ADC1_Init();
 8001148:	f000 f87e 	bl	8001248 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800114c:	f000 f95e 	bl	800140c <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001150:	f000 f9a2 	bl	8001498 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001154:	f000 fa50 	bl	80015f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001158:	f000 fac4 	bl	80016e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800115c:	f000 fb10 	bl	8001780 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001160:	f000 fb82 	bl	8001868 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001164:	f000 fbb6 	bl	80018d4 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001168:	f000 fbea 	bl	8001940 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800116c:	f000 fc0e 	bl	800198c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001170:	f000 f8e4 	bl	800133c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <main+0x6c>)
 8001176:	f004 fd8c 	bl	8005c92 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <main+0x70>)
 800117c:	f004 fd89 	bl	8005c92 <HAL_TIM_PWM_Init>

  HAL_UART_Receive_DMA(&huart2, &uart_receive, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <main+0x74>)
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <main+0x78>)
 8001186:	f006 f811 	bl	80071ac <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CS_read();
 800118a:	f7ff fd57 	bl	8000c3c <CS_read>
	  if(command_received_flag == 1){
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <main+0x7c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d1f9      	bne.n	800118a <main+0x5a>
		  decode_uart();
 8001196:	f7ff fa21 	bl	80005dc <decode_uart>
	  CS_read();
 800119a:	e7f6      	b.n	800118a <main+0x5a>
 800119c:	200001b8 	.word	0x200001b8
 80011a0:	20000204 	.word	0x20000204
 80011a4:	2000077e 	.word	0x2000077e
 80011a8:	200003cc 	.word	0x200003cc
 80011ac:	2000077a 	.word	0x2000077a

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	2238      	movs	r2, #56	; 0x38
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f007 fc34 	bl	8008a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d6:	f003 fd2d 	bl	8004c34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80011f4:	234b      	movs	r3, #75	; 0x4b
 80011f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fdc7 	bl	8004d9c <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001214:	f000 fcb0 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2303      	movs	r3, #3
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2104      	movs	r1, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f8cb 	bl	80053cc <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800123c:	f000 fc9c 	bl	8001b78 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	; 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2220      	movs	r2, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fbe3 	bl	8008a2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001268:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800126c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001270:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127c:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <MX_ADC1_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_ADC1_Init+0xe8>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001290:	2204      	movs	r2, #4
 8001292:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_ADC1_Init+0xe8>)
 800129c:	2200      	movs	r2, #0
 800129e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d0:	4817      	ldr	r0, [pc, #92]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012d2:	f001 fb11 	bl	80028f8 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012dc:	f000 fc4c 	bl	8001b78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012ec:	f002 fc72 	bl	8003bd4 <HAL_ADCEx_MultiModeConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f000 fc3f 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_ADC1_Init+0xec>)
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_ADC1_Init+0xf0>)
 8001308:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130a:	2304      	movs	r3, #4
 800130c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_ADC1_Init+0xe8>)
 8001318:	f001 fec8 	bl	80030ac <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001322:	f000 fc29 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000007c 	.word	0x2000007c
 8001334:	04300002 	.word	0x04300002
 8001338:	407f0000 	.word	0x407f0000

0800133c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2220      	movs	r2, #32
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f007 fb6f 	bl	8008a2c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001350:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <MX_ADC2_Init+0xc4>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001356:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800135a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_ADC2_Init+0xc0>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <MX_ADC2_Init+0xc0>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001376:	2204      	movs	r2, #4
 8001378:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_ADC2_Init+0xc0>)
 800137c:	2200      	movs	r2, #0
 800137e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001382:	2200      	movs	r2, #0
 8001384:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001388:	2201      	movs	r2, #1
 800138a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_ADC2_Init+0xc0>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_ADC2_Init+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ADC2_Init+0xc0>)
 800139c:	2200      	movs	r2, #0
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_ADC2_Init+0xc0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC2_Init+0xc0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_ADC2_Init+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <MX_ADC2_Init+0xc0>)
 80013b8:	f001 fa9e 	bl	80028f8 <HAL_ADC_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80013c2:	f000 fbd9 	bl	8001b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC2_Init+0xc8>)
 80013c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ca:	2306      	movs	r3, #6
 80013cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_ADC2_Init+0xcc>)
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d6:	2304      	movs	r3, #4
 80013d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_ADC2_Init+0xc0>)
 80013e4:	f001 fe62 	bl	80030ac <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80013ee:	f000 fbc3 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000e8 	.word	0x200000e8
 8001400:	50000100 	.word	0x50000100
 8001404:	0c900008 	.word	0x0c900008
 8001408:	407f0000 	.word	0x407f0000

0800140c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <MX_FDCAN1_Init+0x88>)
 8001414:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800142a:	2200      	movs	r2, #0
 800142c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800143c:	2210      	movs	r2, #16
 800143e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001442:	2201      	movs	r2, #1
 8001444:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001448:	2202      	movs	r2, #2
 800144a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800144e:	2202      	movs	r2, #2
 8001450:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001454:	2201      	movs	r2, #1
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800145a:	2201      	movs	r2, #1
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001460:	2201      	movs	r2, #1
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001466:	2201      	movs	r2, #1
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001472:	2200      	movs	r2, #0
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_FDCAN1_Init+0x84>)
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_FDCAN1_Init+0x84>)
 800147e:	f003 f88f 	bl	80045a0 <HAL_FDCAN_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001488:	f000 fb76 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000154 	.word	0x20000154
 8001494:	40006400 	.word	0x40006400

08001498 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b09c      	sub	sp, #112	; 0x70
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 faaa 	bl	8008a2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014da:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <MX_TIM1_Init+0x15c>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <MX_TIM1_Init+0x158>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001504:	483a      	ldr	r0, [pc, #232]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001506:	f004 fb6d 	bl	8005be4 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001510:	f000 fb32 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800151e:	4619      	mov	r1, r3
 8001520:	4833      	ldr	r0, [pc, #204]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001522:	f004 feab 	bl	800627c <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800152c:	f000 fb24 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001532:	f004 fbae 	bl	8005c92 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800153c:	f000 fb1c 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001550:	4619      	mov	r1, r3
 8001552:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001554:	f005 fbe0 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800155e:	f000 fb0b 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001562:	2360      	movs	r3, #96	; 0x60
 8001564:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	481a      	ldr	r0, [pc, #104]	; (80015f0 <MX_TIM1_Init+0x158>)
 8001588:	f004 fd64 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001592:	f000 faf1 	bl	8001b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM1_Init+0x158>)
 80015d4:	f005 fc22 	bl	8006e1c <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80015de:	f000 facb 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM1_Init+0x158>)
 80015e4:	f000 fca4 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3770      	adds	r7, #112	; 0x70
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200001b8 	.word	0x200001b8
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM2_Init+0xe8>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 149;
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001634:	2295      	movs	r2, #149	; 0x95
 8001636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_TIM2_Init+0xe8>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967294E9;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001640:	f06f 0201 	mvn.w	r2, #1
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_TIM2_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001654:	f004 fac6 	bl	8005be4 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800165e:	f000 fa8b 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001670:	f004 fe04 	bl	800627c <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800167a:	f000 fa7d 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM2_Init+0xe8>)
 8001680:	f004 fb07 	bl	8005c92 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800168a:	f000 fa75 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_TIM2_Init+0xe8>)
 800169e:	f005 fb3b 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016a8:	f000 fa66 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM2_Init+0xe8>)
 80016c4:	f004 fcc6 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016ce:	f000 fa53 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM2_Init+0xe8>)
 80016d4:	f000 fc2c 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000204 	.word	0x20000204

080016e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_TIM3_Init+0x94>)
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <MX_TIM3_Init+0x98>)
 8001706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM3_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_TIM3_Init+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_TIM3_Init+0x94>)
 8001716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_TIM3_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_TIM3_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_TIM3_Init+0x94>)
 800172a:	f004 fa5b 	bl	8005be4 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001734:	f000 fa20 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_TIM3_Init+0x94>)
 8001746:	f004 fd99 	bl	800627c <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001750:	f000 fa12 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_TIM3_Init+0x94>)
 8001762:	f005 fad9 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800176c:	f000 fa04 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000250 	.word	0x20000250
 800177c:	40000400 	.word	0x40000400

08001780 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017b4:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <MX_TIM4_Init+0xe4>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d8:	4821      	ldr	r0, [pc, #132]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017da:	f004 fa03 	bl	8005be4 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017e4:	f000 f9c8 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	4619      	mov	r1, r3
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <MX_TIM4_Init+0xe0>)
 80017f6:	f004 fd41 	bl	800627c <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001800:	f000 f9ba 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001804:	4816      	ldr	r0, [pc, #88]	; (8001860 <MX_TIM4_Init+0xe0>)
 8001806:	f004 fa44 	bl	8005c92 <HAL_TIM_PWM_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001810:	f000 f9b2 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <MX_TIM4_Init+0xe0>)
 8001824:	f005 fa78 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800182e:	f000 f9a3 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001832:	2360      	movs	r3, #96	; 0x60
 8001834:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM4_Init+0xe0>)
 800184a:	f004 fc03 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001854:	f000 f990 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000029c 	.word	0x2000029c
 8001864:	40000800 	.word	0x40000800

08001868 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_TIM6_Init+0x64>)
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <MX_TIM6_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_TIM6_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_TIM6_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_TIM6_Init+0x64>)
 800188c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001890:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_TIM6_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM6_Init+0x64>)
 800189a:	f004 f9a3 	bl	8005be4 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018a4:	f000 f968 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM6_Init+0x64>)
 80018b6:	f005 fa2f 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018c0:	f000 f95a 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002e8 	.word	0x200002e8
 80018d0:	40001000 	.word	0x40001000

080018d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_TIM7_Init+0x64>)
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <MX_TIM7_Init+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <MX_TIM7_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_TIM7_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_TIM7_Init+0x64>)
 80018f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_TIM7_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM7_Init+0x64>)
 8001906:	f004 f96d 	bl	8005be4 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001910:	f000 f932 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_TIM7_Init+0x64>)
 8001922:	f005 f9f9 	bl	8006d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 f924 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000334 	.word	0x20000334
 800193c:	40001400 	.word	0x40001400

08001940 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_TIM16_Init+0x44>)
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <MX_TIM16_Init+0x48>)
 8001948:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_TIM16_Init+0x44>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_TIM16_Init+0x44>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_TIM16_Init+0x44>)
 8001958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_TIM16_Init+0x44>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_TIM16_Init+0x44>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_TIM16_Init+0x44>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_TIM16_Init+0x44>)
 8001972:	f004 f937 	bl	8005be4 <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800197c:	f000 f8fc 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000380 	.word	0x20000380
 8001988:	40014400 	.word	0x40014400

0800198c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 8001992:	4a23      	ldr	r2, [pc, #140]	; (8001a20 <MX_USART2_UART_Init+0x94>)
 8001994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 8001998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800199c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019d6:	f005 fb07 	bl	8006fe8 <HAL_UART_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019e0:	f000 f8ca 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019e8:	f006 ff35 	bl	8008856 <HAL_UARTEx_SetTxFifoThreshold>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019f2:	f000 f8c1 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4808      	ldr	r0, [pc, #32]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 80019fa:	f006 ff6a 	bl	80088d2 <HAL_UARTEx_SetRxFifoThreshold>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f000 f8b8 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_USART2_UART_Init+0x90>)
 8001a0a:	f006 feeb 	bl	80087e4 <HAL_UARTEx_DisableFifoMode>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a14:	f000 f8b0 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200003cc 	.word	0x200003cc
 8001a20:	40004400 	.word	0x40004400

08001a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6493      	str	r3, [r2, #72]	; 0x48
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_DMA_Init+0x60>)
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200b      	movs	r0, #11
 8001a60:	f002 fa37 	bl	8003ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a64:	200b      	movs	r0, #11
 8001a66:	f002 fa4e 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200c      	movs	r0, #12
 8001a70:	f002 fa2f 	bl	8003ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a74:	200c      	movs	r0, #12
 8001a76:	f002 fa46 	bl	8003f06 <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_GPIO_Init+0xe4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aec:	4820      	ldr	r0, [pc, #128]	; (8001b70 <MX_GPIO_Init+0xe8>)
 8001aee:	f003 f889 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f248 6110 	movw	r1, #34320	; 0x8610
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f003 f882 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b00:	2200      	movs	r2, #0
 8001b02:	21f9      	movs	r1, #249	; 0xf9
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <MX_GPIO_Init+0xec>)
 8001b06:	f003 f87d 	bl	8004c04 <HAL_GPIO_WritePin>
                          |SEL0_Pin|IN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IN1_2_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN1_2_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_GPIO_Init+0xe8>)
 8001b24:	f002 feec 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN0_2_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN0_2_Pin|IN3_Pin|IN2_Pin|IN1_Pin;
 8001b28:	f248 6310 	movw	r3, #34320	; 0x8610
 8001b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f002 fedc 	bl	8004900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 IN0_Pin IN3_2_Pin SEL1_Pin
                           SEL0_Pin IN2_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|IN0_Pin|IN3_2_Pin|SEL1_Pin
 8001b48:	23f9      	movs	r3, #249	; 0xf9
 8001b4a:	60fb      	str	r3, [r7, #12]
                          |SEL0_Pin|IN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_GPIO_Init+0xec>)
 8001b60:	f002 fece 	bl	8004900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	48001800 	.word	0x48001800
 8001b74:	48000400 	.word	0x48000400

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6613      	str	r3, [r2, #96]	; 0x60
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_MspInit+0x44>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bba:	f003 f8df 	bl	8004d7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b09c      	sub	sp, #112	; 0x70
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	2244      	movs	r2, #68	; 0x44
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f006 ff1d 	bl	8008a2c <memset>
  if(hadc->Instance==ADC1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bfa:	d13e      	bne.n	8001c7a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c00:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c06:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fdf9 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c18:	f7ff ffae 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001c24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10b      	bne.n	8001c46 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_pos_Pin|ADC1_neg_Pin;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c62:	2303      	movs	r3, #3
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f002 fe44 	bl	8004900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c78:	e042      	b.n	8001d00 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_ADC_MspInit+0x144>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13d      	bne.n	8001d00 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c8e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fdb5 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001ca0:	f7ff ff6a 	bl	8001b78 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001cac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_ADC_MspInit+0x13c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_ADC_MspInit+0x140>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC2_pos_Pin|ADC2_neg_Pin;
 8001ce6:	23c0      	movs	r3, #192	; 0xc0
 8001ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cea:	2303      	movs	r3, #3
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfc:	f002 fe00 	bl	8004900 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	3770      	adds	r7, #112	; 0x70
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000798 	.word	0x20000798
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	50000100 	.word	0x50000100

08001d14 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b09a      	sub	sp, #104	; 0x68
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	2244      	movs	r2, #68	; 0x44
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f006 fe79 	bl	8008a2c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <HAL_FDCAN_MspInit+0xac>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d139      	bne.n	8001db8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fd55 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d60:	f7ff ff0a 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_FDCAN_MspInit+0xb0>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d98:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001da6:	2309      	movs	r3, #9
 8001da8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f002 fda4 	bl	8004900 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3768      	adds	r7, #104	; 0x68
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_TIM_Base_MspInit+0x14c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10c      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de4:	6613      	str	r3, [r2, #96]	; 0x60
 8001de6:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001df2:	e08a      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d114      	bne.n	8001e28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	201c      	movs	r0, #28
 8001e1c:	f002 f859 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e20:	201c      	movs	r0, #28
 8001e22:	f002 f870 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8001e26:	e070      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <HAL_TIM_Base_MspInit+0x154>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d114      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	201d      	movs	r0, #29
 8001e50:	f002 f83f 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e54:	201d      	movs	r0, #29
 8001e56:	f002 f856 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8001e5a:	e056      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_TIM_Base_MspInit+0x158>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d114      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e66:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	201e      	movs	r0, #30
 8001e84:	f002 f825 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e88:	201e      	movs	r0, #30
 8001e8a:	f002 f83c 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	e03c      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <HAL_TIM_Base_MspInit+0x15c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	e02a      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_TIM_Base_MspInit+0x160>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d114      	bne.n	8001ee8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2037      	movs	r0, #55	; 0x37
 8001edc:	f001 fff9 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ee0:	2037      	movs	r0, #55	; 0x37
 8001ee2:	f002 f810 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8001ee6:	e010      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_TIM_Base_MspInit+0x164>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10b      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	6613      	str	r3, [r2, #96]	; 0x60
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_TIM_Base_MspInit+0x150>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40001000 	.word	0x40001000
 8001f28:	40001400 	.word	0x40001400
 8001f2c:	40014400 	.word	0x40014400

08001f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_TIM_MspPostInit+0xac>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11e      	bne.n	8001f90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f002 fcb9 	bl	8004900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f8e:	e021      	b.n	8001fd4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d11c      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_TIM_MspPostInit+0xb0>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f002 fc96 	bl	8004900 <HAL_GPIO_Init>
}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09a      	sub	sp, #104	; 0x68
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	2244      	movs	r2, #68	; 0x44
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f006 fd11 	bl	8008a2c <memset>
  if(huart->Instance==USART2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_UART_MspInit+0x15c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	f040 8091 	bne.w	8002138 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fbee 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800202e:	f7ff fda3 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <HAL_UART_MspInit+0x160>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <HAL_UART_MspInit+0x160>)
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	6593      	str	r3, [r2, #88]	; 0x58
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_UART_MspInit+0x160>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_UART_MspInit+0x160>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_UART_MspInit+0x160>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_UART_MspInit+0x160>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002062:	230c      	movs	r3, #12
 8002064:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002072:	2307      	movs	r3, #7
 8002074:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f002 fc3e 	bl	8004900 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_UART_MspInit+0x164>)
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <HAL_UART_MspInit+0x168>)
 8002088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_UART_MspInit+0x164>)
 800208c:	221a      	movs	r2, #26
 800208e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_UART_MspInit+0x164>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_UART_MspInit+0x164>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_UART_MspInit+0x164>)
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020ba:	4823      	ldr	r0, [pc, #140]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020bc:	f001 ff3e 	bl	8003f3c <HAL_DMA_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80020c6:	f7ff fd57 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_UART_MspInit+0x164>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020d8:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_UART_MspInit+0x170>)
 80020da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020de:	221b      	movs	r2, #27
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020e4:	2210      	movs	r2, #16
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_UART_MspInit+0x16c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_UART_MspInit+0x16c>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_UART_MspInit+0x16c>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800210c:	4810      	ldr	r0, [pc, #64]	; (8002150 <HAL_UART_MspInit+0x16c>)
 800210e:	f001 ff15 	bl	8003f3c <HAL_DMA_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002118:	f7ff fd2e 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_UART_MspInit+0x16c>)
 8002120:	679a      	str	r2, [r3, #120]	; 0x78
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <HAL_UART_MspInit+0x16c>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2026      	movs	r0, #38	; 0x26
 800212e:	f001 fed0 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002132:	2026      	movs	r0, #38	; 0x26
 8002134:	f001 fee7 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3768      	adds	r7, #104	; 0x68
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40004400 	.word	0x40004400
 8002144:	40021000 	.word	0x40021000
 8002148:	2000045c 	.word	0x2000045c
 800214c:	40020008 	.word	0x40020008
 8002150:	200004bc 	.word	0x200004bc
 8002154:	4002001c 	.word	0x4002001c

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f000 f90c 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA1_Channel1_IRQHandler+0x10>)
 80021b2:	f002 f8a6 	bl	8004302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000045c 	.word	0x2000045c

080021c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <DMA1_Channel2_IRQHandler+0x10>)
 80021c6:	f002 f89c 	bl	8004302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200004bc 	.word	0x200004bc

080021d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM2_IRQHandler+0x10>)
 80021da:	f003 fdbb 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000204 	.word	0x20000204

080021e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <TIM3_IRQHandler+0x10>)
 80021ee:	f003 fdb1 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000250 	.word	0x20000250

080021fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM4_IRQHandler+0x10>)
 8002202:	f003 fda7 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000029c 	.word	0x2000029c

08002210 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <USART2_IRQHandler+0x10>)
 8002216:	f005 f81f 	bl	8007258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003cc 	.word	0x200003cc

08002224 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM7_IRQHandler+0x10>)
 800222a:	f003 fd93 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000334 	.word	0x20000334

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f006 fbe8 	bl	8008a3c <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20008000 	.word	0x20008000
 8002298:	00000400 	.word	0x00000400
 800229c:	2000079c 	.word	0x2000079c
 80022a0:	200008f0 	.word	0x200008f0

080022a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480d      	ldr	r0, [pc, #52]	; (8002304 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ce:	490e      	ldr	r1, [pc, #56]	; (8002308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <LoopForever+0xe>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e4:	4c0b      	ldr	r4, [pc, #44]	; (8002314 <LoopForever+0x16>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f2:	f7ff ffd7 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f006 fba7 	bl	8008a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fa:	f7fe ff19 	bl	8001130 <main>

080022fe <LoopForever>:

LoopForever:
    b LoopForever
 80022fe:	e7fe      	b.n	80022fe <LoopForever>
  ldr   r0, =_estack
 8002300:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800230c:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 8002310:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002314:	200008ec 	.word	0x200008ec

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>

0800231a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f001 fdc9 	bl	8003ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f80e 	bl	800234c <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e001      	b.n	8002340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800233c:	f7ff fc22 	bl	8001b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002340:	79fb      	ldrb	r3, [r7, #7]

}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_InitTick+0x6c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_InitTick+0x68>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fdd4 	bl	8003f22 <HAL_SYSTICK_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d809      	bhi.n	800239a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002386:	2200      	movs	r2, #0
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	f04f 30ff 	mov.w	r0, #4294967295
 800238e:	f001 fda0 	bl	8003ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_InitTick+0x70>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e007      	b.n	80023aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e004      	b.n	80023aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	20000004 	.word	0x20000004
 80023bc:	20000008 	.word	0x20000008

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x1c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_IncTick+0x20>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_IncTick+0x1c>)
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	200007a0 	.word	0x200007a0
 80023e0:	2000000c 	.word	0x2000000c

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200007a0 	.word	0x200007a0

080023fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3360      	adds	r3, #96	; 0x60
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <LL_ADC_SetOffset+0x44>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	4313      	orrs	r3, r2
 8002494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	03fff000 	.word	0x03fff000

080024ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800250e:	b480      	push	{r7}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	431a      	orrs	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3360      	adds	r3, #96	; 0x60
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	615a      	str	r2, [r3, #20]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b087      	sub	sp, #28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3330      	adds	r3, #48	; 0x30
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	211f      	movs	r1, #31
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 011f 	and.w	r1, r3, #31
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3314      	adds	r3, #20
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	0e5b      	lsrs	r3, r3, #25
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	4413      	add	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0d1b      	lsrs	r3, r3, #20
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2107      	movs	r1, #7
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	401a      	ands	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	0d1b      	lsrs	r3, r3, #20
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	431a      	orrs	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10a      	bne.n	800269e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800269c:	e00a      	b.n	80026b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	43db      	mvns	r3, r3
 80026ac:	401a      	ands	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	407f0000 	.word	0x407f0000

080026c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 031f 	and.w	r3, r3, #31
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800270c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002734:	d101      	bne.n	800273a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800275c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002784:	d101      	bne.n	800278a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_ADC_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d101      	bne.n	8002826 <LL_ADC_IsDisableOngoing+0x18>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_IsDisableOngoing+0x1a>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800286c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002870:	f043 0210 	orr.w	r2, r3, #16
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d101      	bne.n	800289c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d101      	bne.n	80028ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e177      	b.n	8002c02 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f953 	bl	8001bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fef1 	bl	8002720 <LL_ADC_IsDeepPowerDownEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fed7 	bl	80026fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff0c 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fef0 	bl	8002748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002968:	4b9c      	ldr	r3, [pc, #624]	; (8002bdc <HAL_ADC_Init+0x2e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	4a9c      	ldr	r2, [pc, #624]	; (8002be0 <HAL_ADC_Init+0x2e8>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800297c:	e002      	b.n	8002984 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3b01      	subs	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff feee 	bl	8002770 <LL_ADC_IsInternalRegulatorEnabled>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff62 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 8110 	bne.w	8002bf0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 810c 	bne.w	8002bf0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fefb 	bl	80027e8 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029fc:	f7ff fef4 	bl	80027e8 <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	4878      	ldr	r0, [pc, #480]	; (8002be4 <HAL_ADC_Init+0x2ec>)
 8002a04:	f7ff fef0 	bl	80027e8 <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4874      	ldr	r0, [pc, #464]	; (8002be8 <HAL_ADC_Init+0x2f0>)
 8002a18:	f7ff fcf0 	bl	80023fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7f5b      	ldrb	r3, [r3, #29]
 8002a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	045b      	lsls	r3, r3, #17
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_ADC_Init+0x2f4>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff feee 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff0f 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 8002ab4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d16d      	bne.n	8002b98 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d16a      	bne.n	8002b98 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ace:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ade:	f023 0302 	bic.w	r3, r3, #2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6911      	ldr	r1, [r2, #16]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b22:	e013      	b.n	8002b4c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d118      	bne.n	8002b88 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e007      	b.n	8002b98 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10c      	bne.n	8002bba <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f023 010f 	bic.w	r1, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb8:	e007      	b.n	8002bca <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020f 	bic.w	r2, r2, #15
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bda:	e011      	b.n	8002c00 <HAL_ADC_Init+0x308>
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	053e2d63 	.word	0x053e2d63
 8002be4:	50000100 	.word	0x50000100
 8002be8:	50000300 	.word	0x50000300
 8002bec:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop

08002c0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c16:	4867      	ldr	r0, [pc, #412]	; (8002db4 <HAL_ADC_PollForConversion+0x1a8>)
 8002c18:	f7ff fd54 	bl	80026c4 <LL_ADC_GetMultimode>
 8002c1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d102      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c26:	2308      	movs	r3, #8
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e02a      	b.n	8002c82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d002      	beq.n	8002c3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d111      	bne.n	8002c62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0a6      	b.n	8002daa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c60:	e00f      	b.n	8002c82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c62:	4854      	ldr	r0, [pc, #336]	; (8002db4 <HAL_ADC_PollForConversion+0x1a8>)
 8002c64:	f7ff fd3c 	bl	80026e0 <LL_ADC_GetMultiDMATransfer>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e095      	b.n	8002daa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c7e:	2304      	movs	r3, #4
 8002c80:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c82:	f7ff fbaf 	bl	80023e4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c88:	e021      	b.n	8002cce <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d01d      	beq.n	8002cce <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c92:	f7ff fba7 	bl	80023e4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <HAL_ADC_PollForConversion+0x9c>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d112      	bne.n	8002cce <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e06d      	b.n	8002daa <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0d6      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fc57 	bl	80025a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01c      	beq.n	8002d32 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f5b      	ldrb	r3, [r3, #29]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d118      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d111      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_ADC_PollForConversion+0x1ac>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_PollForConversion+0x136>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e001      	b.n	8002d46 <HAL_ADC_PollForConversion+0x13a>
 8002d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d008      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d002      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b09      	cmp	r3, #9
 8002d5e:	d104      	bne.n	8002d6a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e00d      	b.n	8002d86 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_ADC_PollForConversion+0x1ac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d002      	beq.n	8002d7a <HAL_ADC_PollForConversion+0x16e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e001      	b.n	8002d7e <HAL_ADC_PollForConversion+0x172>
 8002d7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d104      	bne.n	8002d96 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e008      	b.n	8002da8 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	220c      	movs	r2, #12
 8002da6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	50000300 	.word	0x50000300
 8002db8:	50000100 	.word	0x50000100

08002dbc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc4:	4893      	ldr	r0, [pc, #588]	; (8003014 <HAL_ADC_Start_IT+0x258>)
 8002dc6:	f7ff fc7d 	bl	80026c4 <LL_ADC_GetMultimode>
 8002dca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fd57 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8113 	bne.w	8003004 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_Start_IT+0x30>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e10e      	b.n	800300a <HAL_ADC_Start_IT+0x24e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fe05 	bl	8003a04 <ADC_Enable>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 80fa 	bne.w	8002ffa <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	; (8003018 <HAL_ADC_Start_IT+0x25c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d002      	beq.n	8002e2a <HAL_ADC_Start_IT+0x6e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	e001      	b.n	8002e2e <HAL_ADC_Start_IT+0x72>
 8002e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d002      	beq.n	8002e3c <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	f023 0206 	bic.w	r2, r3, #6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 021c 	bic.w	r2, r2, #28
 8002e86:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d108      	bne.n	8002ea2 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0208 	orr.w	r2, r2, #8
 8002e9e:	605a      	str	r2, [r3, #4]
          break;
 8002ea0:	e008      	b.n	8002eb4 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0204 	orr.w	r2, r2, #4
 8002eb0:	605a      	str	r2, [r3, #4]
          break;
 8002eb2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0210 	orr.w	r2, r2, #16
 8002eca:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_ADC_Start_IT+0x25c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d002      	beq.n	8002edc <HAL_ADC_Start_IT+0x120>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e001      	b.n	8002ee0 <HAL_ADC_Start_IT+0x124>
 8002edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d008      	beq.n	8002efa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d002      	beq.n	8002efa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	d13a      	bne.n	8002f70 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02d      	beq.n	8002f64 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d110      	bne.n	8002f42 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0220 	bic.w	r2, r2, #32
 8002f2e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3e:	605a      	str	r2, [r3, #4]
              break;
 8002f40:	e010      	b.n	8002f64 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f50:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0220 	orr.w	r2, r2, #32
 8002f60:	605a      	str	r2, [r3, #4]
              break;
 8002f62:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fc63 	bl	8002834 <LL_ADC_REG_StartConversion>
 8002f6e:	e04b      	b.n	8003008 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_ADC_Start_IT+0x25c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d002      	beq.n	8002f8c <HAL_ADC_Start_IT+0x1d0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e001      	b.n	8002f90 <HAL_ADC_Start_IT+0x1d4>
 8002f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f90:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d034      	beq.n	8003008 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d110      	bne.n	8002fd8 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0220 	bic.w	r2, r2, #32
 8002fc4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd4:	605a      	str	r2, [r3, #4]
              break;
 8002fd6:	e017      	b.n	8003008 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	605a      	str	r2, [r3, #4]
              break;
 8002ff8:	e006      	b.n	8003008 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003002:	e001      	b.n	8003008 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	50000300 	.word	0x50000300
 8003018:	50000100 	.word	0x50000100

0800301c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Stop_IT+0x16>
 800302e:	2302      	movs	r3, #2
 8003030:	e02b      	b.n	800308a <HAL_ADC_Stop_IT+0x6e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800303a:	2103      	movs	r1, #3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fc25 	bl	800388c <ADC_ConversionStop>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d119      	bne.n	8003080 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 021c 	bic.w	r2, r2, #28
 800305a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fd33 	bl	8003ac8 <ADC_Disable>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b0b6      	sub	sp, #216	; 0xd8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x22>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e3c8      	b.n	8003860 <HAL_ADC_ConfigChannel+0x7b4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbd2 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 83ad 	bne.w	8003842 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f7ff fa66 	bl	80025c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fbc0 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 8003104:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fbe0 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 8003112:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 81d9 	bne.w	80034d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 81d4 	bne.w	80034d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003132:	d10f      	bne.n	8003154 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	4619      	mov	r1, r3
 8003140:	f7ff fa6d 	bl	800261e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fa14 	bl	800257a <LL_ADC_SetSamplingTimeCommonConfig>
 8003152:	e00e      	b.n	8003172 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	461a      	mov	r2, r3
 8003162:	f7ff fa5c 	bl	800261e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fa04 	bl	800257a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d022      	beq.n	80031da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6919      	ldr	r1, [r3, #16]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031a4:	f7ff f95e 	bl	8002464 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6919      	ldr	r1, [r3, #16]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f7ff f9aa 	bl	800250e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6919      	ldr	r1, [r3, #16]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	7f1b      	ldrb	r3, [r3, #28]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x124>
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	e000      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x126>
 80031d0:	2300      	movs	r3, #0
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff f9b6 	bl	8002544 <LL_ADC_SetOffsetSaturation>
 80031d8:	e17b      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f963 	bl	80024ac <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x15a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f958 	bl	80024ac <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	e01e      	b.n	8003244 <HAL_ADC_ConfigChannel+0x198>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f94d 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800322c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e004      	b.n	8003242 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1b0>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	e018      	b.n	800328e <HAL_ADC_ConfigChannel+0x1e2>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f91c 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f900 	bl	80024ac <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x220>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f8f5 	bl	80024ac <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	e01e      	b.n	800330a <HAL_ADC_ConfigChannel+0x25e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f8ea 	bl	80024ac <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e004      	b.n	8003308 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x276>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	e018      	b.n	8003354 <HAL_ADC_ConfigChannel+0x2a8>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800333a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800333e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e004      	b.n	8003354 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800334a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003354:	429a      	cmp	r2, r3
 8003356:	d106      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f8b9 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f89d 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x2e6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f892 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	e01e      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x324>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f887 	bl	80024ac <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e004      	b.n	80033ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x33c>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	e016      	b.n	8003416 <HAL_ADC_ConfigChannel+0x36a>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e004      	b.n	8003416 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800340c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003416:	429a      	cmp	r2, r3
 8003418:	d106      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f858 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2103      	movs	r1, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f83c 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3a8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2103      	movs	r1, #3
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f831 	bl	80024ac <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	e017      	b.n	8003484 <HAL_ADC_ConfigChannel+0x3d8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2103      	movs	r1, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f826 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800346c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800347a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_ConfigChannel+0x3f0>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	e011      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x414>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2103      	movs	r1, #3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f803 	bl	80024d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f986 	bl	80027e8 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 8140 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f7ff f8bf 	bl	8002674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4a8f      	ldr	r2, [pc, #572]	; (8003738 <HAL_ADC_ConfigChannel+0x68c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	f040 8131 	bne.w	8003764 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_ADC_ConfigChannel+0x47e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	0e9b      	lsrs	r3, r3, #26
 8003518:	3301      	adds	r3, #1
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b09      	cmp	r3, #9
 8003520:	bf94      	ite	ls
 8003522:	2301      	movls	r3, #1
 8003524:	2300      	movhi	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e019      	b.n	800355e <HAL_ADC_ConfigChannel+0x4b2>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800353c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003542:	2320      	movs	r3, #32
 8003544:	e003      	b.n	800354e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2b09      	cmp	r3, #9
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355e:	2b00      	cmp	r3, #0
 8003560:	d079      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_ADC_ConfigChannel+0x4d2>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	3301      	adds	r3, #1
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357c:	e015      	b.n	80035aa <HAL_ADC_ConfigChannel+0x4fe>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e003      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	069b      	lsls	r3, r3, #26
 80035a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x51e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	e017      	b.n	80035fa <HAL_ADC_ConfigChannel+0x54e>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e003      	b.n	80035ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	ea42 0103 	orr.w	r1, r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x574>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	3301      	adds	r3, #1
 8003612:	f003 021f 	and.w	r2, r3, #31
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	051b      	lsls	r3, r3, #20
 800361e:	e018      	b.n	8003652 <HAL_ADC_ConfigChannel+0x5a6>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003652:	430b      	orrs	r3, r1
 8003654:	e081      	b.n	800375a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x5c6>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	3301      	adds	r3, #1
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	e015      	b.n	800369e <HAL_ADC_ConfigChannel+0x5f2>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_ADC_ConfigChannel+0x612>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	e017      	b.n	80036ee <HAL_ADC_ConfigChannel+0x642>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
  return result;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_ADC_ConfigChannel+0x66e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	f003 021f 	and.w	r2, r3, #31
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	051b      	lsls	r3, r3, #20
 8003714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003718:	e01e      	b.n	8003758 <HAL_ADC_ConfigChannel+0x6ac>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	613b      	str	r3, [r7, #16]
  return result;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e006      	b.n	8003744 <HAL_ADC_ConfigChannel+0x698>
 8003736:	bf00      	nop
 8003738:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	3b1e      	subs	r3, #30
 8003752:	051b      	lsls	r3, r3, #20
 8003754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003758:	430b      	orrs	r3, r1
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	4619      	mov	r1, r3
 8003760:	f7fe ff5d 	bl	800261e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_ADC_ConfigChannel+0x7bc>)
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d071      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003770:	483e      	ldr	r0, [pc, #248]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 8003772:	f7fe fe69 	bl	8002448 <LL_ADC_GetCommonPathInternalCh>
 8003776:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <HAL_ADC_ConfigChannel+0x7c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_ADC_ConfigChannel+0x6e2>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_ADC_ConfigChannel+0x7c8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d127      	bne.n	80037de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800378e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d121      	bne.n	80037de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a2:	d157      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ac:	4619      	mov	r1, r3
 80037ae:	482f      	ldr	r0, [pc, #188]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 80037b0:	f7fe fe37 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_ADC_ConfigChannel+0x7cc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	4a30      	ldr	r2, [pc, #192]	; (800387c <HAL_ADC_ConfigChannel+0x7d0>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ce:	e002      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037dc:	e03a      	b.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_ADC_ConfigChannel+0x7d4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d113      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x764>
 80037e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <HAL_ADC_ConfigChannel+0x7d8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02a      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003806:	4619      	mov	r1, r3
 8003808:	4818      	ldr	r0, [pc, #96]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 800380a:	f7fe fe0a 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800380e:	e021      	b.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_ADC_ConfigChannel+0x7dc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d11c      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800381a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d116      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_ADC_ConfigChannel+0x7d8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d011      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003838:	4619      	mov	r1, r3
 800383a:	480c      	ldr	r0, [pc, #48]	; (800386c <HAL_ADC_ConfigChannel+0x7c0>)
 800383c:	f7fe fdf1 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
 8003840:	e008      	b.n	8003854 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800385c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003860:	4618      	mov	r0, r3
 8003862:	37d8      	adds	r7, #216	; 0xd8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	80080000 	.word	0x80080000
 800386c:	50000300 	.word	0x50000300
 8003870:	c3210000 	.word	0xc3210000
 8003874:	90c00010 	.word	0x90c00010
 8003878:	20000004 	.word	0x20000004
 800387c:	053e2d63 	.word	0x053e2d63
 8003880:	c7520000 	.word	0xc7520000
 8003884:	50000100 	.word	0x50000100
 8003888:	cb840000 	.word	0xcb840000

0800388c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe ffee 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 80038a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f80f 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 80038b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8098 	beq.w	80039f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7f5b      	ldrb	r3, [r3, #29]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d126      	bne.n	8003928 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7f1b      	ldrb	r3, [r3, #28]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d122      	bne.n	8003928 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038e6:	e014      	b.n	8003912 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4a45      	ldr	r2, [pc, #276]	; (8003a00 <ADC_ConversionStop+0x174>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d90d      	bls.n	800390c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f043 0210 	orr.w	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e074      	b.n	80039f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d1e3      	bne.n	80038e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2240      	movs	r2, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d014      	beq.n	8003958 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe ffa6 	bl	8002884 <LL_ADC_REG_IsConversionOngoing>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe ff63 	bl	800280e <LL_ADC_IsDisableOngoing>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe ff82 	bl	800285c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d014      	beq.n	8003988 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe ffb5 	bl	80028d2 <LL_ADC_INJ_IsConversionOngoing>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe ff4b 	bl	800280e <LL_ADC_IsDisableOngoing>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff91 	bl	80028aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d005      	beq.n	800399a <ADC_ConversionStop+0x10e>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d105      	bne.n	80039a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003994:	230c      	movs	r3, #12
 8003996:	617b      	str	r3, [r7, #20]
        break;
 8003998:	e005      	b.n	80039a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800399a:	2308      	movs	r3, #8
 800399c:	617b      	str	r3, [r7, #20]
        break;
 800399e:	e002      	b.n	80039a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039a0:	2304      	movs	r3, #4
 80039a2:	617b      	str	r3, [r7, #20]
        break;
 80039a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039a6:	f7fe fd1d 	bl	80023e4 <HAL_GetTick>
 80039aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039ac:	e01b      	b.n	80039e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039ae:	f7fe fd19 	bl	80023e4 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d914      	bls.n	80039e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e007      	b.n	80039f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1dc      	bne.n	80039ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	a33fffff 	.word	0xa33fffff

08003a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fee9 	bl	80027e8 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d14d      	bne.n	8003ab8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <ADC_Enable+0xc0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e039      	b.n	8003aba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fea4 	bl	8002798 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fcc8 	bl	80023e4 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a56:	e028      	b.n	8003aaa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fec3 	bl	80027e8 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fe93 	bl	8002798 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a72:	f7fe fcb7 	bl	80023e4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d914      	bls.n	8003aaa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d00d      	beq.n	8003aaa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f043 0210 	orr.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e007      	b.n	8003aba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d1cf      	bne.n	8003a58 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	8000003f 	.word	0x8000003f

08003ac8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fe9a 	bl	800280e <LL_ADC_IsDisableOngoing>
 8003ada:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fe81 	bl	80027e8 <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d047      	beq.n	8003b7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d144      	bne.n	8003b7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030d 	and.w	r3, r3, #13
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10c      	bne.n	8003b1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fe5b 	bl	80027c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b12:	f7fe fc67 	bl	80023e4 <HAL_GetTick>
 8003b16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b18:	e029      	b.n	8003b6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e023      	b.n	8003b7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b36:	f7fe fc55 	bl	80023e4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d914      	bls.n	8003b6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e007      	b.n	8003b7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1dc      	bne.n	8003b36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <LL_ADC_IsEnabled>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <LL_ADC_IsEnabled+0x18>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <LL_ADC_IsEnabled+0x1a>
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_REG_IsConversionOngoing>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b0a1      	sub	sp, #132	; 0x84
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e08b      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0a:	d102      	bne.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c0c:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	e001      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e06a      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ffb8 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 8003c3c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ffb2 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d14c      	bne.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d149      	bne.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c54:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003c56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d028      	beq.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c72:	035b      	lsls	r3, r3, #13
 8003c74:	430b      	orrs	r3, r1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c80:	f7ff ff81 	bl	8003b86 <LL_ADC_IsEnabled>
 8003c84:	4604      	mov	r4, r0
 8003c86:	4823      	ldr	r0, [pc, #140]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c88:	f7ff ff7d 	bl	8003b86 <LL_ADC_IsEnabled>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4323      	orrs	r3, r4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d133      	bne.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	6811      	ldr	r1, [r2, #0]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	6892      	ldr	r2, [r2, #8]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	431a      	orrs	r2, r3
 8003cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb0:	e024      	b.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cbe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cc2:	f7ff ff60 	bl	8003b86 <LL_ADC_IsEnabled>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	4812      	ldr	r0, [pc, #72]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cca:	f7ff ff5c 	bl	8003b86 <LL_ADC_IsEnabled>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4323      	orrs	r3, r4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d112      	bne.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cde:	f023 030f 	bic.w	r3, r3, #15
 8003ce2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ce4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce6:	e009      	b.n	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cfa:	e000      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3784      	adds	r7, #132	; 0x84
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	50000100 	.word	0x50000100
 8003d18:	50000300 	.word	0x50000300

08003d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <__NVIC_SetPriorityGrouping+0x44>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	60d3      	str	r3, [r2, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <__NVIC_GetPriorityGrouping+0x18>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0307 	and.w	r3, r3, #7
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db0b      	blt.n	8003daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	f003 021f 	and.w	r2, r3, #31
 8003d98:	4907      	ldr	r1, [pc, #28]	; (8003db8 <__NVIC_EnableIRQ+0x38>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2001      	movs	r0, #1
 8003da2:	fa00 f202 	lsl.w	r2, r0, r2
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	; (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	; (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f1c3 0307 	rsb	r3, r3, #7
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf28      	it	cs
 8003e2e:	2304      	movcs	r3, #4
 8003e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d902      	bls.n	8003e40 <NVIC_EncodePriority+0x30>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3b03      	subs	r3, #3
 8003e3e:	e000      	b.n	8003e42 <NVIC_EncodePriority+0x32>
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	401a      	ands	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	4313      	orrs	r3, r2
         );
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e88:	d301      	bcc.n	8003e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00f      	b.n	8003eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <SysTick_Config+0x40>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e96:	210f      	movs	r1, #15
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	f7ff ff8e 	bl	8003dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <SysTick_Config+0x40>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <SysTick_Config+0x40>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	e000e010 	.word	0xe000e010

08003ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff29 	bl	8003d1c <__NVIC_SetPriorityGrouping>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	4603      	mov	r3, r0
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee0:	f7ff ff40 	bl	8003d64 <__NVIC_GetPriorityGrouping>
 8003ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f7ff ff90 	bl	8003e10 <NVIC_EncodePriority>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff5f 	bl	8003dbc <__NVIC_SetPriority>
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff33 	bl	8003d80 <__NVIC_EnableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffa4 	bl	8003e78 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e08d      	b.n	800406a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_DMA_Init+0x138>)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d80f      	bhi.n	8003f7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b45      	ldr	r3, [pc, #276]	; (8004078 <HAL_DMA_Init+0x13c>)
 8003f62:	4413      	add	r3, r2
 8003f64:	4a45      	ldr	r2, [pc, #276]	; (800407c <HAL_DMA_Init+0x140>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	009a      	lsls	r2, r3, #2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a42      	ldr	r2, [pc, #264]	; (8004080 <HAL_DMA_Init+0x144>)
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
 8003f78:	e00e      	b.n	8003f98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b40      	ldr	r3, [pc, #256]	; (8004084 <HAL_DMA_Init+0x148>)
 8003f82:	4413      	add	r3, r2
 8003f84:	4a3d      	ldr	r2, [pc, #244]	; (800407c <HAL_DMA_Init+0x140>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	009a      	lsls	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <HAL_DMA_Init+0x14c>)
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa76 	bl	80044dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff8:	d102      	bne.n	8004000 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004014:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d010      	beq.n	8004040 <HAL_DMA_Init+0x104>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d80c      	bhi.n	8004040 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa96 	bl	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e008      	b.n	8004052 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40020407 	.word	0x40020407
 8004078:	bffdfff8 	.word	0xbffdfff8
 800407c:	cccccccd 	.word	0xcccccccd
 8004080:	40020000 	.word	0x40020000
 8004084:	bffdfbf8 	.word	0xbffdfbf8
 8004088:	40020400 	.word	0x40020400

0800408c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_DMA_Start_IT+0x20>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e066      	b.n	800417a <HAL_DMA_Start_IT+0xee>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d155      	bne.n	800416c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f9bb 	bl	8004460 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 020e 	orr.w	r2, r2, #14
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e00f      	b.n	8004124 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 020a 	orr.w	r2, r2, #10
 8004122:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004140:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004158:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e005      	b.n	8004178 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004174:	2302      	movs	r3, #2
 8004176:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d005      	beq.n	80041a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2204      	movs	r2, #4
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	e037      	b.n	8004216 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 020e 	bic.w	r2, r2, #14
 80041b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f003 021f 	and.w	r2, r3, #31
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004214:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d00d      	beq.n	8004268 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e047      	b.n	80042f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020e 	bic.w	r2, r2, #14
 8004276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
    }
  }
  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	2204      	movs	r2, #4
 8004324:	409a      	lsls	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d026      	beq.n	800437c <HAL_DMA_IRQHandler+0x7a>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d021      	beq.n	800437c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0204 	bic.w	r2, r2, #4
 8004354:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f003 021f 	and.w	r2, r3, #31
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2104      	movs	r1, #4
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	2b00      	cmp	r3, #0
 8004370:	d071      	beq.n	8004456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800437a:	e06c      	b.n	8004456 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2202      	movs	r2, #2
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02e      	beq.n	80043ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d029      	beq.n	80043ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020a 	bic.w	r2, r2, #10
 80043b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2102      	movs	r1, #2
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d038      	beq.n	8004456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043ec:	e033      	b.n	8004456 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2208      	movs	r2, #8
 80043f8:	409a      	lsls	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02a      	beq.n	8004458 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d025      	beq.n	8004458 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020e 	bic.w	r2, r2, #14
 800441a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f202 	lsl.w	r2, r1, r2
 800442e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004456:	bf00      	nop
 8004458:	bf00      	nop
}
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004476:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f003 021f 	and.w	r2, r3, #31
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2101      	movs	r1, #1
 8004498:	fa01 f202 	lsl.w	r2, r1, r2
 800449c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d108      	bne.n	80044c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044be:	e007      	b.n	80044d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d802      	bhi.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e001      	b.n	80044fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044f8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3b08      	subs	r3, #8
 8004506:	4a12      	ldr	r2, [pc, #72]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	461a      	mov	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2201      	movs	r2, #1
 8004530:	409a      	lsls	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40020407 	.word	0x40020407
 8004548:	40020800 	.word	0x40020800
 800454c:	40020820 	.word	0x40020820
 8004550:	cccccccd 	.word	0xcccccccd
 8004554:	40020880 	.word	0x40020880

08004558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800457a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3b01      	subs	r3, #1
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	1000823f 	.word	0x1000823f
 800459c:	40020940 	.word	0x40020940

080045a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e147      	b.n	8004842 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd fba4 	bl	8001d14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045dc:	f7fd ff02 	bl	80023e4 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045e2:	e012      	b.n	800460a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045e4:	f7fd fefe 	bl	80023e4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b0a      	cmp	r3, #10
 80045f0:	d90b      	bls.n	800460a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2203      	movs	r2, #3
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e11b      	b.n	8004842 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d0e5      	beq.n	80045e4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004628:	f7fd fedc 	bl	80023e4 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800462e:	e012      	b.n	8004656 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004630:	f7fd fed8 	bl	80023e4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b0a      	cmp	r3, #10
 800463c:	d90b      	bls.n	8004656 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2203      	movs	r2, #3
 800464e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0f5      	b.n	8004842 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0e5      	beq.n	8004630 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0202 	orr.w	r2, r2, #2
 8004672:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a74      	ldr	r2, [pc, #464]	; (800484c <HAL_FDCAN_Init+0x2ac>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d103      	bne.n	8004686 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800467e:	4a74      	ldr	r2, [pc, #464]	; (8004850 <HAL_FDCAN_Init+0x2b0>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7c1b      	ldrb	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d108      	bne.n	80046a0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	619a      	str	r2, [r3, #24]
 800469e:	e007      	b.n	80046b0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7c5b      	ldrb	r3, [r3, #17]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d108      	bne.n	80046ca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c6:	619a      	str	r2, [r3, #24]
 80046c8:	e007      	b.n	80046da <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7c9b      	ldrb	r3, [r3, #18]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d108      	bne.n	80046f4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f0:	619a      	str	r2, [r3, #24]
 80046f2:	e007      	b.n	8004704 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004702:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004728:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0210 	bic.w	r2, r2, #16
 8004738:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d108      	bne.n	8004754 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0204 	orr.w	r2, r2, #4
 8004750:	619a      	str	r2, [r3, #24]
 8004752:	e02c      	b.n	80047ae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d028      	beq.n	80047ae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d01c      	beq.n	800479e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004772:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0210 	orr.w	r2, r2, #16
 8004782:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d110      	bne.n	80047ae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	619a      	str	r2, [r3, #24]
 800479c:	e007      	b.n	80047ae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0220 	orr.w	r2, r2, #32
 80047ac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047be:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047c6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047d6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e2:	d115      	bne.n	8004810 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	3b01      	subs	r3, #1
 80047f0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047f2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	3b01      	subs	r3, #1
 80047fa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047fc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	3b01      	subs	r3, #1
 8004806:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800480c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800480e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f814 	bl	8004854 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40006400 	.word	0x40006400
 8004850:	40006500 	.word	0x40006500

08004854 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800485e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	041a      	lsls	r2, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004894:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	061a      	lsls	r2, r3, #24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e005      	b.n	80048e2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3304      	adds	r3, #4
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3f3      	bcc.n	80048d6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	4000a400 	.word	0x4000a400

08004900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800490e:	e15a      	b.n	8004bc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	4013      	ands	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 814c 	beq.w	8004bc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d005      	beq.n	8004940 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800493c:	2b02      	cmp	r3, #2
 800493e:	d130      	bne.n	80049a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004976:	2201      	movs	r2, #1
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0201 	and.w	r2, r3, #1
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d017      	beq.n	80049de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d123      	bne.n	8004a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3208      	adds	r2, #8
 80049f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	08da      	lsrs	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3208      	adds	r2, #8
 8004a2c:	6939      	ldr	r1, [r7, #16]
 8004a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0203 	and.w	r2, r3, #3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80a6 	beq.w	8004bc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_GPIO_Init+0x2e4>)
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	4a5a      	ldr	r2, [pc, #360]	; (8004be4 <HAL_GPIO_Init+0x2e4>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8004a80:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_GPIO_Init+0x2e4>)
 8004a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a8c:	4a56      	ldr	r2, [pc, #344]	; (8004be8 <HAL_GPIO_Init+0x2e8>)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	3302      	adds	r3, #2
 8004a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	220f      	movs	r2, #15
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ab6:	d01f      	beq.n	8004af8 <HAL_GPIO_Init+0x1f8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <HAL_GPIO_Init+0x2ec>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d019      	beq.n	8004af4 <HAL_GPIO_Init+0x1f4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a4b      	ldr	r2, [pc, #300]	; (8004bf0 <HAL_GPIO_Init+0x2f0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_GPIO_Init+0x1f0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a4a      	ldr	r2, [pc, #296]	; (8004bf4 <HAL_GPIO_Init+0x2f4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00d      	beq.n	8004aec <HAL_GPIO_Init+0x1ec>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a49      	ldr	r2, [pc, #292]	; (8004bf8 <HAL_GPIO_Init+0x2f8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d007      	beq.n	8004ae8 <HAL_GPIO_Init+0x1e8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a48      	ldr	r2, [pc, #288]	; (8004bfc <HAL_GPIO_Init+0x2fc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_GPIO_Init+0x1e4>
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	e00a      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004ae4:	2306      	movs	r3, #6
 8004ae6:	e008      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	e006      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004aec:	2303      	movs	r3, #3
 8004aee:	e004      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e002      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <HAL_GPIO_Init+0x1fa>
 8004af8:	2300      	movs	r3, #0
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	f002 0203 	and.w	r2, r2, #3
 8004b00:	0092      	lsls	r2, r2, #2
 8004b02:	4093      	lsls	r3, r2
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b0a:	4937      	ldr	r1, [pc, #220]	; (8004be8 <HAL_GPIO_Init+0x2e8>)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b42:	4b2f      	ldr	r3, [pc, #188]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b66:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b6c:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_GPIO_Init+0x300>)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f ae9d 	bne.w	8004910 <HAL_GPIO_Init+0x10>
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40010000 	.word	0x40010000
 8004bec:	48000400 	.word	0x48000400
 8004bf0:	48000800 	.word	0x48000800
 8004bf4:	48000c00 	.word	0x48000c00
 8004bf8:	48001000 	.word	0x48001000
 8004bfc:	48001400 	.word	0x48001400
 8004c00:	40010400 	.word	0x40010400

08004c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
 8004c10:	4613      	mov	r3, r2
 8004c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c14:	787b      	ldrb	r3, [r7, #1]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c20:	e002      	b.n	8004c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d141      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c42:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4e:	d131      	bne.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c50:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c56:	4a46      	ldr	r2, [pc, #280]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c68:	4a41      	ldr	r2, [pc, #260]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c70:	4b40      	ldr	r3, [pc, #256]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2232      	movs	r2, #50	; 0x32
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	0c9b      	lsrs	r3, r3, #18
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c86:	e002      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f2      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d158      	bne.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e057      	b.n	8004d64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb4:	4b2e      	ldr	r3, [pc, #184]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cba:	4a2d      	ldr	r2, [pc, #180]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cc4:	e04d      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ccc:	d141      	bne.n	8004d52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d131      	bne.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce2:	4a23      	ldr	r2, [pc, #140]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2232      	movs	r2, #50	; 0x32
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	0c9b      	lsrs	r3, r3, #18
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d12:	e002      	b.n	8004d1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d102      	bne.n	8004d2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f2      	bne.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3a:	d112      	bne.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e011      	b.n	8004d64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d50:	e007      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d5a:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40007000 	.word	0x40007000
 8004d74:	20000004 	.word	0x20000004
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d8a:	6093      	str	r3, [r2, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40007000 	.word	0x40007000

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e306      	b.n	80053bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d075      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dba:	4b97      	ldr	r3, [pc, #604]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc4:	4b94      	ldr	r3, [pc, #592]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_OscConfig+0x3e>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d002      	beq.n	8004de0 <HAL_RCC_OscConfig+0x44>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05b      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x108>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d157      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e2e1      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_OscConfig+0x74>
 8004e02:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a84      	ldr	r2, [pc, #528]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e01d      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x98>
 8004e1a:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a7e      	ldr	r2, [pc, #504]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b7c      	ldr	r3, [pc, #496]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a7b      	ldr	r2, [pc, #492]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00b      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e34:	4b78      	ldr	r3, [pc, #480]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a77      	ldr	r2, [pc, #476]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b75      	ldr	r3, [pc, #468]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a74      	ldr	r2, [pc, #464]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fac6 	bl	80023e4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fac2 	bl	80023e4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e2a6      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0xc0>
 8004e7a:	e014      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fab2 	bl	80023e4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fd faae 	bl	80023e4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e292      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e96:	4b60      	ldr	r3, [pc, #384]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0xe8>
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d075      	beq.n	8004f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ebc:	4b56      	ldr	r3, [pc, #344]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x136>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d002      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x13c>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11f      	bne.n	8004f18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed8:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x154>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e265      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef0:	4b49      	ldr	r3, [pc, #292]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	4946      	ldr	r1, [pc, #280]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f04:	4b45      	ldr	r3, [pc, #276]	; (800501c <HAL_RCC_OscConfig+0x280>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd fa1f 	bl	800234c <HAL_InitTick>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d043      	beq.n	8004f9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e251      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d023      	beq.n	8004f68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f20:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fa5a 	bl	80023e4 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fd fa56 	bl	80023e4 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e23a      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f46:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	492d      	ldr	r1, [pc, #180]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
 8004f66:	e01a      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fd fa36 	bl	80023e4 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fd fa32 	bl	80023e4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e216      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x1e0>
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d041      	beq.n	800502e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01c      	beq.n	8004fec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb2:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7fd fa0f 	bl	80023e4 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fca:	f7fd fa0b 	bl	80023e4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e1ef      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <HAL_RCC_OscConfig+0x22e>
 8004fea:	e020      	b.n	800502e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fd f9f2 	bl	80023e4 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005002:	e00d      	b.n	8005020 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005004:	f7fd f9ee 	bl	80023e4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d906      	bls.n	8005020 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1d2      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005020:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1ea      	bne.n	8005004 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a6 	beq.w	8005188 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005040:	4b84      	ldr	r3, [pc, #528]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_OscConfig+0x2b4>
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x2b6>
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	4b7f      	ldr	r3, [pc, #508]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	4a7e      	ldr	r2, [pc, #504]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005060:	6593      	str	r3, [r2, #88]	; 0x58
 8005062:	4b7c      	ldr	r3, [pc, #496]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800506e:	2301      	movs	r3, #1
 8005070:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005072:	4b79      	ldr	r3, [pc, #484]	; (8005258 <HAL_RCC_OscConfig+0x4bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d118      	bne.n	80050b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x4bc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	; (8005258 <HAL_RCC_OscConfig+0x4bc>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508a:	f7fd f9ab 	bl	80023e4 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd f9a7 	bl	80023e4 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e18b      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x4bc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d108      	bne.n	80050ca <HAL_RCC_OscConfig+0x32e>
 80050b8:	4b66      	ldr	r3, [pc, #408]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	4a65      	ldr	r2, [pc, #404]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c8:	e024      	b.n	8005114 <HAL_RCC_OscConfig+0x378>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b05      	cmp	r3, #5
 80050d0:	d110      	bne.n	80050f4 <HAL_RCC_OscConfig+0x358>
 80050d2:	4b60      	ldr	r3, [pc, #384]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050e2:	4b5c      	ldr	r3, [pc, #368]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	4a5a      	ldr	r2, [pc, #360]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f2:	e00f      	b.n	8005114 <HAL_RCC_OscConfig+0x378>
 80050f4:	4b57      	ldr	r3, [pc, #348]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	4a56      	ldr	r2, [pc, #344]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005104:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	4a52      	ldr	r2, [pc, #328]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d016      	beq.n	800514a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fd f962 	bl	80023e4 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005122:	e00a      	b.n	800513a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fd f95e 	bl	80023e4 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e140      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513a:	4b46      	ldr	r3, [pc, #280]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ed      	beq.n	8005124 <HAL_RCC_OscConfig+0x388>
 8005148:	e015      	b.n	8005176 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fd f94b 	bl	80023e4 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fd f947 	bl	80023e4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e129      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005168:	4b3a      	ldr	r3, [pc, #232]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ed      	bne.n	8005152 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005176:	7ffb      	ldrb	r3, [r7, #31]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517c:	4b35      	ldr	r3, [pc, #212]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	4a34      	ldr	r2, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d03c      	beq.n	800520e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01c      	beq.n	80051d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800519e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a2:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd f91a 	bl	80023e4 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b4:	f7fd f916 	bl	80023e4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0fa      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ef      	beq.n	80051b4 <HAL_RCC_OscConfig+0x418>
 80051d4:	e01b      	b.n	800520e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051d6:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80051d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fd f8fd 	bl	80023e4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ee:	f7fd f8f9 	bl	80023e4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e0dd      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ef      	bne.n	80051ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80d1 	beq.w	80053ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b0c      	cmp	r3, #12
 8005222:	f000 808b 	beq.w	800533c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d15e      	bne.n	80052ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a08      	ldr	r2, [pc, #32]	; (8005254 <HAL_RCC_OscConfig+0x4b8>)
 8005234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fd f8d3 	bl	80023e4 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005240:	e00c      	b.n	800525c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005242:	f7fd f8cf 	bl	80023e4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d905      	bls.n	800525c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e0b3      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800525c:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ec      	bne.n	8005242 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005268:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	4b56      	ldr	r3, [pc, #344]	; (80053c8 <HAL_RCC_OscConfig+0x62c>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6a11      	ldr	r1, [r2, #32]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005278:	3a01      	subs	r2, #1
 800527a:	0112      	lsls	r2, r2, #4
 800527c:	4311      	orrs	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005282:	0212      	lsls	r2, r2, #8
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	3a01      	subs	r2, #1
 800528e:	0552      	lsls	r2, r2, #21
 8005290:	4311      	orrs	r1, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005296:	0852      	lsrs	r2, r2, #1
 8005298:	3a01      	subs	r2, #1
 800529a:	0652      	lsls	r2, r2, #25
 800529c:	4311      	orrs	r1, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052a2:	06d2      	lsls	r2, r2, #27
 80052a4:	430a      	orrs	r2, r1
 80052a6:	4947      	ldr	r1, [pc, #284]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ac:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a44      	ldr	r2, [pc, #272]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b8:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a41      	ldr	r2, [pc, #260]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fd f88e 	bl	80023e4 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd f88a 	bl	80023e4 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e06e      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x530>
 80052ea:	e066      	b.n	80053ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ec:	4b35      	ldr	r3, [pc, #212]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a34      	ldr	r2, [pc, #208]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052f8:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a31      	ldr	r2, [pc, #196]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005304:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a2e      	ldr	r2, [pc, #184]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 800530a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd f866 	bl	80023e4 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fd f862 	bl	80023e4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e046      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532e:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x580>
 800533a:	e03e      	b.n	80053ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e039      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCC_OscConfig+0x628>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 0203 	and.w	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	429a      	cmp	r2, r3
 800535a:	d12c      	bne.n	80053b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	3b01      	subs	r3, #1
 8005368:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d123      	bne.n	80053b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d11b      	bne.n	80053b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d113      	bne.n	80053b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	3b01      	subs	r3, #1
 800539c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d109      	bne.n	80053b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	3b01      	subs	r3, #1
 80053b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	019f800c 	.word	0x019f800c

080053cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e11e      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e4:	4b91      	ldr	r3, [pc, #580]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d910      	bls.n	8005414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b8e      	ldr	r3, [pc, #568]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 020f 	bic.w	r2, r3, #15
 80053fa:	498c      	ldr	r1, [pc, #560]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b8a      	ldr	r3, [pc, #552]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e106      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d073      	beq.n	8005508 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d129      	bne.n	800547c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005428:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0f4      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005438:	f000 f99e 	bl	8005778 <RCC_GetSysClockFreqFromPLLSource>
 800543c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4a7c      	ldr	r2, [pc, #496]	; (8005634 <HAL_RCC_ClockConfig+0x268>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d93f      	bls.n	80054c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005446:	4b7a      	ldr	r3, [pc, #488]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800545a:	2b00      	cmp	r3, #0
 800545c:	d033      	beq.n	80054c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005462:	2b00      	cmp	r3, #0
 8005464:	d12f      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005466:	4b72      	ldr	r3, [pc, #456]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546e:	4a70      	ldr	r2, [pc, #448]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e024      	b.n	80054c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d107      	bne.n	8005494 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005484:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e0c6      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005494:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0be      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054a4:	f000 f8ce 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4a61      	ldr	r2, [pc, #388]	; (8005634 <HAL_RCC_ClockConfig+0x268>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d909      	bls.n	80054c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054b2:	4b5f      	ldr	r3, [pc, #380]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ba:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054c6:	4b5a      	ldr	r3, [pc, #360]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 0203 	bic.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4957      	ldr	r1, [pc, #348]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7fc ff84 	bl	80023e4 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e0:	f7fc ff80 	bl	80023e4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e095      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	4b4e      	ldr	r3, [pc, #312]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 020c 	and.w	r2, r3, #12
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	429a      	cmp	r2, r3
 8005506:	d1eb      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d023      	beq.n	800555c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800552a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005538:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005540:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005546:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4936      	ldr	r1, [pc, #216]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
 800555a:	e008      	b.n	800556e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b80      	cmp	r3, #128	; 0x80
 8005560:	d105      	bne.n	800556e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005562:	4b33      	ldr	r3, [pc, #204]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4a32      	ldr	r2, [pc, #200]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 8005568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800556c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800556e:	4b2f      	ldr	r3, [pc, #188]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d21d      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 020f 	bic.w	r2, r3, #15
 8005584:	4929      	ldr	r1, [pc, #164]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800558c:	f7fc ff2a 	bl	80023e4 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fc ff26 	bl	80023e4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e03b      	b.n	8005622 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCC_ClockConfig+0x260>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1ed      	bne.n	8005594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4917      	ldr	r1, [pc, #92]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	490f      	ldr	r1, [pc, #60]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055f6:	f000 f825 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	490c      	ldr	r1, [pc, #48]	; (8005638 <HAL_RCC_ClockConfig+0x26c>)
 8005608:	5ccb      	ldrb	r3, [r1, r3]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	4a0a      	ldr	r2, [pc, #40]	; (800563c <HAL_RCC_ClockConfig+0x270>)
 8005614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_RCC_ClockConfig+0x274>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fc fe96 	bl	800234c <HAL_InitTick>
 8005620:	4603      	mov	r3, r0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40022000 	.word	0x40022000
 8005630:	40021000 	.word	0x40021000
 8005634:	04c4b400 	.word	0x04c4b400
 8005638:	080094a0 	.word	0x080094a0
 800563c:	20000004 	.word	0x20000004
 8005640:	20000008 	.word	0x20000008

08005644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800564a:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b04      	cmp	r3, #4
 8005654:	d102      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e047      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b08      	cmp	r3, #8
 8005666:	d102      	bne.n	800566e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005668:	4b26      	ldr	r3, [pc, #152]	; (8005704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e03e      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800566e:	4b23      	ldr	r3, [pc, #140]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d136      	bne.n	80056e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3301      	adds	r3, #1
 8005690:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10c      	bne.n	80056b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005698:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <HAL_RCC_GetSysClockFreq+0xc0>)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a2:	68d2      	ldr	r2, [r2, #12]
 80056a4:	0a12      	lsrs	r2, r2, #8
 80056a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	617b      	str	r3, [r7, #20]
      break;
 80056b0:	e00c      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4a10      	ldr	r2, [pc, #64]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80056bc:	68d2      	ldr	r2, [r2, #12]
 80056be:	0a12      	lsrs	r2, r2, #8
 80056c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
      break;
 80056ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0e5b      	lsrs	r3, r3, #25
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e001      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056ec:	693b      	ldr	r3, [r7, #16]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	00f42400 	.word	0x00f42400
 8005704:	007a1200 	.word	0x007a1200

08005708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <HAL_RCC_GetHCLKFreq+0x14>)
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000004 	.word	0x20000004

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005724:	f7ff fff0 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4904      	ldr	r1, [pc, #16]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	080094b0 	.word	0x080094b0

0800574c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005750:	f7ff ffda 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0adb      	lsrs	r3, r3, #11
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	080094b0 	.word	0x080094b0

08005778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d10c      	bne.n	80057b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800579c:	4a17      	ldr	r2, [pc, #92]	; (80057fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a6:	68d2      	ldr	r2, [r2, #12]
 80057a8:	0a12      	lsrs	r2, r2, #8
 80057aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
    break;
 80057b4:	e00c      	b.n	80057d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057b6:	4a12      	ldr	r2, [pc, #72]	; (8005800 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057c0:	68d2      	ldr	r2, [r2, #12]
 80057c2:	0a12      	lsrs	r2, r2, #8
 80057c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    break;
 80057ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	0e5b      	lsrs	r3, r3, #25
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	3301      	adds	r3, #1
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057ea:	687b      	ldr	r3, [r7, #4]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40021000 	.word	0x40021000
 80057fc:	007a1200 	.word	0x007a1200
 8005800:	00f42400 	.word	0x00f42400

08005804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800580c:	2300      	movs	r3, #0
 800580e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005810:	2300      	movs	r3, #0
 8005812:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8098 	beq.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005822:	2300      	movs	r3, #0
 8005824:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005826:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	4b40      	ldr	r3, [pc, #256]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	4a3f      	ldr	r2, [pc, #252]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583c:	6593      	str	r3, [r2, #88]	; 0x58
 800583e:	4b3d      	ldr	r3, [pc, #244]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584a:	2301      	movs	r3, #1
 800584c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584e:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a39      	ldr	r2, [pc, #228]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800585a:	f7fc fdc3 	bl	80023e4 <HAL_GetTick>
 800585e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005860:	e009      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005862:	f7fc fdbf 	bl	80023e4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d902      	bls.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	74fb      	strb	r3, [r7, #19]
        break;
 8005874:	e005      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ef      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d159      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005888:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01e      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d019      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058a4:	4b23      	ldr	r3, [pc, #140]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058b0:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d016      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fc fd7f 	bl	80023e4 <HAL_GetTick>
 80058e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e8:	e00b      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fc fd7b 	bl	80023e4 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d902      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ec      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800592c:	e008      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	74bb      	strb	r3, [r7, #18]
 8005932:	e005      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005934:	40021000 	.word	0x40021000
 8005938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005940:	7c7b      	ldrb	r3, [r7, #17]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005946:	4ba6      	ldr	r3, [pc, #664]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594a:	4aa5      	ldr	r2, [pc, #660]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800595e:	4ba0      	ldr	r3, [pc, #640]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005964:	f023 0203 	bic.w	r2, r3, #3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	499c      	ldr	r1, [pc, #624]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005980:	4b97      	ldr	r3, [pc, #604]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f023 020c 	bic.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	4994      	ldr	r1, [pc, #592]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059a2:	4b8f      	ldr	r3, [pc, #572]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	498b      	ldr	r1, [pc, #556]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059c4:	4b86      	ldr	r3, [pc, #536]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	4983      	ldr	r1, [pc, #524]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059e6:	4b7e      	ldr	r3, [pc, #504]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	497a      	ldr	r1, [pc, #488]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a08:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4972      	ldr	r1, [pc, #456]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4969      	ldr	r1, [pc, #420]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a4c:	4b64      	ldr	r3, [pc, #400]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	4961      	ldr	r1, [pc, #388]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a6e:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	4958      	ldr	r1, [pc, #352]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a90:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	4950      	ldr	r1, [pc, #320]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab0:	4b4b      	ldr	r3, [pc, #300]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a4a      	ldr	r2, [pc, #296]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ac8:	4b45      	ldr	r3, [pc, #276]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	4942      	ldr	r1, [pc, #264]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae8:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b00:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	4934      	ldr	r1, [pc, #208]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b1e:	d105      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b20:	4b2f      	ldr	r3, [pc, #188]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a2e      	ldr	r2, [pc, #184]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b38:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	4926      	ldr	r1, [pc, #152]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	4918      	ldr	r1, [pc, #96]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a12      	ldr	r2, [pc, #72]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d015      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	490a      	ldr	r1, [pc, #40]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc6:	d105      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000

08005be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e049      	b.n	8005c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f8dc 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f000 fc56 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e049      	b.n	8005d38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f841 	bl	8005d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fbff 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0202 	mvn.w	r2, #2
 8005d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb7e 	bl	8006498 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb70 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fb81 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0204 	mvn.w	r2, #4
 8005dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fb54 	bl	8006498 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fb46 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb57 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0208 	mvn.w	r2, #8
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb2a 	bl	8006498 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb1c 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb2d 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2208      	movs	r2, #8
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb00 	bl	8006498 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 faf2 	bl	8006484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fb03 	bl	80064ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0201 	mvn.w	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 facc 	bl	8006470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f836 	bl	8006f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d107      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 f829 	bl	8006f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d10e      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d107      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fab1 	bl	80064c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d10e      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0220 	mvn.w	r2, #32
 8005f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 ffe9 	bl	8006f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f98:	d10f      	bne.n	8005fba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 ffef 	bl	8006f98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc8:	d10f      	bne.n	8005fea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd8:	d107      	bne.n	8005fea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 ffe1 	bl	8006fac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff8:	d10f      	bne.n	800601a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006008:	d107      	bne.n	800601a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 ffd3 	bl	8006fc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006028:	d10f      	bne.n	800604a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 ffc5 	bl	8006fd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800606e:	2302      	movs	r3, #2
 8006070:	e0ff      	b.n	8006272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b14      	cmp	r3, #20
 800607e:	f200 80f0 	bhi.w	8006262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006263 	.word	0x08006263
 8006090:	08006263 	.word	0x08006263
 8006094:	08006263 	.word	0x08006263
 8006098:	0800611d 	.word	0x0800611d
 800609c:	08006263 	.word	0x08006263
 80060a0:	08006263 	.word	0x08006263
 80060a4:	08006263 	.word	0x08006263
 80060a8:	0800615f 	.word	0x0800615f
 80060ac:	08006263 	.word	0x08006263
 80060b0:	08006263 	.word	0x08006263
 80060b4:	08006263 	.word	0x08006263
 80060b8:	0800619f 	.word	0x0800619f
 80060bc:	08006263 	.word	0x08006263
 80060c0:	08006263 	.word	0x08006263
 80060c4:	08006263 	.word	0x08006263
 80060c8:	080061e1 	.word	0x080061e1
 80060cc:	08006263 	.word	0x08006263
 80060d0:	08006263 	.word	0x08006263
 80060d4:	08006263 	.word	0x08006263
 80060d8:	08006221 	.word	0x08006221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fa86 	bl	80065f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6999      	ldr	r1, [r3, #24]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	619a      	str	r2, [r3, #24]
      break;
 800611a:	e0a5      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 faf6 	bl	8006714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6999      	ldr	r1, [r3, #24]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	619a      	str	r2, [r3, #24]
      break;
 800615c:	e084      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fb5f 	bl	8006828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0208 	orr.w	r2, r2, #8
 8006178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0204 	bic.w	r2, r2, #4
 8006188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69d9      	ldr	r1, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	61da      	str	r2, [r3, #28]
      break;
 800619c:	e064      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fbc7 	bl	8006938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69d9      	ldr	r1, [r3, #28]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	021a      	lsls	r2, r3, #8
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	61da      	str	r2, [r3, #28]
      break;
 80061de:	e043      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fc30 	bl	8006a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0204 	bic.w	r2, r2, #4
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800621e:	e023      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fc74 	bl	8006b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006260:	e002      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
      break;
 8006266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop

0800627c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIM_ConfigClockSource+0x1c>
 8006294:	2302      	movs	r3, #2
 8006296:	e0de      	b.n	8006456 <HAL_TIM_ConfigClockSource+0x1da>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a63      	ldr	r2, [pc, #396]	; (8006460 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	f000 80a9 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 80062d8:	4a61      	ldr	r2, [pc, #388]	; (8006460 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	f200 80ae 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 80062e0:	4a60      	ldr	r2, [pc, #384]	; (8006464 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f000 80a1 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 80062e8:	4a5e      	ldr	r2, [pc, #376]	; (8006464 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f200 80a6 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 80062f0:	4a5d      	ldr	r2, [pc, #372]	; (8006468 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f000 8099 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 80062f8:	4a5b      	ldr	r2, [pc, #364]	; (8006468 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f200 809e 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006300:	4a5a      	ldr	r2, [pc, #360]	; (800646c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f000 8091 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006308:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_TIM_ConfigClockSource+0x1f0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f200 8096 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006310:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006314:	f000 8089 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800631c:	f200 808e 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d03e      	beq.n	80063a4 <HAL_TIM_ConfigClockSource+0x128>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632a:	f200 8087 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	f000 8086 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1c6>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d87f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 800633c:	2b70      	cmp	r3, #112	; 0x70
 800633e:	d01a      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xfa>
 8006340:	2b70      	cmp	r3, #112	; 0x70
 8006342:	d87b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d050      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x16e>
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d877      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 800634c:	2b50      	cmp	r3, #80	; 0x50
 800634e:	d03c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x14e>
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d873      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d058      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x18e>
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d86f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d064      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d86b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d060      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d867      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05c      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d05a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1ae>
 8006374:	e062      	b.n	800643c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f000 fca7 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
      break;
 80063a2:	e04f      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f000 fc90 	bl	8006cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e03c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fc02 	bl	8006be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2150      	movs	r1, #80	; 0x50
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fc5b 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 80063e8:	e02c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fc21 	bl	8006c3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2160      	movs	r1, #96	; 0x60
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fc4b 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 8006408:	e01c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fbe2 	bl	8006be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fc3b 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 8006428:	e00c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 fc32 	bl	8006c9e <TIM_ITRx_SetConfig>
      break;
 800643a:	e003      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e000      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100070 	.word	0x00100070
 8006464:	00100040 	.word	0x00100040
 8006468:	00100030 	.word	0x00100030
 800646c:	00100020 	.word	0x00100020

08006470 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3c      	ldr	r2, [pc, #240]	; (80065d8 <TIM_Base_SetConfig+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00f      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d00b      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a39      	ldr	r2, [pc, #228]	; (80065dc <TIM_Base_SetConfig+0x108>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a38      	ldr	r2, [pc, #224]	; (80065e0 <TIM_Base_SetConfig+0x10c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0x38>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <TIM_Base_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <TIM_Base_SetConfig+0x104>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <TIM_Base_SetConfig+0x108>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <TIM_Base_SetConfig+0x10c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_Base_SetConfig+0x110>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a26      	ldr	r2, [pc, #152]	; (80065ec <TIM_Base_SetConfig+0x118>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0x8a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <TIM_Base_SetConfig+0x104>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00f      	beq.n	80065bc <TIM_Base_SetConfig+0xe8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <TIM_Base_SetConfig+0x110>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00b      	beq.n	80065bc <TIM_Base_SetConfig+0xe8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d007      	beq.n	80065bc <TIM_Base_SetConfig+0xe8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a0f      	ldr	r2, [pc, #60]	; (80065ec <TIM_Base_SetConfig+0x118>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0xe8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0e      	ldr	r2, [pc, #56]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d103      	bne.n	80065c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	615a      	str	r2, [r3, #20]
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0302 	bic.w	r3, r3, #2
 8006640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <TIM_OC1_SetConfig+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00f      	beq.n	8006674 <TIM_OC1_SetConfig+0x80>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <TIM_OC1_SetConfig+0x110>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00b      	beq.n	8006674 <TIM_OC1_SetConfig+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <TIM_OC1_SetConfig+0x114>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_OC1_SetConfig+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a29      	ldr	r2, [pc, #164]	; (800670c <TIM_OC1_SetConfig+0x118>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC1_SetConfig+0x80>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a28      	ldr	r2, [pc, #160]	; (8006710 <TIM_OC1_SetConfig+0x11c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10c      	bne.n	800668e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0308 	bic.w	r3, r3, #8
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <TIM_OC1_SetConfig+0x10c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_OC1_SetConfig+0xc2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <TIM_OC1_SetConfig+0x110>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_OC1_SetConfig+0xc2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a19      	ldr	r2, [pc, #100]	; (8006708 <TIM_OC1_SetConfig+0x114>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_OC1_SetConfig+0xc2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a18      	ldr	r2, [pc, #96]	; (800670c <TIM_OC1_SetConfig+0x118>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC1_SetConfig+0xc2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a17      	ldr	r2, [pc, #92]	; (8006710 <TIM_OC1_SetConfig+0x11c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d111      	bne.n	80066da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0210 	bic.w	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0320 	bic.w	r3, r3, #32
 8006762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a28      	ldr	r2, [pc, #160]	; (8006814 <TIM_OC2_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC2_SetConfig+0x6c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a27      	ldr	r2, [pc, #156]	; (8006818 <TIM_OC2_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10d      	bne.n	800679c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <TIM_OC2_SetConfig+0x100>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00f      	beq.n	80067c4 <TIM_OC2_SetConfig+0xb0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <TIM_OC2_SetConfig+0x104>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <TIM_OC2_SetConfig+0xb0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1b      	ldr	r2, [pc, #108]	; (800681c <TIM_OC2_SetConfig+0x108>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_OC2_SetConfig+0xb0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <TIM_OC2_SetConfig+0x10c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC2_SetConfig+0xb0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_OC2_SetConfig+0x110>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d113      	bne.n	80067ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800

08006828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a27      	ldr	r2, [pc, #156]	; (8006924 <TIM_OC3_SetConfig+0xfc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_OC3_SetConfig+0x6a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a26      	ldr	r2, [pc, #152]	; (8006928 <TIM_OC3_SetConfig+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10d      	bne.n	80068ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <TIM_OC3_SetConfig+0xfc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_OC3_SetConfig+0xae>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <TIM_OC3_SetConfig+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_OC3_SetConfig+0xae>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1a      	ldr	r2, [pc, #104]	; (800692c <TIM_OC3_SetConfig+0x104>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_OC3_SetConfig+0xae>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a19      	ldr	r2, [pc, #100]	; (8006930 <TIM_OC3_SetConfig+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_OC3_SetConfig+0xae>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a18      	ldr	r2, [pc, #96]	; (8006934 <TIM_OC3_SetConfig+0x10c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d113      	bne.n	80068fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	621a      	str	r2, [r3, #32]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40013400 	.word	0x40013400
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800

08006938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <TIM_OC4_SetConfig+0x100>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC4_SetConfig+0x6c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <TIM_OC4_SetConfig+0x104>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d10d      	bne.n	80069c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <TIM_OC4_SetConfig+0x100>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <TIM_OC4_SetConfig+0xb0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <TIM_OC4_SetConfig+0x104>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_OC4_SetConfig+0xb0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <TIM_OC4_SetConfig+0x108>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_OC4_SetConfig+0xb0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a1a      	ldr	r2, [pc, #104]	; (8006a44 <TIM_OC4_SetConfig+0x10c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC4_SetConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <TIM_OC4_SetConfig+0x110>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d113      	bne.n	8006a10 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	019b      	lsls	r3, r3, #6
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	019b      	lsls	r3, r3, #6
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	621a      	str	r2, [r3, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40013400 	.word	0x40013400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800

08006a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	; (8006b00 <TIM_OC5_SetConfig+0xb4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00f      	beq.n	8006ac6 <TIM_OC5_SetConfig+0x7a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <TIM_OC5_SetConfig+0xb8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_OC5_SetConfig+0x7a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <TIM_OC5_SetConfig+0xbc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d007      	beq.n	8006ac6 <TIM_OC5_SetConfig+0x7a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <TIM_OC5_SetConfig+0xc0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_OC5_SetConfig+0x7a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <TIM_OC5_SetConfig+0xc4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d109      	bne.n	8006ada <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	621a      	str	r2, [r3, #32]
}
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40013400 	.word	0x40013400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800

08006b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	051b      	lsls	r3, r3, #20
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <TIM_OC6_SetConfig+0xb8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00f      	beq.n	8006b90 <TIM_OC6_SetConfig+0x7c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC6_SetConfig+0xbc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_OC6_SetConfig+0x7c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <TIM_OC6_SetConfig+0xc0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_OC6_SetConfig+0x7c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <TIM_OC6_SetConfig+0xc4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_OC6_SetConfig+0x7c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a14      	ldr	r2, [pc, #80]	; (8006bdc <TIM_OC6_SetConfig+0xc8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d109      	bne.n	8006ba4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	029b      	lsls	r3, r3, #10
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40013400 	.word	0x40013400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40014800 	.word	0x40014800

08006be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 030a 	bic.w	r3, r3, #10
 8006c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0210 	bic.w	r2, r3, #16
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	031b      	lsls	r3, r3, #12
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f043 0307 	orr.w	r3, r3, #7
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	371c      	adds	r7, #28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e065      	b.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a2b      	ldr	r2, [pc, #172]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d108      	bne.n	8006d76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d013      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10c      	bne.n	8006dea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40013400 	.word	0x40013400
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40014000 	.word	0x40014000

08006e1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e087      	b.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a25      	ldr	r2, [pc, #148]	; (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d106      	bne.n	8006ed4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d126      	bne.n	8006f36 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	051b      	lsls	r3, r3, #20
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a0e      	ldr	r2, [pc, #56]	; (8006f54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d106      	bne.n	8006f36 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400

08006f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e042      	b.n	8007080 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fa ffe9 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2224      	movs	r2, #36	; 0x24
 8007016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0201 	bic.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc60 	bl	80078f0 <UART_SetConfig>
 8007030:	4603      	mov	r3, r0
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e022      	b.n	8007080 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 ff20 	bl	8007e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ffa7 	bl	8007fcc <UART_CheckIdleState>
 800707e:	4603      	mov	r3, r0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709c:	2b20      	cmp	r3, #32
 800709e:	d17a      	bne.n	8007196 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_UART_Transmit_DMA+0x24>
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e073      	b.n	8007198 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UART_Transmit_DMA+0x36>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e06c      	b.n	8007198 <HAL_UART_Transmit_DMA+0x110>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2221      	movs	r2, #33	; 0x21
 80070e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02c      	beq.n	800714e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f8:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <HAL_UART_Transmit_DMA+0x118>)
 80070fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007100:	4a28      	ldr	r2, [pc, #160]	; (80071a4 <HAL_UART_Transmit_DMA+0x11c>)
 8007102:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <HAL_UART_Transmit_DMA+0x120>)
 800710a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007110:	2200      	movs	r2, #0
 8007112:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711c:	4619      	mov	r1, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3328      	adds	r3, #40	; 0x28
 8007124:	461a      	mov	r2, r3
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	f7fc ffb0 	bl	800408c <HAL_DMA_Start_IT>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2210      	movs	r2, #16
 8007136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e024      	b.n	8007198 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	613b      	str	r3, [r7, #16]
   return(result);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717e:	623a      	str	r2, [r7, #32]
 8007180:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	69f9      	ldr	r1, [r7, #28]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	61bb      	str	r3, [r7, #24]
   return(result);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e5      	bne.n	800715e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3728      	adds	r7, #40	; 0x28
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	08008493 	.word	0x08008493
 80071a4:	0800852d 	.word	0x0800852d
 80071a8:	080086a7 	.word	0x080086a7

080071ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d142      	bne.n	800724a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_UART_Receive_DMA+0x24>
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e03b      	b.n	800724c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Receive_DMA+0x36>
 80071de:	2302      	movs	r3, #2
 80071e0:	e034      	b.n	800724c <HAL_UART_Receive_DMA+0xa0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a17      	ldr	r2, [pc, #92]	; (8007254 <HAL_UART_Receive_DMA+0xa8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01f      	beq.n	800723a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d018      	beq.n	800723a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	613b      	str	r3, [r7, #16]
   return(result);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	69f9      	ldr	r1, [r7, #28]
 800722c:	6a3a      	ldr	r2, [r7, #32]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	61bb      	str	r3, [r7, #24]
   return(result);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	461a      	mov	r2, r3
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 ffd7 	bl	80081f4 <UART_Start_Receive_DMA>
 8007246:	4603      	mov	r3, r0
 8007248:	e000      	b.n	800724c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3728      	adds	r7, #40	; 0x28
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	40008000 	.word	0x40008000

08007258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0ba      	sub	sp, #232	; 0xe8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800727e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007282:	f640 030f 	movw	r3, #2063	; 0x80f
 8007286:	4013      	ands	r3, r2
 8007288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800728c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d11b      	bne.n	80072cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d015      	beq.n	80072cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 82d6 	beq.w	800786e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
      }
      return;
 80072ca:	e2d0      	b.n	800786e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 811f 	beq.w	8007514 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072da:	4b8b      	ldr	r3, [pc, #556]	; (8007508 <HAL_UART_IRQHandler+0x2b0>)
 80072dc:	4013      	ands	r3, r2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80072e6:	4b89      	ldr	r3, [pc, #548]	; (800750c <HAL_UART_IRQHandler+0x2b4>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8112 	beq.w	8007514 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d011      	beq.n	8007320 <HAL_UART_IRQHandler+0xc8>
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007316:	f043 0201 	orr.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d011      	beq.n	8007350 <HAL_UART_IRQHandler+0xf8>
 800732c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2202      	movs	r2, #2
 800733e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007346:	f043 0204 	orr.w	r2, r3, #4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d011      	beq.n	8007380 <HAL_UART_IRQHandler+0x128>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2204      	movs	r2, #4
 800736e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007376:	f043 0202 	orr.w	r2, r3, #2
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d017      	beq.n	80073bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007398:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800739c:	4b5a      	ldr	r3, [pc, #360]	; (8007508 <HAL_UART_IRQHandler+0x2b0>)
 800739e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2208      	movs	r2, #8
 80073aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b2:	f043 0208 	orr.w	r2, r3, #8
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <HAL_UART_IRQHandler+0x196>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e4:	f043 0220 	orr.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 823c 	beq.w	8007872 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d013      	beq.n	800742e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d005      	beq.n	8007452 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800744a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04f      	beq.n	80074f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 ffb7 	bl	80083c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b40      	cmp	r3, #64	; 0x40
 8007464:	d141      	bne.n	80074ea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800747c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007492:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800749e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1d9      	bne.n	8007466 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d013      	beq.n	80074e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074be:	4a14      	ldr	r2, [pc, #80]	; (8007510 <HAL_UART_IRQHandler+0x2b8>)
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fc feb4 	bl	8004234 <HAL_DMA_Abort_IT>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d017      	beq.n	8007502 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	e00f      	b.n	8007502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9ee 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e8:	e00b      	b.n	8007502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9ea 	bl	80078c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	e007      	b.n	8007502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9e6 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007500:	e1b7      	b.n	8007872 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007502:	bf00      	nop
    return;
 8007504:	e1b5      	b.n	8007872 <HAL_UART_IRQHandler+0x61a>
 8007506:	bf00      	nop
 8007508:	10000001 	.word	0x10000001
 800750c:	04000120 	.word	0x04000120
 8007510:	08008727 	.word	0x08008727

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007518:	2b01      	cmp	r3, #1
 800751a:	f040 814a 	bne.w	80077b2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8143 	beq.w	80077b2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 813c 	beq.w	80077b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2210      	movs	r2, #16
 8007540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	f040 80b5 	bne.w	80076bc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800755e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8187 	beq.w	8007876 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800756e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007572:	429a      	cmp	r2, r3
 8007574:	f080 817f 	bcs.w	8007876 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 8086 	bne.w	80076a0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1da      	bne.n	8007594 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f0:	f023 0301 	bic.w	r3, r3, #1
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007602:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007606:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800760a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e1      	bne.n	80075de <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800762a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800762c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800763e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007640:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007644:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800764c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e3      	bne.n	800761a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2220      	movs	r2, #32
 8007656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007682:	65bb      	str	r3, [r7, #88]	; 0x58
 8007684:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e4      	bne.n	8007660 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc fd71 	bl	8004182 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f90f 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076ba:	e0dc      	b.n	8007876 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 80ce 	beq.w	800787a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80076de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80c9 	beq.w	800787a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800770a:	647b      	str	r3, [r7, #68]	; 0x44
 800770c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e4      	bne.n	80076e8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	623b      	str	r3, [r7, #32]
   return(result);
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007746:	633a      	str	r2, [r7, #48]	; 0x30
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e1      	bne.n	800771e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60fb      	str	r3, [r7, #12]
   return(result);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69b9      	ldr	r1, [r7, #24]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	617b      	str	r3, [r7, #20]
   return(result);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f894 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077b0:	e063      	b.n	800787a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <HAL_UART_IRQHandler+0x584>
 80077be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80077d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 ffe7 	bl	80087a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077da:	e051      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d014      	beq.n	8007812 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d105      	bne.n	8007800 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80077f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007804:	2b00      	cmp	r3, #0
 8007806:	d03a      	beq.n	800787e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
    }
    return;
 8007810:	e035      	b.n	800787e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <HAL_UART_IRQHandler+0x5da>
 800781e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 ff91 	bl	8008752 <UART_EndTransmit_IT>
    return;
 8007830:	e026      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_UART_IRQHandler+0x5fa>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 ffc0 	bl	80087d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007850:	e016      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d010      	beq.n	8007880 <HAL_UART_IRQHandler+0x628>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007862:	2b00      	cmp	r3, #0
 8007864:	da0c      	bge.n	8007880 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 ffa8 	bl	80087bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800786c:	e008      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
      return;
 800786e:	bf00      	nop
 8007870:	e006      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
    return;
 8007872:	bf00      	nop
 8007874:	e004      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
      return;
 8007876:	bf00      	nop
 8007878:	e002      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
      return;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_UART_IRQHandler+0x628>
    return;
 800787e:	bf00      	nop
  }
}
 8007880:	37e8      	adds	r7, #232	; 0xe8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078f4:	b08c      	sub	sp, #48	; 0x30
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	431a      	orrs	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	431a      	orrs	r2, r3
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	4313      	orrs	r3, r2
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4bab      	ldr	r3, [pc, #684]	; (8007bcc <UART_SetConfig+0x2dc>)
 8007920:	4013      	ands	r3, r2
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007928:	430b      	orrs	r3, r1
 800792a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4aa0      	ldr	r2, [pc, #640]	; (8007bd0 <UART_SetConfig+0x2e0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	4313      	orrs	r3, r2
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007970:	430b      	orrs	r3, r1
 8007972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	f023 010f 	bic.w	r1, r3, #15
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a91      	ldr	r2, [pc, #580]	; (8007bd4 <UART_SetConfig+0x2e4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d125      	bne.n	80079e0 <UART_SetConfig+0xf0>
 8007994:	4b90      	ldr	r3, [pc, #576]	; (8007bd8 <UART_SetConfig+0x2e8>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d81a      	bhi.n	80079d8 <UART_SetConfig+0xe8>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <UART_SetConfig+0xb8>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079c9 	.word	0x080079c9
 80079b0:	080079c1 	.word	0x080079c1
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079be:	e0d6      	b.n	8007b6e <UART_SetConfig+0x27e>
 80079c0:	2302      	movs	r3, #2
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079c6:	e0d2      	b.n	8007b6e <UART_SetConfig+0x27e>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ce:	e0ce      	b.n	8007b6e <UART_SetConfig+0x27e>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d6:	e0ca      	b.n	8007b6e <UART_SetConfig+0x27e>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079de:	e0c6      	b.n	8007b6e <UART_SetConfig+0x27e>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a7d      	ldr	r2, [pc, #500]	; (8007bdc <UART_SetConfig+0x2ec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d138      	bne.n	8007a5c <UART_SetConfig+0x16c>
 80079ea:	4b7b      	ldr	r3, [pc, #492]	; (8007bd8 <UART_SetConfig+0x2e8>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	2b0c      	cmp	r3, #12
 80079f6:	d82d      	bhi.n	8007a54 <UART_SetConfig+0x164>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <UART_SetConfig+0x110>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a55 	.word	0x08007a55
 8007a08:	08007a55 	.word	0x08007a55
 8007a0c:	08007a55 	.word	0x08007a55
 8007a10:	08007a45 	.word	0x08007a45
 8007a14:	08007a55 	.word	0x08007a55
 8007a18:	08007a55 	.word	0x08007a55
 8007a1c:	08007a55 	.word	0x08007a55
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a55 	.word	0x08007a55
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	08007a55 	.word	0x08007a55
 8007a30:	08007a4d 	.word	0x08007a4d
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3a:	e098      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a42:	e094      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a44:	2304      	movs	r3, #4
 8007a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a4a:	e090      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a52:	e08c      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a54:	2310      	movs	r3, #16
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a5a:	e088      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a5f      	ldr	r2, [pc, #380]	; (8007be0 <UART_SetConfig+0x2f0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d125      	bne.n	8007ab2 <UART_SetConfig+0x1c2>
 8007a66:	4b5c      	ldr	r3, [pc, #368]	; (8007bd8 <UART_SetConfig+0x2e8>)
 8007a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a70:	2b30      	cmp	r3, #48	; 0x30
 8007a72:	d016      	beq.n	8007aa2 <UART_SetConfig+0x1b2>
 8007a74:	2b30      	cmp	r3, #48	; 0x30
 8007a76:	d818      	bhi.n	8007aaa <UART_SetConfig+0x1ba>
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d00a      	beq.n	8007a92 <UART_SetConfig+0x1a2>
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d814      	bhi.n	8007aaa <UART_SetConfig+0x1ba>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <UART_SetConfig+0x19a>
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d008      	beq.n	8007a9a <UART_SetConfig+0x1aa>
 8007a88:	e00f      	b.n	8007aaa <UART_SetConfig+0x1ba>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a90:	e06d      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a92:	2302      	movs	r3, #2
 8007a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a98:	e069      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa0:	e065      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007aa2:	2308      	movs	r3, #8
 8007aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa8:	e061      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007aaa:	2310      	movs	r3, #16
 8007aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab0:	e05d      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a4b      	ldr	r2, [pc, #300]	; (8007be4 <UART_SetConfig+0x2f4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d125      	bne.n	8007b08 <UART_SetConfig+0x218>
 8007abc:	4b46      	ldr	r3, [pc, #280]	; (8007bd8 <UART_SetConfig+0x2e8>)
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ac8:	d016      	beq.n	8007af8 <UART_SetConfig+0x208>
 8007aca:	2bc0      	cmp	r3, #192	; 0xc0
 8007acc:	d818      	bhi.n	8007b00 <UART_SetConfig+0x210>
 8007ace:	2b80      	cmp	r3, #128	; 0x80
 8007ad0:	d00a      	beq.n	8007ae8 <UART_SetConfig+0x1f8>
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d814      	bhi.n	8007b00 <UART_SetConfig+0x210>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <UART_SetConfig+0x1f0>
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d008      	beq.n	8007af0 <UART_SetConfig+0x200>
 8007ade:	e00f      	b.n	8007b00 <UART_SetConfig+0x210>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae6:	e042      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aee:	e03e      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007af0:	2304      	movs	r3, #4
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af6:	e03a      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007af8:	2308      	movs	r3, #8
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afe:	e036      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b00:	2310      	movs	r3, #16
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b06:	e032      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a30      	ldr	r2, [pc, #192]	; (8007bd0 <UART_SetConfig+0x2e0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d12a      	bne.n	8007b68 <UART_SetConfig+0x278>
 8007b12:	4b31      	ldr	r3, [pc, #196]	; (8007bd8 <UART_SetConfig+0x2e8>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b20:	d01a      	beq.n	8007b58 <UART_SetConfig+0x268>
 8007b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b26:	d81b      	bhi.n	8007b60 <UART_SetConfig+0x270>
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d00c      	beq.n	8007b48 <UART_SetConfig+0x258>
 8007b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b32:	d815      	bhi.n	8007b60 <UART_SetConfig+0x270>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <UART_SetConfig+0x250>
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3c:	d008      	beq.n	8007b50 <UART_SetConfig+0x260>
 8007b3e:	e00f      	b.n	8007b60 <UART_SetConfig+0x270>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b46:	e012      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	e00e      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e00a      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e006      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e002      	b.n	8007b6e <UART_SetConfig+0x27e>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a17      	ldr	r2, [pc, #92]	; (8007bd0 <UART_SetConfig+0x2e0>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	f040 80a8 	bne.w	8007cca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	2b08      	cmp	r3, #8
 8007b80:	d834      	bhi.n	8007bec <UART_SetConfig+0x2fc>
 8007b82:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <UART_SetConfig+0x298>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bed 	.word	0x08007bed
 8007b90:	08007bb5 	.word	0x08007bb5
 8007b94:	08007bed 	.word	0x08007bed
 8007b98:	08007bbb 	.word	0x08007bbb
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bc3 	.word	0x08007bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bac:	f7fd fdb8 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8007bb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bb2:	e021      	b.n	8007bf8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <UART_SetConfig+0x2f8>)
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bb8:	e01e      	b.n	8007bf8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fd fd43 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8007bbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bc0:	e01a      	b.n	8007bf8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bc8:	e016      	b.n	8007bf8 <UART_SetConfig+0x308>
 8007bca:	bf00      	nop
 8007bcc:	cfff69f3 	.word	0xcfff69f3
 8007bd0:	40008000 	.word	0x40008000
 8007bd4:	40013800 	.word	0x40013800
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	40004400 	.word	0x40004400
 8007be0:	40004800 	.word	0x40004800
 8007be4:	40004c00 	.word	0x40004c00
 8007be8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 812a 	beq.w	8007e54 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	4a9e      	ldr	r2, [pc, #632]	; (8007e80 <UART_SetConfig+0x590>)
 8007c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	4413      	add	r3, r2
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d305      	bcc.n	8007c30 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d903      	bls.n	8007c38 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c36:	e10d      	b.n	8007e54 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	60fa      	str	r2, [r7, #12]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	4a8e      	ldr	r2, [pc, #568]	; (8007e80 <UART_SetConfig+0x590>)
 8007c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c5a:	f7f8 fb41 	bl	80002e0 <__aeabi_uldivmod>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4610      	mov	r0, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	020b      	lsls	r3, r1, #8
 8007c70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c74:	0202      	lsls	r2, r0, #8
 8007c76:	6979      	ldr	r1, [r7, #20]
 8007c78:	6849      	ldr	r1, [r1, #4]
 8007c7a:	0849      	lsrs	r1, r1, #1
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4605      	mov	r5, r0
 8007c82:	eb12 0804 	adds.w	r8, r2, r4
 8007c86:	eb43 0905 	adc.w	r9, r3, r5
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	469a      	mov	sl, r3
 8007c92:	4693      	mov	fp, r2
 8007c94:	4652      	mov	r2, sl
 8007c96:	465b      	mov	r3, fp
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 fb20 	bl	80002e0 <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cae:	d308      	bcc.n	8007cc2 <UART_SetConfig+0x3d2>
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb6:	d204      	bcs.n	8007cc2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	60da      	str	r2, [r3, #12]
 8007cc0:	e0c8      	b.n	8007e54 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cc8:	e0c4      	b.n	8007e54 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd2:	d167      	bne.n	8007da4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d828      	bhi.n	8007d2e <UART_SetConfig+0x43e>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <UART_SetConfig+0x3f4>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d11 	.word	0x08007d11
 8007cec:	08007d19 	.word	0x08007d19
 8007cf0:	08007d2f 	.word	0x08007d2f
 8007cf4:	08007d1f 	.word	0x08007d1f
 8007cf8:	08007d2f 	.word	0x08007d2f
 8007cfc:	08007d2f 	.word	0x08007d2f
 8007d00:	08007d2f 	.word	0x08007d2f
 8007d04:	08007d27 	.word	0x08007d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d08:	f7fd fd0a 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d0e:	e014      	b.n	8007d3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d10:	f7fd fd1c 	bl	800574c <HAL_RCC_GetPCLK2Freq>
 8007d14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d16:	e010      	b.n	8007d3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d18:	4b5a      	ldr	r3, [pc, #360]	; (8007e84 <UART_SetConfig+0x594>)
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d1c:	e00d      	b.n	8007d3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d1e:	f7fd fc91 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d24:	e009      	b.n	8007d3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d2c:	e005      	b.n	8007d3a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8089 	beq.w	8007e54 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	4a4e      	ldr	r2, [pc, #312]	; (8007e80 <UART_SetConfig+0x590>)
 8007d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d54:	005a      	lsls	r2, r3, #1
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	441a      	add	r2, r3
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	2b0f      	cmp	r3, #15
 8007d6c:	d916      	bls.n	8007d9c <UART_SetConfig+0x4ac>
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d212      	bcs.n	8007d9c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f023 030f 	bic.w	r3, r3, #15
 8007d7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	8bfb      	ldrh	r3, [r7, #30]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	8bfa      	ldrh	r2, [r7, #30]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e05b      	b.n	8007e54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007da2:	e057      	b.n	8007e54 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d828      	bhi.n	8007dfe <UART_SetConfig+0x50e>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <UART_SetConfig+0x4c4>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	08007dff 	.word	0x08007dff
 8007dc4:	08007def 	.word	0x08007def
 8007dc8:	08007dff 	.word	0x08007dff
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007dff 	.word	0x08007dff
 8007dd4:	08007df7 	.word	0x08007df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f7fd fca2 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8007ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dde:	e014      	b.n	8007e0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de0:	f7fd fcb4 	bl	800574c <HAL_RCC_GetPCLK2Freq>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007de6:	e010      	b.n	8007e0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de8:	4b26      	ldr	r3, [pc, #152]	; (8007e84 <UART_SetConfig+0x594>)
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dec:	e00d      	b.n	8007e0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fd fc29 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8007df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007df4:	e009      	b.n	8007e0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dfc:	e005      	b.n	8007e0a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e08:	bf00      	nop
    }

    if (pclk != 0U)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d021      	beq.n	8007e54 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <UART_SetConfig+0x590>)
 8007e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	441a      	add	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d909      	bls.n	8007e4e <UART_SetConfig+0x55e>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e40:	d205      	bcs.n	8007e4e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e002      	b.n	8007e54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3730      	adds	r7, #48	; 0x30
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7e:	bf00      	nop
 8007e80:	080094b8 	.word	0x080094b8
 8007e84:	00f42400 	.word	0x00f42400

08007e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f86:	d10a      	bne.n	8007f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fdc:	f7fa fa02 	bl	80023e4 <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d10e      	bne.n	800800e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f82f 	bl	8008062 <UART_WaitOnFlagUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e025      	b.n	800805a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b04      	cmp	r3, #4
 800801a:	d10e      	bne.n	800803a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800801c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f819 	bl	8008062 <UART_WaitOnFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e00f      	b.n	800805a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b09c      	sub	sp, #112	; 0x70
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008072:	e0a9      	b.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	f000 80a5 	beq.w	80081c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807e:	f7fa f9b1 	bl	80023e4 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800808a:	429a      	cmp	r2, r3
 800808c:	d302      	bcc.n	8008094 <UART_WaitOnFlagUntilTimeout+0x32>
 800808e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008090:	2b00      	cmp	r3, #0
 8008092:	d140      	bne.n	8008116 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080a8:	667b      	str	r3, [r7, #100]	; 0x64
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e6      	bne.n	8008094 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	663b      	str	r3, [r7, #96]	; 0x60
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80080e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e5      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2220      	movs	r2, #32
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e069      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d051      	beq.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800812e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008132:	d149      	bne.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800813c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	637b      	str	r3, [r7, #52]	; 0x34
 800815e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	613b      	str	r3, [r7, #16]
   return(result);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f023 0301 	bic.w	r3, r3, #1
 8008186:	66bb      	str	r3, [r7, #104]	; 0x68
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008190:	623a      	str	r2, [r7, #32]
 8008192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	61bb      	str	r3, [r7, #24]
   return(result);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e5      	bne.n	8008170 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e010      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69da      	ldr	r2, [r3, #28]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4013      	ands	r3, r2
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	f43f af46 	beq.w	8008074 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3770      	adds	r7, #112	; 0x70
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b096      	sub	sp, #88	; 0x58
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2222      	movs	r2, #34	; 0x22
 800821c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d02c      	beq.n	8008282 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822c:	4a42      	ldr	r2, [pc, #264]	; (8008338 <UART_Start_Receive_DMA+0x144>)
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008234:	4a41      	ldr	r2, [pc, #260]	; (800833c <UART_Start_Receive_DMA+0x148>)
 8008236:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823c:	4a40      	ldr	r2, [pc, #256]	; (8008340 <UART_Start_Receive_DMA+0x14c>)
 800823e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008244:	2200      	movs	r2, #0
 8008246:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3324      	adds	r3, #36	; 0x24
 8008252:	4619      	mov	r1, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008258:	461a      	mov	r2, r3
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	f7fb ff16 	bl	800408c <HAL_DMA_Start_IT>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2210      	movs	r2, #16
 800826a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e055      	b.n	800832e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d018      	beq.n	80082c4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e6      	bne.n	8008292 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	653b      	str	r3, [r7, #80]	; 0x50
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082e4:	637a      	str	r2, [r7, #52]	; 0x34
 80082e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e5      	bne.n	80082c4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	613b      	str	r3, [r7, #16]
   return(result);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008318:	623a      	str	r2, [r7, #32]
 800831a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	6a3a      	ldr	r2, [r7, #32]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	61bb      	str	r3, [r7, #24]
   return(result);
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e5      	bne.n	80082f8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3758      	adds	r7, #88	; 0x58
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	08008549 	.word	0x08008549
 800833c:	0800866f 	.word	0x0800866f
 8008340:	080086a7 	.word	0x080086a7

08008344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b08f      	sub	sp, #60	; 0x3c
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	61fb      	str	r3, [r7, #28]
   return(result);
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e6      	bne.n	800834c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008394:	633b      	str	r3, [r7, #48]	; 0x30
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	61ba      	str	r2, [r7, #24]
 80083a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80083ba:	bf00      	nop
 80083bc:	373c      	adds	r7, #60	; 0x3c
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b095      	sub	sp, #84	; 0x54
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
 80083ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	64bb      	str	r3, [r7, #72]	; 0x48
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800842a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e3      	bne.n	8008400 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d118      	bne.n	8008472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	60bb      	str	r3, [r7, #8]
   return(result);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f023 0310 	bic.w	r3, r3, #16
 8008454:	647b      	str	r3, [r7, #68]	; 0x44
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6979      	ldr	r1, [r7, #20]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e6      	bne.n	8008440 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008486:	bf00      	nop
 8008488:	3754      	adds	r7, #84	; 0x54
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b090      	sub	sp, #64	; 0x40
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d137      	bne.n	800851e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80084ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	623b      	str	r3, [r7, #32]
   return(result);
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d6:	633a      	str	r2, [r7, #48]	; 0x30
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e5      	bne.n	80084b6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	69b9      	ldr	r1, [r7, #24]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	617b      	str	r3, [r7, #20]
   return(result);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e6      	bne.n	80084ea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800851c:	e002      	b.n	8008524 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800851e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008520:	f7ff f9b2 	bl	8007888 <HAL_UART_TxCpltCallback>
}
 8008524:	bf00      	nop
 8008526:	3740      	adds	r7, #64	; 0x40
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff f9ae 	bl	800789c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008540:	bf00      	nop
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b09c      	sub	sp, #112	; 0x70
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d171      	bne.n	8008648 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008566:	2200      	movs	r2, #0
 8008568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008580:	66bb      	str	r3, [r7, #104]	; 0x68
 8008582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800858a:	65bb      	str	r3, [r7, #88]	; 0x58
 800858c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e6      	bne.n	800856c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	667b      	str	r3, [r7, #100]	; 0x64
 80085b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085be:	647a      	str	r2, [r7, #68]	; 0x44
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e5      	bne.n	800859e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	623b      	str	r3, [r7, #32]
   return(result);
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e8:	663b      	str	r3, [r7, #96]	; 0x60
 80085ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f2:	633a      	str	r2, [r7, #48]	; 0x30
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008612:	2b01      	cmp	r3, #1
 8008614:	d118      	bne.n	8008648 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60fb      	str	r3, [r7, #12]
   return(result);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0310 	bic.w	r3, r3, #16
 800862a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800862c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	69b9      	ldr	r1, [r7, #24]
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	617b      	str	r3, [r7, #20]
   return(result);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e6      	bne.n	8008616 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d107      	bne.n	8008660 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008652:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008656:	4619      	mov	r1, r3
 8008658:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800865a:	f7ff f93d 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800865e:	e002      	b.n	8008666 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008660:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008662:	f7f8 fd07 	bl	8001074 <HAL_UART_RxCpltCallback>
}
 8008666:	bf00      	nop
 8008668:	3770      	adds	r7, #112	; 0x70
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d109      	bne.n	8008698 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	b29b      	uxth	r3, r3
 800868e:	4619      	mov	r1, r3
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff f921 	bl	80078d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008696:	e002      	b.n	800869e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff f909 	bl	80078b0 <HAL_UART_RxHalfCpltCallback>
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ce:	2b80      	cmp	r3, #128	; 0x80
 80086d0:	d109      	bne.n	80086e6 <UART_DMAError+0x40>
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2b21      	cmp	r3, #33	; 0x21
 80086d6:	d106      	bne.n	80086e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80086e0:	6978      	ldr	r0, [r7, #20]
 80086e2:	f7ff fe2f 	bl	8008344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	d109      	bne.n	8008708 <UART_DMAError+0x62>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b22      	cmp	r3, #34	; 0x22
 80086f8:	d106      	bne.n	8008708 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008702:	6978      	ldr	r0, [r7, #20]
 8008704:	f7ff fe5f 	bl	80083c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800870e:	f043 0210 	orr.w	r2, r3, #16
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	f7ff f8d3 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871e:	bf00      	nop
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7ff f8bd 	bl	80078c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b088      	sub	sp, #32
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	60bb      	str	r3, [r7, #8]
   return(result);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	613b      	str	r3, [r7, #16]
   return(result);
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff f874 	bl	8007888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a0:	bf00      	nop
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UARTEx_DisableFifoMode+0x16>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e027      	b.n	800884a <HAL_UARTEx_DisableFifoMode+0x66>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2224      	movs	r2, #36	; 0x24
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008828:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800886a:	2302      	movs	r3, #2
 800886c:	e02d      	b.n	80088ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2224      	movs	r2, #36	; 0x24
 800887a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0201 	bic.w	r2, r2, #1
 8008894:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f850 	bl	8008950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e02d      	b.n	8008946 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2224      	movs	r2, #36	; 0x24
 80088f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0201 	bic.w	r2, r2, #1
 8008910:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f812 	bl	8008950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895c:	2b00      	cmp	r3, #0
 800895e:	d108      	bne.n	8008972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008970:	e031      	b.n	80089d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008972:	2308      	movs	r3, #8
 8008974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008976:	2308      	movs	r3, #8
 8008978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	0e5b      	lsrs	r3, r3, #25
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	0f5b      	lsrs	r3, r3, #29
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	7b3a      	ldrb	r2, [r7, #12]
 800899e:	4911      	ldr	r1, [pc, #68]	; (80089e4 <UARTEx_SetNbDataToProcess+0x94>)
 80089a0:	5c8a      	ldrb	r2, [r1, r2]
 80089a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089a6:	7b3a      	ldrb	r2, [r7, #12]
 80089a8:	490f      	ldr	r1, [pc, #60]	; (80089e8 <UARTEx_SetNbDataToProcess+0x98>)
 80089aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	7b7a      	ldrb	r2, [r7, #13]
 80089bc:	4909      	ldr	r1, [pc, #36]	; (80089e4 <UARTEx_SetNbDataToProcess+0x94>)
 80089be:	5c8a      	ldrb	r2, [r1, r2]
 80089c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089c4:	7b7a      	ldrb	r2, [r7, #13]
 80089c6:	4908      	ldr	r1, [pc, #32]	; (80089e8 <UARTEx_SetNbDataToProcess+0x98>)
 80089c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	080094d0 	.word	0x080094d0
 80089e8:	080094d8 	.word	0x080094d8

080089ec <siprintf>:
 80089ec:	b40e      	push	{r1, r2, r3}
 80089ee:	b500      	push	{lr}
 80089f0:	b09c      	sub	sp, #112	; 0x70
 80089f2:	ab1d      	add	r3, sp, #116	; 0x74
 80089f4:	9002      	str	r0, [sp, #8]
 80089f6:	9006      	str	r0, [sp, #24]
 80089f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089fc:	4809      	ldr	r0, [pc, #36]	; (8008a24 <siprintf+0x38>)
 80089fe:	9107      	str	r1, [sp, #28]
 8008a00:	9104      	str	r1, [sp, #16]
 8008a02:	4909      	ldr	r1, [pc, #36]	; (8008a28 <siprintf+0x3c>)
 8008a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a08:	9105      	str	r1, [sp, #20]
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	a902      	add	r1, sp, #8
 8008a10:	f000 f992 	bl	8008d38 <_svfiprintf_r>
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	b01c      	add	sp, #112	; 0x70
 8008a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a20:	b003      	add	sp, #12
 8008a22:	4770      	bx	lr
 8008a24:	2000005c 	.word	0x2000005c
 8008a28:	ffff0208 	.word	0xffff0208

08008a2c <memset>:
 8008a2c:	4402      	add	r2, r0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d100      	bne.n	8008a36 <memset+0xa>
 8008a34:	4770      	bx	lr
 8008a36:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3a:	e7f9      	b.n	8008a30 <memset+0x4>

08008a3c <__errno>:
 8008a3c:	4b01      	ldr	r3, [pc, #4]	; (8008a44 <__errno+0x8>)
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	2000005c 	.word	0x2000005c

08008a48 <__libc_init_array>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	4d0d      	ldr	r5, [pc, #52]	; (8008a80 <__libc_init_array+0x38>)
 8008a4c:	4c0d      	ldr	r4, [pc, #52]	; (8008a84 <__libc_init_array+0x3c>)
 8008a4e:	1b64      	subs	r4, r4, r5
 8008a50:	10a4      	asrs	r4, r4, #2
 8008a52:	2600      	movs	r6, #0
 8008a54:	42a6      	cmp	r6, r4
 8008a56:	d109      	bne.n	8008a6c <__libc_init_array+0x24>
 8008a58:	4d0b      	ldr	r5, [pc, #44]	; (8008a88 <__libc_init_array+0x40>)
 8008a5a:	4c0c      	ldr	r4, [pc, #48]	; (8008a8c <__libc_init_array+0x44>)
 8008a5c:	f000 fc6a 	bl	8009334 <_init>
 8008a60:	1b64      	subs	r4, r4, r5
 8008a62:	10a4      	asrs	r4, r4, #2
 8008a64:	2600      	movs	r6, #0
 8008a66:	42a6      	cmp	r6, r4
 8008a68:	d105      	bne.n	8008a76 <__libc_init_array+0x2e>
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a70:	4798      	blx	r3
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7ee      	b.n	8008a54 <__libc_init_array+0xc>
 8008a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7a:	4798      	blx	r3
 8008a7c:	3601      	adds	r6, #1
 8008a7e:	e7f2      	b.n	8008a66 <__libc_init_array+0x1e>
 8008a80:	0800951c 	.word	0x0800951c
 8008a84:	0800951c 	.word	0x0800951c
 8008a88:	0800951c 	.word	0x0800951c
 8008a8c:	08009520 	.word	0x08009520

08008a90 <__retarget_lock_acquire_recursive>:
 8008a90:	4770      	bx	lr

08008a92 <__retarget_lock_release_recursive>:
 8008a92:	4770      	bx	lr

08008a94 <_free_r>:
 8008a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d044      	beq.n	8008b24 <_free_r+0x90>
 8008a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9e:	9001      	str	r0, [sp, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8008aa6:	bfb8      	it	lt
 8008aa8:	18e4      	addlt	r4, r4, r3
 8008aaa:	f000 f8df 	bl	8008c6c <__malloc_lock>
 8008aae:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <_free_r+0x94>)
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	b933      	cbnz	r3, 8008ac4 <_free_r+0x30>
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6014      	str	r4, [r2, #0]
 8008aba:	b003      	add	sp, #12
 8008abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac0:	f000 b8da 	b.w	8008c78 <__malloc_unlock>
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d908      	bls.n	8008ada <_free_r+0x46>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf01      	itttt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	1949      	addeq	r1, r1, r5
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	e7ed      	b.n	8008ab6 <_free_r+0x22>
 8008ada:	461a      	mov	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b10b      	cbz	r3, 8008ae4 <_free_r+0x50>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x46>
 8008ae4:	6811      	ldr	r1, [r2, #0]
 8008ae6:	1855      	adds	r5, r2, r1
 8008ae8:	42a5      	cmp	r5, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x70>
 8008aec:	6824      	ldr	r4, [r4, #0]
 8008aee:	4421      	add	r1, r4
 8008af0:	1854      	adds	r4, r2, r1
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	d1e0      	bne.n	8008aba <_free_r+0x26>
 8008af8:	681c      	ldr	r4, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6053      	str	r3, [r2, #4]
 8008afe:	440c      	add	r4, r1
 8008b00:	6014      	str	r4, [r2, #0]
 8008b02:	e7da      	b.n	8008aba <_free_r+0x26>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x78>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	e7d6      	b.n	8008aba <_free_r+0x26>
 8008b0c:	6825      	ldr	r5, [r4, #0]
 8008b0e:	1961      	adds	r1, r4, r5
 8008b10:	428b      	cmp	r3, r1
 8008b12:	bf04      	itt	eq
 8008b14:	6819      	ldreq	r1, [r3, #0]
 8008b16:	685b      	ldreq	r3, [r3, #4]
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	bf04      	itt	eq
 8008b1c:	1949      	addeq	r1, r1, r5
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	6054      	str	r4, [r2, #4]
 8008b22:	e7ca      	b.n	8008aba <_free_r+0x26>
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	200008e4 	.word	0x200008e4

08008b2c <sbrk_aligned>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4e0e      	ldr	r6, [pc, #56]	; (8008b68 <sbrk_aligned+0x3c>)
 8008b30:	460c      	mov	r4, r1
 8008b32:	6831      	ldr	r1, [r6, #0]
 8008b34:	4605      	mov	r5, r0
 8008b36:	b911      	cbnz	r1, 8008b3e <sbrk_aligned+0x12>
 8008b38:	f000 fba6 	bl	8009288 <_sbrk_r>
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 fba1 	bl	8009288 <_sbrk_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d00a      	beq.n	8008b60 <sbrk_aligned+0x34>
 8008b4a:	1cc4      	adds	r4, r0, #3
 8008b4c:	f024 0403 	bic.w	r4, r4, #3
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d007      	beq.n	8008b64 <sbrk_aligned+0x38>
 8008b54:	1a21      	subs	r1, r4, r0
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 fb96 	bl	8009288 <_sbrk_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d101      	bne.n	8008b64 <sbrk_aligned+0x38>
 8008b60:	f04f 34ff 	mov.w	r4, #4294967295
 8008b64:	4620      	mov	r0, r4
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	200008e8 	.word	0x200008e8

08008b6c <_malloc_r>:
 8008b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b70:	1ccd      	adds	r5, r1, #3
 8008b72:	f025 0503 	bic.w	r5, r5, #3
 8008b76:	3508      	adds	r5, #8
 8008b78:	2d0c      	cmp	r5, #12
 8008b7a:	bf38      	it	cc
 8008b7c:	250c      	movcc	r5, #12
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	4607      	mov	r7, r0
 8008b82:	db01      	blt.n	8008b88 <_malloc_r+0x1c>
 8008b84:	42a9      	cmp	r1, r5
 8008b86:	d905      	bls.n	8008b94 <_malloc_r+0x28>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c68 <_malloc_r+0xfc>
 8008b98:	f000 f868 	bl	8008c6c <__malloc_lock>
 8008b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba0:	461c      	mov	r4, r3
 8008ba2:	bb5c      	cbnz	r4, 8008bfc <_malloc_r+0x90>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f7ff ffc0 	bl	8008b2c <sbrk_aligned>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	4604      	mov	r4, r0
 8008bb0:	d155      	bne.n	8008c5e <_malloc_r+0xf2>
 8008bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8008bb6:	4626      	mov	r6, r4
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	d145      	bne.n	8008c48 <_malloc_r+0xdc>
 8008bbc:	2c00      	cmp	r4, #0
 8008bbe:	d048      	beq.n	8008c52 <_malloc_r+0xe6>
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	eb04 0903 	add.w	r9, r4, r3
 8008bca:	f000 fb5d 	bl	8009288 <_sbrk_r>
 8008bce:	4581      	cmp	r9, r0
 8008bd0:	d13f      	bne.n	8008c52 <_malloc_r+0xe6>
 8008bd2:	6821      	ldr	r1, [r4, #0]
 8008bd4:	1a6d      	subs	r5, r5, r1
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f7ff ffa7 	bl	8008b2c <sbrk_aligned>
 8008bde:	3001      	adds	r0, #1
 8008be0:	d037      	beq.n	8008c52 <_malloc_r+0xe6>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	442b      	add	r3, r5
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d038      	beq.n	8008c62 <_malloc_r+0xf6>
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	42a2      	cmp	r2, r4
 8008bf4:	d12b      	bne.n	8008c4e <_malloc_r+0xe2>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	e00f      	b.n	8008c1c <_malloc_r+0xb0>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	1b52      	subs	r2, r2, r5
 8008c00:	d41f      	bmi.n	8008c42 <_malloc_r+0xd6>
 8008c02:	2a0b      	cmp	r2, #11
 8008c04:	d917      	bls.n	8008c36 <_malloc_r+0xca>
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	6025      	str	r5, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	6059      	strne	r1, [r3, #4]
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	bf08      	it	eq
 8008c14:	f8c8 1000 	streq.w	r1, [r8]
 8008c18:	5162      	str	r2, [r4, r5]
 8008c1a:	604b      	str	r3, [r1, #4]
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f104 060b 	add.w	r6, r4, #11
 8008c22:	f000 f829 	bl	8008c78 <__malloc_unlock>
 8008c26:	f026 0607 	bic.w	r6, r6, #7
 8008c2a:	1d23      	adds	r3, r4, #4
 8008c2c:	1af2      	subs	r2, r6, r3
 8008c2e:	d0ae      	beq.n	8008b8e <_malloc_r+0x22>
 8008c30:	1b9b      	subs	r3, r3, r6
 8008c32:	50a3      	str	r3, [r4, r2]
 8008c34:	e7ab      	b.n	8008b8e <_malloc_r+0x22>
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	6862      	ldr	r2, [r4, #4]
 8008c3a:	d1dd      	bne.n	8008bf8 <_malloc_r+0x8c>
 8008c3c:	f8c8 2000 	str.w	r2, [r8]
 8008c40:	e7ec      	b.n	8008c1c <_malloc_r+0xb0>
 8008c42:	4623      	mov	r3, r4
 8008c44:	6864      	ldr	r4, [r4, #4]
 8008c46:	e7ac      	b.n	8008ba2 <_malloc_r+0x36>
 8008c48:	4634      	mov	r4, r6
 8008c4a:	6876      	ldr	r6, [r6, #4]
 8008c4c:	e7b4      	b.n	8008bb8 <_malloc_r+0x4c>
 8008c4e:	4613      	mov	r3, r2
 8008c50:	e7cc      	b.n	8008bec <_malloc_r+0x80>
 8008c52:	230c      	movs	r3, #12
 8008c54:	603b      	str	r3, [r7, #0]
 8008c56:	4638      	mov	r0, r7
 8008c58:	f000 f80e 	bl	8008c78 <__malloc_unlock>
 8008c5c:	e797      	b.n	8008b8e <_malloc_r+0x22>
 8008c5e:	6025      	str	r5, [r4, #0]
 8008c60:	e7dc      	b.n	8008c1c <_malloc_r+0xb0>
 8008c62:	605b      	str	r3, [r3, #4]
 8008c64:	deff      	udf	#255	; 0xff
 8008c66:	bf00      	nop
 8008c68:	200008e4 	.word	0x200008e4

08008c6c <__malloc_lock>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__malloc_lock+0x8>)
 8008c6e:	f7ff bf0f 	b.w	8008a90 <__retarget_lock_acquire_recursive>
 8008c72:	bf00      	nop
 8008c74:	200008e0 	.word	0x200008e0

08008c78 <__malloc_unlock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__malloc_unlock+0x8>)
 8008c7a:	f7ff bf0a 	b.w	8008a92 <__retarget_lock_release_recursive>
 8008c7e:	bf00      	nop
 8008c80:	200008e0 	.word	0x200008e0

08008c84 <__ssputs_r>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	688e      	ldr	r6, [r1, #8]
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	42be      	cmp	r6, r7
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4682      	mov	sl, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4690      	mov	r8, r2
 8008c96:	d82c      	bhi.n	8008cf2 <__ssputs_r+0x6e>
 8008c98:	898a      	ldrh	r2, [r1, #12]
 8008c9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c9e:	d026      	beq.n	8008cee <__ssputs_r+0x6a>
 8008ca0:	6965      	ldr	r5, [r4, #20]
 8008ca2:	6909      	ldr	r1, [r1, #16]
 8008ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca8:	eba3 0901 	sub.w	r9, r3, r1
 8008cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb0:	1c7b      	adds	r3, r7, #1
 8008cb2:	444b      	add	r3, r9
 8008cb4:	106d      	asrs	r5, r5, #1
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	bf38      	it	cc
 8008cba:	461d      	movcc	r5, r3
 8008cbc:	0553      	lsls	r3, r2, #21
 8008cbe:	d527      	bpl.n	8008d10 <__ssputs_r+0x8c>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7ff ff53 	bl	8008b6c <_malloc_r>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	b360      	cbz	r0, 8008d24 <__ssputs_r+0xa0>
 8008cca:	6921      	ldr	r1, [r4, #16]
 8008ccc:	464a      	mov	r2, r9
 8008cce:	f000 faeb 	bl	80092a8 <memcpy>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	6126      	str	r6, [r4, #16]
 8008ce0:	6165      	str	r5, [r4, #20]
 8008ce2:	444e      	add	r6, r9
 8008ce4:	eba5 0509 	sub.w	r5, r5, r9
 8008ce8:	6026      	str	r6, [r4, #0]
 8008cea:	60a5      	str	r5, [r4, #8]
 8008cec:	463e      	mov	r6, r7
 8008cee:	42be      	cmp	r6, r7
 8008cf0:	d900      	bls.n	8008cf4 <__ssputs_r+0x70>
 8008cf2:	463e      	mov	r6, r7
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	f000 faab 	bl	8009254 <memmove>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	4433      	add	r3, r6
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d10:	462a      	mov	r2, r5
 8008d12:	f000 fad7 	bl	80092c4 <_realloc_r>
 8008d16:	4606      	mov	r6, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1e0      	bne.n	8008cde <__ssputs_r+0x5a>
 8008d1c:	6921      	ldr	r1, [r4, #16]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	f7ff feb8 	bl	8008a94 <_free_r>
 8008d24:	230c      	movs	r3, #12
 8008d26:	f8ca 3000 	str.w	r3, [sl]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295
 8008d36:	e7e9      	b.n	8008d0c <__ssputs_r+0x88>

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	061b      	lsls	r3, r3, #24
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4607      	mov	r7, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	d50e      	bpl.n	8008d6a <_svfiprintf_r+0x32>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b963      	cbnz	r3, 8008d6a <_svfiprintf_r+0x32>
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	f7ff ff0b 	bl	8008b6c <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_svfiprintf_r+0x2e>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e0d0      	b.n	8008f08 <_svfiprintf_r+0x1d0>
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f20 <_svfiprintf_r+0x1e8>
 8008d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x5c>
 8008d90:	2a25      	cmp	r2, #37	; 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x50>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7a>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6f 	bl	8008c84 <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80a9 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	; 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a1 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	4850      	ldr	r0, [pc, #320]	; (8008f20 <_svfiprintf_r+0x1e8>)
 8008dde:	f7f7 fa2f 	bl	8000240 <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xe6>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	; 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xf6>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4654      	mov	r4, sl
 8008e06:	2000      	movs	r0, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	; 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94d      	bls.n	8008eb4 <_svfiprintf_r+0x17c>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x110>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x110>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	46a2      	mov	sl, r4
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0x9c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d134      	bne.n	8008ebe <_svfiprintf_r+0x186>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	9203      	str	r2, [sp, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb8      	it	lt
 8008e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e64:	3402      	adds	r4, #2
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f30 <_svfiprintf_r+0x1f8>
 8008e6c:	7821      	ldrb	r1, [r4, #0]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7f7 f9e5 	bl	8000240 <memchr>
 8008e76:	b138      	cbz	r0, 8008e88 <_svfiprintf_r+0x150>
 8008e78:	9b04      	ldr	r3, [sp, #16]
 8008e7a:	eba0 000a 	sub.w	r0, r0, sl
 8008e7e:	2240      	movs	r2, #64	; 0x40
 8008e80:	4082      	lsls	r2, r0
 8008e82:	4313      	orrs	r3, r2
 8008e84:	3401      	adds	r4, #1
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	4825      	ldr	r0, [pc, #148]	; (8008f24 <_svfiprintf_r+0x1ec>)
 8008e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e92:	2206      	movs	r2, #6
 8008e94:	f7f7 f9d4 	bl	8000240 <memchr>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d038      	beq.n	8008f0e <_svfiprintf_r+0x1d6>
 8008e9c:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <_svfiprintf_r+0x1f0>)
 8008e9e:	bb1b      	cbnz	r3, 8008ee8 <_svfiprintf_r+0x1b0>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	4433      	add	r3, r6
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	e768      	b.n	8008d86 <_svfiprintf_r+0x4e>
 8008eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb8:	460c      	mov	r4, r1
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7a6      	b.n	8008e0c <_svfiprintf_r+0xd4>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	3401      	adds	r4, #1
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f04f 0c0a 	mov.w	ip, #10
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed0:	3a30      	subs	r2, #48	; 0x30
 8008ed2:	2a09      	cmp	r2, #9
 8008ed4:	d903      	bls.n	8008ede <_svfiprintf_r+0x1a6>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0c6      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008eda:	9105      	str	r1, [sp, #20]
 8008edc:	e7c4      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e7f0      	b.n	8008eca <_svfiprintf_r+0x192>
 8008ee8:	ab03      	add	r3, sp, #12
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	462a      	mov	r2, r5
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008ef0:	a904      	add	r1, sp, #16
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	1c42      	adds	r2, r0, #1
 8008efa:	4606      	mov	r6, r0
 8008efc:	d1d6      	bne.n	8008eac <_svfiprintf_r+0x174>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af2d 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f08:	b01d      	add	sp, #116	; 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	462a      	mov	r2, r5
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f000 f879 	bl	8009010 <_printf_i>
 8008f1e:	e7eb      	b.n	8008ef8 <_svfiprintf_r+0x1c0>
 8008f20:	080094e0 	.word	0x080094e0
 8008f24:	080094ea 	.word	0x080094ea
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	08008c85 	.word	0x08008c85
 8008f30:	080094e6 	.word	0x080094e6

08008f34 <_printf_common>:
 8008f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	4616      	mov	r6, r2
 8008f3a:	4699      	mov	r9, r3
 8008f3c:	688a      	ldr	r2, [r1, #8]
 8008f3e:	690b      	ldr	r3, [r1, #16]
 8008f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bfb8      	it	lt
 8008f48:	4613      	movlt	r3, r2
 8008f4a:	6033      	str	r3, [r6, #0]
 8008f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f50:	4607      	mov	r7, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b10a      	cbz	r2, 8008f5a <_printf_common+0x26>
 8008f56:	3301      	adds	r3, #1
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	0699      	lsls	r1, r3, #26
 8008f5e:	bf42      	ittt	mi
 8008f60:	6833      	ldrmi	r3, [r6, #0]
 8008f62:	3302      	addmi	r3, #2
 8008f64:	6033      	strmi	r3, [r6, #0]
 8008f66:	6825      	ldr	r5, [r4, #0]
 8008f68:	f015 0506 	ands.w	r5, r5, #6
 8008f6c:	d106      	bne.n	8008f7c <_printf_common+0x48>
 8008f6e:	f104 0a19 	add.w	sl, r4, #25
 8008f72:	68e3      	ldr	r3, [r4, #12]
 8008f74:	6832      	ldr	r2, [r6, #0]
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	42ab      	cmp	r3, r5
 8008f7a:	dc26      	bgt.n	8008fca <_printf_common+0x96>
 8008f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f80:	1e13      	subs	r3, r2, #0
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	bf18      	it	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	0692      	lsls	r2, r2, #26
 8008f8a:	d42b      	bmi.n	8008fe4 <_printf_common+0xb0>
 8008f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f90:	4649      	mov	r1, r9
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c0      	blx	r8
 8008f96:	3001      	adds	r0, #1
 8008f98:	d01e      	beq.n	8008fd8 <_printf_common+0xa4>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	f003 0306 	and.w	r3, r3, #6
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	bf02      	ittt	eq
 8008fa6:	68e5      	ldreq	r5, [r4, #12]
 8008fa8:	6833      	ldreq	r3, [r6, #0]
 8008faa:	1aed      	subeq	r5, r5, r3
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	bf0c      	ite	eq
 8008fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb4:	2500      	movne	r5, #0
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	bfc4      	itt	gt
 8008fba:	1a9b      	subgt	r3, r3, r2
 8008fbc:	18ed      	addgt	r5, r5, r3
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	341a      	adds	r4, #26
 8008fc2:	42b5      	cmp	r5, r6
 8008fc4:	d11a      	bne.n	8008ffc <_printf_common+0xc8>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e008      	b.n	8008fdc <_printf_common+0xa8>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4652      	mov	r2, sl
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	47c0      	blx	r8
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d103      	bne.n	8008fe0 <_printf_common+0xac>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	3501      	adds	r5, #1
 8008fe2:	e7c6      	b.n	8008f72 <_printf_common+0x3e>
 8008fe4:	18e1      	adds	r1, r4, r3
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	2030      	movs	r0, #48	; 0x30
 8008fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fee:	4422      	add	r2, r4
 8008ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	e7c7      	b.n	8008f8c <_printf_common+0x58>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4622      	mov	r2, r4
 8009000:	4649      	mov	r1, r9
 8009002:	4638      	mov	r0, r7
 8009004:	47c0      	blx	r8
 8009006:	3001      	adds	r0, #1
 8009008:	d0e6      	beq.n	8008fd8 <_printf_common+0xa4>
 800900a:	3601      	adds	r6, #1
 800900c:	e7d9      	b.n	8008fc2 <_printf_common+0x8e>
	...

08009010 <_printf_i>:
 8009010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	7e0f      	ldrb	r7, [r1, #24]
 8009016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009018:	2f78      	cmp	r7, #120	; 0x78
 800901a:	4691      	mov	r9, r2
 800901c:	4680      	mov	r8, r0
 800901e:	460c      	mov	r4, r1
 8009020:	469a      	mov	sl, r3
 8009022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009026:	d807      	bhi.n	8009038 <_printf_i+0x28>
 8009028:	2f62      	cmp	r7, #98	; 0x62
 800902a:	d80a      	bhi.n	8009042 <_printf_i+0x32>
 800902c:	2f00      	cmp	r7, #0
 800902e:	f000 80d4 	beq.w	80091da <_printf_i+0x1ca>
 8009032:	2f58      	cmp	r7, #88	; 0x58
 8009034:	f000 80c0 	beq.w	80091b8 <_printf_i+0x1a8>
 8009038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800903c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009040:	e03a      	b.n	80090b8 <_printf_i+0xa8>
 8009042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009046:	2b15      	cmp	r3, #21
 8009048:	d8f6      	bhi.n	8009038 <_printf_i+0x28>
 800904a:	a101      	add	r1, pc, #4	; (adr r1, 8009050 <_printf_i+0x40>)
 800904c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009050:	080090a9 	.word	0x080090a9
 8009054:	080090bd 	.word	0x080090bd
 8009058:	08009039 	.word	0x08009039
 800905c:	08009039 	.word	0x08009039
 8009060:	08009039 	.word	0x08009039
 8009064:	08009039 	.word	0x08009039
 8009068:	080090bd 	.word	0x080090bd
 800906c:	08009039 	.word	0x08009039
 8009070:	08009039 	.word	0x08009039
 8009074:	08009039 	.word	0x08009039
 8009078:	08009039 	.word	0x08009039
 800907c:	080091c1 	.word	0x080091c1
 8009080:	080090e9 	.word	0x080090e9
 8009084:	0800917b 	.word	0x0800917b
 8009088:	08009039 	.word	0x08009039
 800908c:	08009039 	.word	0x08009039
 8009090:	080091e3 	.word	0x080091e3
 8009094:	08009039 	.word	0x08009039
 8009098:	080090e9 	.word	0x080090e9
 800909c:	08009039 	.word	0x08009039
 80090a0:	08009039 	.word	0x08009039
 80090a4:	08009183 	.word	0x08009183
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	602a      	str	r2, [r5, #0]
 80090b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090b8:	2301      	movs	r3, #1
 80090ba:	e09f      	b.n	80091fc <_printf_i+0x1ec>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	682b      	ldr	r3, [r5, #0]
 80090c0:	0607      	lsls	r7, r0, #24
 80090c2:	f103 0104 	add.w	r1, r3, #4
 80090c6:	6029      	str	r1, [r5, #0]
 80090c8:	d501      	bpl.n	80090ce <_printf_i+0xbe>
 80090ca:	681e      	ldr	r6, [r3, #0]
 80090cc:	e003      	b.n	80090d6 <_printf_i+0xc6>
 80090ce:	0646      	lsls	r6, r0, #25
 80090d0:	d5fb      	bpl.n	80090ca <_printf_i+0xba>
 80090d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	da03      	bge.n	80090e2 <_printf_i+0xd2>
 80090da:	232d      	movs	r3, #45	; 0x2d
 80090dc:	4276      	negs	r6, r6
 80090de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e2:	485a      	ldr	r0, [pc, #360]	; (800924c <_printf_i+0x23c>)
 80090e4:	230a      	movs	r3, #10
 80090e6:	e012      	b.n	800910e <_printf_i+0xfe>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	1d19      	adds	r1, r3, #4
 80090ee:	6029      	str	r1, [r5, #0]
 80090f0:	0605      	lsls	r5, r0, #24
 80090f2:	d501      	bpl.n	80090f8 <_printf_i+0xe8>
 80090f4:	681e      	ldr	r6, [r3, #0]
 80090f6:	e002      	b.n	80090fe <_printf_i+0xee>
 80090f8:	0641      	lsls	r1, r0, #25
 80090fa:	d5fb      	bpl.n	80090f4 <_printf_i+0xe4>
 80090fc:	881e      	ldrh	r6, [r3, #0]
 80090fe:	4853      	ldr	r0, [pc, #332]	; (800924c <_printf_i+0x23c>)
 8009100:	2f6f      	cmp	r7, #111	; 0x6f
 8009102:	bf0c      	ite	eq
 8009104:	2308      	moveq	r3, #8
 8009106:	230a      	movne	r3, #10
 8009108:	2100      	movs	r1, #0
 800910a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800910e:	6865      	ldr	r5, [r4, #4]
 8009110:	60a5      	str	r5, [r4, #8]
 8009112:	2d00      	cmp	r5, #0
 8009114:	bfa2      	ittt	ge
 8009116:	6821      	ldrge	r1, [r4, #0]
 8009118:	f021 0104 	bicge.w	r1, r1, #4
 800911c:	6021      	strge	r1, [r4, #0]
 800911e:	b90e      	cbnz	r6, 8009124 <_printf_i+0x114>
 8009120:	2d00      	cmp	r5, #0
 8009122:	d04b      	beq.n	80091bc <_printf_i+0x1ac>
 8009124:	4615      	mov	r5, r2
 8009126:	fbb6 f1f3 	udiv	r1, r6, r3
 800912a:	fb03 6711 	mls	r7, r3, r1, r6
 800912e:	5dc7      	ldrb	r7, [r0, r7]
 8009130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009134:	4637      	mov	r7, r6
 8009136:	42bb      	cmp	r3, r7
 8009138:	460e      	mov	r6, r1
 800913a:	d9f4      	bls.n	8009126 <_printf_i+0x116>
 800913c:	2b08      	cmp	r3, #8
 800913e:	d10b      	bne.n	8009158 <_printf_i+0x148>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	07de      	lsls	r6, r3, #31
 8009144:	d508      	bpl.n	8009158 <_printf_i+0x148>
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	4299      	cmp	r1, r3
 800914c:	bfde      	ittt	le
 800914e:	2330      	movle	r3, #48	; 0x30
 8009150:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009154:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009158:	1b52      	subs	r2, r2, r5
 800915a:	6122      	str	r2, [r4, #16]
 800915c:	f8cd a000 	str.w	sl, [sp]
 8009160:	464b      	mov	r3, r9
 8009162:	aa03      	add	r2, sp, #12
 8009164:	4621      	mov	r1, r4
 8009166:	4640      	mov	r0, r8
 8009168:	f7ff fee4 	bl	8008f34 <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	d14a      	bne.n	8009206 <_printf_i+0x1f6>
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	b004      	add	sp, #16
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	f043 0320 	orr.w	r3, r3, #32
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	4833      	ldr	r0, [pc, #204]	; (8009250 <_printf_i+0x240>)
 8009184:	2778      	movs	r7, #120	; 0x78
 8009186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	6829      	ldr	r1, [r5, #0]
 800918e:	061f      	lsls	r7, r3, #24
 8009190:	f851 6b04 	ldr.w	r6, [r1], #4
 8009194:	d402      	bmi.n	800919c <_printf_i+0x18c>
 8009196:	065f      	lsls	r7, r3, #25
 8009198:	bf48      	it	mi
 800919a:	b2b6      	uxthmi	r6, r6
 800919c:	07df      	lsls	r7, r3, #31
 800919e:	bf48      	it	mi
 80091a0:	f043 0320 	orrmi.w	r3, r3, #32
 80091a4:	6029      	str	r1, [r5, #0]
 80091a6:	bf48      	it	mi
 80091a8:	6023      	strmi	r3, [r4, #0]
 80091aa:	b91e      	cbnz	r6, 80091b4 <_printf_i+0x1a4>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	f023 0320 	bic.w	r3, r3, #32
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	2310      	movs	r3, #16
 80091b6:	e7a7      	b.n	8009108 <_printf_i+0xf8>
 80091b8:	4824      	ldr	r0, [pc, #144]	; (800924c <_printf_i+0x23c>)
 80091ba:	e7e4      	b.n	8009186 <_printf_i+0x176>
 80091bc:	4615      	mov	r5, r2
 80091be:	e7bd      	b.n	800913c <_printf_i+0x12c>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	6826      	ldr	r6, [r4, #0]
 80091c4:	6961      	ldr	r1, [r4, #20]
 80091c6:	1d18      	adds	r0, r3, #4
 80091c8:	6028      	str	r0, [r5, #0]
 80091ca:	0635      	lsls	r5, r6, #24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0x1c4>
 80091d0:	6019      	str	r1, [r3, #0]
 80091d2:	e002      	b.n	80091da <_printf_i+0x1ca>
 80091d4:	0670      	lsls	r0, r6, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0x1c0>
 80091d8:	8019      	strh	r1, [r3, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	4615      	mov	r5, r2
 80091e0:	e7bc      	b.n	800915c <_printf_i+0x14c>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	1d1a      	adds	r2, r3, #4
 80091e6:	602a      	str	r2, [r5, #0]
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	2100      	movs	r1, #0
 80091ee:	4628      	mov	r0, r5
 80091f0:	f7f7 f826 	bl	8000240 <memchr>
 80091f4:	b108      	cbz	r0, 80091fa <_printf_i+0x1ea>
 80091f6:	1b40      	subs	r0, r0, r5
 80091f8:	6060      	str	r0, [r4, #4]
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	2300      	movs	r3, #0
 8009200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009204:	e7aa      	b.n	800915c <_printf_i+0x14c>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	462a      	mov	r2, r5
 800920a:	4649      	mov	r1, r9
 800920c:	4640      	mov	r0, r8
 800920e:	47d0      	blx	sl
 8009210:	3001      	adds	r0, #1
 8009212:	d0ad      	beq.n	8009170 <_printf_i+0x160>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	079b      	lsls	r3, r3, #30
 8009218:	d413      	bmi.n	8009242 <_printf_i+0x232>
 800921a:	68e0      	ldr	r0, [r4, #12]
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	4298      	cmp	r0, r3
 8009220:	bfb8      	it	lt
 8009222:	4618      	movlt	r0, r3
 8009224:	e7a6      	b.n	8009174 <_printf_i+0x164>
 8009226:	2301      	movs	r3, #1
 8009228:	4632      	mov	r2, r6
 800922a:	4649      	mov	r1, r9
 800922c:	4640      	mov	r0, r8
 800922e:	47d0      	blx	sl
 8009230:	3001      	adds	r0, #1
 8009232:	d09d      	beq.n	8009170 <_printf_i+0x160>
 8009234:	3501      	adds	r5, #1
 8009236:	68e3      	ldr	r3, [r4, #12]
 8009238:	9903      	ldr	r1, [sp, #12]
 800923a:	1a5b      	subs	r3, r3, r1
 800923c:	42ab      	cmp	r3, r5
 800923e:	dcf2      	bgt.n	8009226 <_printf_i+0x216>
 8009240:	e7eb      	b.n	800921a <_printf_i+0x20a>
 8009242:	2500      	movs	r5, #0
 8009244:	f104 0619 	add.w	r6, r4, #25
 8009248:	e7f5      	b.n	8009236 <_printf_i+0x226>
 800924a:	bf00      	nop
 800924c:	080094f1 	.word	0x080094f1
 8009250:	08009502 	.word	0x08009502

08009254 <memmove>:
 8009254:	4288      	cmp	r0, r1
 8009256:	b510      	push	{r4, lr}
 8009258:	eb01 0402 	add.w	r4, r1, r2
 800925c:	d902      	bls.n	8009264 <memmove+0x10>
 800925e:	4284      	cmp	r4, r0
 8009260:	4623      	mov	r3, r4
 8009262:	d807      	bhi.n	8009274 <memmove+0x20>
 8009264:	1e43      	subs	r3, r0, #1
 8009266:	42a1      	cmp	r1, r4
 8009268:	d008      	beq.n	800927c <memmove+0x28>
 800926a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800926e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009272:	e7f8      	b.n	8009266 <memmove+0x12>
 8009274:	4402      	add	r2, r0
 8009276:	4601      	mov	r1, r0
 8009278:	428a      	cmp	r2, r1
 800927a:	d100      	bne.n	800927e <memmove+0x2a>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009286:	e7f7      	b.n	8009278 <memmove+0x24>

08009288 <_sbrk_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d06      	ldr	r5, [pc, #24]	; (80092a4 <_sbrk_r+0x1c>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	f7f8 ffd0 	bl	8002238 <_sbrk>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_sbrk_r+0x1a>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_sbrk_r+0x1a>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	200008dc 	.word	0x200008dc

080092a8 <memcpy>:
 80092a8:	440a      	add	r2, r1
 80092aa:	4291      	cmp	r1, r2
 80092ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80092b0:	d100      	bne.n	80092b4 <memcpy+0xc>
 80092b2:	4770      	bx	lr
 80092b4:	b510      	push	{r4, lr}
 80092b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092be:	4291      	cmp	r1, r2
 80092c0:	d1f9      	bne.n	80092b6 <memcpy+0xe>
 80092c2:	bd10      	pop	{r4, pc}

080092c4 <_realloc_r>:
 80092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c8:	4680      	mov	r8, r0
 80092ca:	4614      	mov	r4, r2
 80092cc:	460e      	mov	r6, r1
 80092ce:	b921      	cbnz	r1, 80092da <_realloc_r+0x16>
 80092d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4611      	mov	r1, r2
 80092d6:	f7ff bc49 	b.w	8008b6c <_malloc_r>
 80092da:	b92a      	cbnz	r2, 80092e8 <_realloc_r+0x24>
 80092dc:	f7ff fbda 	bl	8008a94 <_free_r>
 80092e0:	4625      	mov	r5, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	f000 f81b 	bl	8009322 <_malloc_usable_size_r>
 80092ec:	4284      	cmp	r4, r0
 80092ee:	4607      	mov	r7, r0
 80092f0:	d802      	bhi.n	80092f8 <_realloc_r+0x34>
 80092f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092f6:	d812      	bhi.n	800931e <_realloc_r+0x5a>
 80092f8:	4621      	mov	r1, r4
 80092fa:	4640      	mov	r0, r8
 80092fc:	f7ff fc36 	bl	8008b6c <_malloc_r>
 8009300:	4605      	mov	r5, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d0ed      	beq.n	80092e2 <_realloc_r+0x1e>
 8009306:	42bc      	cmp	r4, r7
 8009308:	4622      	mov	r2, r4
 800930a:	4631      	mov	r1, r6
 800930c:	bf28      	it	cs
 800930e:	463a      	movcs	r2, r7
 8009310:	f7ff ffca 	bl	80092a8 <memcpy>
 8009314:	4631      	mov	r1, r6
 8009316:	4640      	mov	r0, r8
 8009318:	f7ff fbbc 	bl	8008a94 <_free_r>
 800931c:	e7e1      	b.n	80092e2 <_realloc_r+0x1e>
 800931e:	4635      	mov	r5, r6
 8009320:	e7df      	b.n	80092e2 <_realloc_r+0x1e>

08009322 <_malloc_usable_size_r>:
 8009322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009326:	1f18      	subs	r0, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfbc      	itt	lt
 800932c:	580b      	ldrlt	r3, [r1, r0]
 800932e:	18c0      	addlt	r0, r0, r3
 8009330:	4770      	bx	lr
	...

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
